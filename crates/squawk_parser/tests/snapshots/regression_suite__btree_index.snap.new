---
source: crates/squawk_parser/tests/regression_suite.rs
assertion_line: 87
input_file: crates/squawk_parser/tests/data/regression_suite/btree_index.sql
---
SOURCE_FILE
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- BTREE_INDEX"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  COMMENT "-- directory paths are passed to us in environment variables"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bt_i4_heap"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "seqno"
        WHITESPACE " \t\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "int4"
      COMMA ","
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "random"
        WHITESPACE " \t\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "int4"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bt_name_heap"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "seqno"
        WHITESPACE " \t\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NAME_KW "name"
      COMMA ","
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "random"
        WHITESPACE " \t\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "int4"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bt_txt_heap"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "seqno"
        WHITESPACE " \t\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "random"
        WHITESPACE " \t\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "int4"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bt_f8_heap"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "seqno"
        WHITESPACE " \t\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "float8"
      COMMA ","
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "random"
        WHITESPACE " \t\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "int4"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bt_i4_heap"
    WHITESPACE " "
    FROM_KW "FROM"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    STRING "'filename'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bt_name_heap"
    WHITESPACE " "
    FROM_KW "FROM"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    STRING "'filename'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bt_txt_heap"
    WHITESPACE " "
    FROM_KW "FROM"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    STRING "'filename'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bt_f8_heap"
    WHITESPACE " "
    FROM_KW "FROM"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    STRING "'filename'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ANALYZE_STMT
    ANALYZE_KW "ANALYZE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "bt_i4_heap"
  SEMICOLON ";"
  WHITESPACE "\n"
  ANALYZE_STMT
    ANALYZE_KW "ANALYZE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "bt_name_heap"
  SEMICOLON ";"
  WHITESPACE "\n"
  ANALYZE_STMT
    ANALYZE_KW "ANALYZE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "bt_txt_heap"
  SEMICOLON ";"
  WHITESPACE "\n"
  ANALYZE_STMT
    ANALYZE_KW "ANALYZE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "bt_f8_heap"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- BTREE ascending/descending cases"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- we load int4/text from pure descending data (each key is a new"
  WHITESPACE "\n"
  COMMENT "-- low key) and name/f8 from pure ascending data (each key is a new"
  WHITESPACE "\n"
  COMMENT "-- high key).  we had a bug where new low keys would sometimes be"
  WHITESPACE "\n"
  COMMENT "-- \"lost\"."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "bt_i4_index"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "bt_i4_heap"
    WHITESPACE " "
    USING_KW "USING"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "seqno"
      WHITESPACE " "
      IDENT "int4_ops"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "bt_name_index"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "bt_name_heap"
    WHITESPACE " "
    USING_KW "USING"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "seqno"
      WHITESPACE " "
      IDENT "name_ops"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "bt_txt_index"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "bt_txt_heap"
    WHITESPACE " "
    USING_KW "USING"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "seqno"
      WHITESPACE " "
      IDENT "text_ops"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "bt_f8_index"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "bt_f8_heap"
    WHITESPACE " "
    USING_KW "USING"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "seqno"
      WHITESPACE " "
      IDENT "float8_ops"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- test retrieval of min/max keys for each index"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            STAR "*"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "bt_i4_heap"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        FIELD_EXPR
          NAME_REF
            IDENT "b"
          DOT "."
          NAME_REF
            IDENT "seqno"
        WHITESPACE " "
        L_ANGLE "<"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            STAR "*"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "bt_i4_heap"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        FIELD_EXPR
          NAME_REF
            IDENT "b"
          DOT "."
          NAME_REF
            IDENT "seqno"
        WHITESPACE " "
        GTEQ ">="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "9999"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            STAR "*"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "bt_i4_heap"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        FIELD_EXPR
          NAME_REF
            IDENT "b"
          DOT "."
          NAME_REF
            IDENT "seqno"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "4500"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            STAR "*"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "bt_name_heap"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        FIELD_EXPR
          NAME_REF
            IDENT "b"
          DOT "."
          NAME_REF
            IDENT "seqno"
        WHITESPACE " "
        L_ANGLE "<"
        WHITESPACE " "
        CAST_EXPR
          LITERAL
            STRING "'1'"
          COLON2 "::"
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  NAME_KW "name"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            STAR "*"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "bt_name_heap"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        FIELD_EXPR
          NAME_REF
            IDENT "b"
          DOT "."
          NAME_REF
            IDENT "seqno"
        WHITESPACE " "
        GTEQ ">="
        WHITESPACE " "
        CAST_EXPR
          LITERAL
            STRING "'9999'"
          COLON2 "::"
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  NAME_KW "name"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            STAR "*"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "bt_name_heap"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        FIELD_EXPR
          NAME_REF
            IDENT "b"
          DOT "."
          NAME_REF
            IDENT "seqno"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        CAST_EXPR
          LITERAL
            STRING "'4500'"
          COLON2 "::"
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  NAME_KW "name"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            STAR "*"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "bt_txt_heap"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        FIELD_EXPR
          NAME_REF
            IDENT "b"
          DOT "."
          NAME_REF
            IDENT "seqno"
        WHITESPACE " "
        L_ANGLE "<"
        WHITESPACE " "
        CAST_EXPR
          LITERAL
            STRING "'1'"
          COLON2 "::"
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  TEXT_KW "text"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            STAR "*"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "bt_txt_heap"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        FIELD_EXPR
          NAME_REF
            IDENT "b"
          DOT "."
          NAME_REF
            IDENT "seqno"
        WHITESPACE " "
        GTEQ ">="
        WHITESPACE " "
        CAST_EXPR
          LITERAL
            STRING "'9999'"
          COLON2 "::"
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  TEXT_KW "text"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            STAR "*"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "bt_txt_heap"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        FIELD_EXPR
          NAME_REF
            IDENT "b"
          DOT "."
          NAME_REF
            IDENT "seqno"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        CAST_EXPR
          LITERAL
            STRING "'4500'"
          COLON2 "::"
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  TEXT_KW "text"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            STAR "*"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "bt_f8_heap"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        FIELD_EXPR
          NAME_REF
            IDENT "b"
          DOT "."
          NAME_REF
            IDENT "seqno"
        WHITESPACE " "
        L_ANGLE "<"
        WHITESPACE " "
        CAST_EXPR
          LITERAL
            STRING "'1'"
          COLON2 "::"
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  IDENT "float8"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            STAR "*"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "bt_f8_heap"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        FIELD_EXPR
          NAME_REF
            IDENT "b"
          DOT "."
          NAME_REF
            IDENT "seqno"
        WHITESPACE " "
        GTEQ ">="
        WHITESPACE " "
        CAST_EXPR
          LITERAL
            STRING "'9999'"
          COLON2 "::"
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  IDENT "float8"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            STAR "*"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "bt_f8_heap"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        FIELD_EXPR
          NAME_REF
            IDENT "b"
          DOT "."
          NAME_REF
            IDENT "seqno"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        CAST_EXPR
          LITERAL
            STRING "'4500'"
          COLON2 "::"
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  IDENT "float8"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Add coverage of RowCompare quals whose row omits a column (\"proargtypes\")"
  WHITESPACE "\n"
  COMMENT "-- that's after the first column, but before the final column.  The scan's"
  WHITESPACE "\n"
  COMMENT "-- initial positioning strategy must become >= here (it's not the > strategy,"
  WHITESPACE "\n"
  COMMENT "-- since the absence of \"proargtypes\" makes that tighter constraint unsafe)."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "proargtypes"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "pronamespace"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        TUPLE_EXPR
          L_PAREN "("
          NAME_REF
            IDENT "proname"
          COMMA ","
          WHITESPACE " "
          NAME_REF
            IDENT "pronamespace"
          R_PAREN ")"
        WHITESPACE " "
        R_ANGLE ">"
        WHITESPACE " "
        TUPLE_EXPR
          L_PAREN "("
          LITERAL
            STRING "'abs'"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "0"
          R_PAREN ")"
    WHITESPACE "\n"
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      NAME_REF
        IDENT "proname"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "proargtypes"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "pronamespace"
    WHITESPACE " "
    LIMIT_CLAUSE
      LIMIT_KW "LIMIT"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "proargtypes"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "pronamespace"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        TUPLE_EXPR
          L_PAREN "("
          NAME_REF
            IDENT "proname"
          COMMA ","
          WHITESPACE " "
          NAME_REF
            IDENT "pronamespace"
          R_PAREN ")"
        WHITESPACE " "
        R_ANGLE ">"
        WHITESPACE " "
        TUPLE_EXPR
          L_PAREN "("
          LITERAL
            STRING "'abs'"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "0"
          R_PAREN ")"
    WHITESPACE "\n"
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      NAME_REF
        IDENT "proname"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "proargtypes"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "pronamespace"
    WHITESPACE " "
    LIMIT_CLAUSE
      LIMIT_KW "LIMIT"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Similar to the previous test case, but this time it's a backwards scan"
  WHITESPACE "\n"
  COMMENT "-- using a < RowCompare.  Must use the <= strategy (and not the < strategy)."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "proargtypes"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "pronamespace"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        TUPLE_EXPR
          L_PAREN "("
          NAME_REF
            IDENT "proname"
          COMMA ","
          WHITESPACE " "
          NAME_REF
            IDENT "pronamespace"
          R_PAREN ")"
        WHITESPACE " "
        L_ANGLE "<"
        WHITESPACE " "
        TUPLE_EXPR
          L_PAREN "("
          LITERAL
            STRING "'abs'"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "1_000_000"
          R_PAREN ")"
    WHITESPACE "\n"
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      NAME_REF
        IDENT "proname"
      WHITESPACE " "
      DESC_KW "DESC"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "proargtypes"
      WHITESPACE " "
      DESC_KW "DESC"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "pronamespace"
      WHITESPACE " "
      DESC_KW "DESC"
    WHITESPACE " "
    LIMIT_CLAUSE
      LIMIT_KW "LIMIT"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "proargtypes"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "pronamespace"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        TUPLE_EXPR
          L_PAREN "("
          NAME_REF
            IDENT "proname"
          COMMA ","
          WHITESPACE " "
          NAME_REF
            IDENT "pronamespace"
          R_PAREN ")"
        WHITESPACE " "
        L_ANGLE "<"
        WHITESPACE " "
        TUPLE_EXPR
          L_PAREN "("
          LITERAL
            STRING "'abs'"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "1_000_000"
          R_PAREN ")"
    WHITESPACE "\n"
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      NAME_REF
        IDENT "proname"
      WHITESPACE " "
      DESC_KW "DESC"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "proargtypes"
      WHITESPACE " "
      DESC_KW "DESC"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "pronamespace"
      WHITESPACE " "
      DESC_KW "DESC"
    WHITESPACE " "
    LIMIT_CLAUSE
      LIMIT_KW "LIMIT"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Add coverage for RowCompare quals whose rhs row has a NULL that ends scan"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "proargtypes"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "pronamespace"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          NAME_REF
            IDENT "proname"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          LITERAL
            STRING "'abs'"
        WHITESPACE " "
        AND_KW "AND"
        WHITESPACE " "
        BIN_EXPR
          TUPLE_EXPR
            L_PAREN "("
            NAME_REF
              IDENT "proname"
            COMMA ","
            WHITESPACE " "
            NAME_REF
              IDENT "proargtypes"
            R_PAREN ")"
          WHITESPACE " "
          L_ANGLE "<"
          WHITESPACE " "
          TUPLE_EXPR
            L_PAREN "("
            LITERAL
              STRING "'abs'"
            COMMA ","
            WHITESPACE " "
            LITERAL
              NULL_KW "NULL"
            R_PAREN ")"
    WHITESPACE "\n"
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      NAME_REF
        IDENT "proname"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "proargtypes"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "pronamespace"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "proargtypes"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "pronamespace"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          NAME_REF
            IDENT "proname"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          LITERAL
            STRING "'abs'"
        WHITESPACE " "
        AND_KW "AND"
        WHITESPACE " "
        BIN_EXPR
          TUPLE_EXPR
            L_PAREN "("
            NAME_REF
              IDENT "proname"
            COMMA ","
            WHITESPACE " "
            NAME_REF
              IDENT "proargtypes"
            R_PAREN ")"
          WHITESPACE " "
          L_ANGLE "<"
          WHITESPACE " "
          TUPLE_EXPR
            L_PAREN "("
            LITERAL
              STRING "'abs'"
            COMMA ","
            WHITESPACE " "
            LITERAL
              NULL_KW "NULL"
            R_PAREN ")"
    WHITESPACE "\n"
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      NAME_REF
        IDENT "proname"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "proargtypes"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "pronamespace"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Add coverage for backwards scan RowCompare quals whose rhs row has a NULL"
  WHITESPACE "\n"
  COMMENT "-- that ends scan"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "proargtypes"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "pronamespace"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          NAME_REF
            IDENT "proname"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          LITERAL
            STRING "'abs'"
        WHITESPACE " "
        AND_KW "AND"
        WHITESPACE " "
        BIN_EXPR
          TUPLE_EXPR
            L_PAREN "("
            NAME_REF
              IDENT "proname"
            COMMA ","
            WHITESPACE " "
            NAME_REF
              IDENT "proargtypes"
            R_PAREN ")"
          WHITESPACE " "
          R_ANGLE ">"
          WHITESPACE " "
          TUPLE_EXPR
            L_PAREN "("
            LITERAL
              STRING "'abs'"
            COMMA ","
            WHITESPACE " "
            LITERAL
              NULL_KW "NULL"
            R_PAREN ")"
    WHITESPACE "\n"
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      NAME_REF
        IDENT "proname"
      WHITESPACE " "
      DESC_KW "DESC"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "proargtypes"
      WHITESPACE " "
      DESC_KW "DESC"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "pronamespace"
      WHITESPACE " "
      DESC_KW "DESC"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "proargtypes"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "pronamespace"
    WHITESPACE "\n   "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE "\n   "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          NAME_REF
            IDENT "proname"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          LITERAL
            STRING "'abs'"
        WHITESPACE " "
        AND_KW "AND"
        WHITESPACE " "
        BIN_EXPR
          TUPLE_EXPR
            L_PAREN "("
            NAME_REF
              IDENT "proname"
            COMMA ","
            WHITESPACE " "
            NAME_REF
              IDENT "proargtypes"
            R_PAREN ")"
          WHITESPACE " "
          R_ANGLE ">"
          WHITESPACE " "
          TUPLE_EXPR
            L_PAREN "("
            LITERAL
              STRING "'abs'"
            COMMA ","
            WHITESPACE " "
            LITERAL
              NULL_KW "NULL"
            R_PAREN ")"
    WHITESPACE "\n"
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      NAME_REF
        IDENT "proname"
      WHITESPACE " "
      DESC_KW "DESC"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "proargtypes"
      WHITESPACE " "
      DESC_KW "DESC"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "pronamespace"
      WHITESPACE " "
      DESC_KW "DESC"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Add coverage for recheck of > key following array advancement on previous"
  WHITESPACE "\n"
  COMMENT "-- (left sibling) page that used a high key whose attribute value corresponding"
  WHITESPACE "\n"
  COMMENT "-- to the > key was -inf (due to being truncated when the high key was created)."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- XXX This relies on the assumption that tenk1_thous_tenthous has a truncated"
  WHITESPACE "\n"
  COMMENT "-- high key \"(183, -inf)\" on the first page that we'll scan.  The test will only"
  WHITESPACE "\n"
  COMMENT "-- provide useful coverage when the default 8K BLCKSZ is in use."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "thousand"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "tenthous"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          NAME_REF
            IDENT "thousand"
          WHITESPACE " "
          IN_KW "IN"
          WHITESPACE " "
          TUPLE_EXPR
            L_PAREN "("
            LITERAL
              INT_NUMBER "182"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "183"
            R_PAREN ")"
        WHITESPACE " "
        AND_KW "AND"
        WHITESPACE " "
        BIN_EXPR
          NAME_REF
            IDENT "tenthous"
          WHITESPACE " "
          R_ANGLE ">"
          WHITESPACE " "
          LITERAL
            INT_NUMBER "7550"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "thousand"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "tenthous"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          NAME_REF
            IDENT "thousand"
          WHITESPACE " "
          IN_KW "IN"
          WHITESPACE " "
          TUPLE_EXPR
            L_PAREN "("
            LITERAL
              INT_NUMBER "182"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "183"
            R_PAREN ")"
        WHITESPACE " "
        AND_KW "AND"
        WHITESPACE " "
        BIN_EXPR
          NAME_REF
            IDENT "tenthous"
          WHITESPACE " "
          R_ANGLE ">"
          WHITESPACE " "
          LITERAL
            INT_NUMBER "7550"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Add coverage for optimization of backwards scan index descents"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Here we expect _bt_search to descend straight to a leaf page containing a"
  WHITESPACE "\n"
  COMMENT "-- non-pivot tuple with the value '47', which comes last (after 11 similar"
  WHITESPACE "\n"
  COMMENT "-- non-pivot tuples).  Query execution should only need to visit a single"
  WHITESPACE "\n"
  COMMENT "-- leaf page here."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test case relies on tenk1_hundred index having a leaf page whose high key"
  WHITESPACE "\n"
  COMMENT "-- is '(48, -inf)'.  We use a low cardinality index to make our test case less"
  WHITESPACE "\n"
  COMMENT "-- sensitive to implementation details that may change in the future."
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "enable_seqscan"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    LITERAL
      FALSE_KW "false"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "enable_indexscan"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    LITERAL
      TRUE_KW "true"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "enable_bitmapscan"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    LITERAL
      FALSE_KW "false"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "hundred"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "twenty"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "hundred"
        WHITESPACE " "
        L_ANGLE "<"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "48"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "hundred"
      WHITESPACE " "
      DESC_KW "desc"
    WHITESPACE " "
    LIMIT_CLAUSE
      LIMIT_KW "limit"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "hundred"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "twenty"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "hundred"
        WHITESPACE " "
        L_ANGLE "<"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "48"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "hundred"
      WHITESPACE " "
      DESC_KW "desc"
    WHITESPACE " "
    LIMIT_CLAUSE
      LIMIT_KW "limit"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- This variant of the query need only return a single tuple located to the immediate"
  WHITESPACE "\n"
  COMMENT "-- right of the '(48, -inf)' high key.  It also only needs to scan one single"
  WHITESPACE "\n"
  COMMENT "-- leaf page (the right sibling of the page scanned by the last test case):"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "hundred"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "twenty"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "hundred"
        WHITESPACE " "
        LTEQ "<="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "48"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "hundred"
      WHITESPACE " "
      DESC_KW "desc"
    WHITESPACE " "
    LIMIT_CLAUSE
      LIMIT_KW "limit"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "hundred"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "twenty"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "hundred"
        WHITESPACE " "
        LTEQ "<="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "48"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "hundred"
      WHITESPACE " "
      DESC_KW "desc"
    WHITESPACE " "
    LIMIT_CLAUSE
      LIMIT_KW "limit"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Add coverage for ScalarArrayOp btree quals with pivot tuple constants"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      DISTINCT_CLAUSE
        DISTINCT_KW "distinct"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "hundred"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "hundred"
        WHITESPACE " "
        IN_KW "in"
        WHITESPACE " "
        TUPLE_EXPR
          L_PAREN "("
          LITERAL
            INT_NUMBER "47"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "48"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "72"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "82"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      DISTINCT_CLAUSE
        DISTINCT_KW "distinct"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "hundred"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "hundred"
        WHITESPACE " "
        IN_KW "in"
        WHITESPACE " "
        TUPLE_EXPR
          L_PAREN "("
          LITERAL
            INT_NUMBER "47"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "48"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "72"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "82"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      DISTINCT_CLAUSE
        DISTINCT_KW "distinct"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "hundred"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "hundred"
        WHITESPACE " "
        IN_KW "in"
        WHITESPACE " "
        TUPLE_EXPR
          L_PAREN "("
          LITERAL
            INT_NUMBER "47"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "48"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "72"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "82"
          R_PAREN ")"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "hundred"
      WHITESPACE " "
      DESC_KW "desc"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      DISTINCT_CLAUSE
        DISTINCT_KW "distinct"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "hundred"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "hundred"
        WHITESPACE " "
        IN_KW "in"
        WHITESPACE " "
        TUPLE_EXPR
          L_PAREN "("
          LITERAL
            INT_NUMBER "47"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "48"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "72"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "82"
          R_PAREN ")"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "hundred"
      WHITESPACE " "
      DESC_KW "desc"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "thousand"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          NAME_REF
            IDENT "thousand"
          WHITESPACE " "
          IN_KW "in"
          WHITESPACE " "
          TUPLE_EXPR
            L_PAREN "("
            LITERAL
              INT_NUMBER "364"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "366"
            COMMA ","
            LITERAL
              INT_NUMBER "380"
            R_PAREN ")"
        WHITESPACE " "
        AND_KW "and"
        WHITESPACE " "
        BIN_EXPR
          NAME_REF
            IDENT "tenthous"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "200000"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "thousand"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          NAME_REF
            IDENT "thousand"
          WHITESPACE " "
          IN_KW "in"
          WHITESPACE " "
          TUPLE_EXPR
            L_PAREN "("
            LITERAL
              INT_NUMBER "364"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "366"
            COMMA ","
            LITERAL
              INT_NUMBER "380"
            R_PAREN ")"
        WHITESPACE " "
        AND_KW "and"
        WHITESPACE " "
        BIN_EXPR
          NAME_REF
            IDENT "tenthous"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "200000"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Check correct optimization of LIKE (special index operator support)"
  WHITESPACE "\n"
  COMMENT "-- for both indexscan and bitmapscan cases"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "enable_seqscan"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    LITERAL
      FALSE_KW "false"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "enable_indexscan"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    LITERAL
      TRUE_KW "true"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "enable_bitmapscan"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    LITERAL
      FALSE_KW "false"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "proname"
        WHITESPACE " "
        LIKE_KW "like"
        WHITESPACE " "
        LITERAL
          ESC_STRING "E'RI\\\\_FKey%del'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "proname"
        WHITESPACE " "
        LIKE_KW "like"
        WHITESPACE " "
        LITERAL
          ESC_STRING "E'RI\\\\_FKey%del'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      NAME_REF
        IDENT "proname"
  WHITESPACE " "
  ERROR
    ILIKE_KW "ilike"
  WHITESPACE " "
  ERROR
    STRING "'00%foo'"
  WHITESPACE " "
  ERROR
    ORDER_KW "order"
  WHITESPACE " "
  ERROR
    BY_KW "by"
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      NAME_REF
        IDENT "proname"
  WHITESPACE " "
  ERROR
    ILIKE_KW "ilike"
  WHITESPACE " "
  ERROR
    STRING "'00%foo'"
  WHITESPACE " "
  ERROR
    ORDER_KW "order"
  WHITESPACE " "
  ERROR
    BY_KW "by"
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      NAME_REF
        IDENT "proname"
  WHITESPACE " "
  ERROR
    ILIKE_KW "ilike"
  WHITESPACE " "
  ERROR
    STRING "'ri%foo'"
  WHITESPACE " "
  ERROR
    ORDER_KW "order"
  WHITESPACE " "
  ERROR
    BY_KW "by"
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "enable_indexscan"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    LITERAL
      FALSE_KW "false"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "enable_bitmapscan"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    LITERAL
      TRUE_KW "true"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "proname"
        WHITESPACE " "
        LIKE_KW "like"
        WHITESPACE " "
        LITERAL
          ESC_STRING "E'RI\\\\_FKey%del'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "proname"
        WHITESPACE " "
        LIKE_KW "like"
        WHITESPACE " "
        LITERAL
          ESC_STRING "E'RI\\\\_FKey%del'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      NAME_REF
        IDENT "proname"
  WHITESPACE " "
  ERROR
    ILIKE_KW "ilike"
  WHITESPACE " "
  ERROR
    STRING "'00%foo'"
  WHITESPACE " "
  ERROR
    ORDER_KW "order"
  WHITESPACE " "
  ERROR
    BY_KW "by"
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      NAME_REF
        IDENT "proname"
  WHITESPACE " "
  ERROR
    ILIKE_KW "ilike"
  WHITESPACE " "
  ERROR
    STRING "'00%foo'"
  WHITESPACE " "
  ERROR
    ORDER_KW "order"
  WHITESPACE " "
  ERROR
    BY_KW "by"
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "proname"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_proc"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      NAME_REF
        IDENT "proname"
  WHITESPACE " "
  ERROR
    ILIKE_KW "ilike"
  WHITESPACE " "
  ERROR
    STRING "'ri%foo'"
  WHITESPACE " "
  ERROR
    ORDER_KW "order"
  WHITESPACE " "
  ERROR
    BY_KW "by"
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "enable_seqscan"
  SEMICOLON ";"
  WHITESPACE "\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "enable_indexscan"
  SEMICOLON ";"
  WHITESPACE "\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "enable_bitmapscan"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Also check LIKE optimization with binary-compatible cases"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TEMP_KW "temp"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "btree_bpchar"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "f1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
        WHITESPACE " "
        COLLATE
          COLLATE_KW "collate"
          WHITESPACE " "
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "\"C\""
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "create"
    WHITESPACE " "
    INDEX_KW "index"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_bpchar"
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "f1"
      WHITESPACE " "
      IDENT "bpchar_ops"
      R_PAREN ")"
    WHITESPACE " "
    CONSTRAINT_STORAGE_PARAMS
      WITH_KW "WITH"
      WHITESPACE " "
      L_PAREN "("
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "deduplicate_items"
      EQ "="
      ON_KW "on"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_bpchar"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'foo'"
      R_PAREN ")"
      COMMA ","
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'fool'"
      R_PAREN ")"
      COMMA ","
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'bar'"
      R_PAREN ")"
      COMMA ","
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'quux'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- doesn't match index:"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "btree_bpchar"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "f1"
        WHITESPACE " "
        LIKE_KW "like"
        WHITESPACE " "
        LITERAL
          STRING "'foo'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "btree_bpchar"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "f1"
        WHITESPACE " "
        LIKE_KW "like"
        WHITESPACE " "
        LITERAL
          STRING "'foo'"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "btree_bpchar"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "f1"
        WHITESPACE " "
        LIKE_KW "like"
        WHITESPACE " "
        LITERAL
          STRING "'foo%'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "btree_bpchar"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "f1"
        WHITESPACE " "
        LIKE_KW "like"
        WHITESPACE " "
        LITERAL
          STRING "'foo%'"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- these do match the index:"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "btree_bpchar"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        CAST_EXPR
          NAME_REF
            IDENT "f1"
          COLON2 "::"
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  IDENT "bpchar"
        WHITESPACE " "
        LIKE_KW "like"
        WHITESPACE " "
        LITERAL
          STRING "'foo'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "btree_bpchar"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        CAST_EXPR
          NAME_REF
            IDENT "f1"
          COLON2 "::"
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  IDENT "bpchar"
        WHITESPACE " "
        LIKE_KW "like"
        WHITESPACE " "
        LITERAL
          STRING "'foo'"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "btree_bpchar"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        CAST_EXPR
          NAME_REF
            IDENT "f1"
          COLON2 "::"
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  IDENT "bpchar"
        WHITESPACE " "
        LIKE_KW "like"
        WHITESPACE " "
        LITERAL
          STRING "'foo%'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "btree_bpchar"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        CAST_EXPR
          NAME_REF
            IDENT "f1"
          COLON2 "::"
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  IDENT "bpchar"
        WHITESPACE " "
        LIKE_KW "like"
        WHITESPACE " "
        LITERAL
          STRING "'foo%'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- get test coverage for \"single value\" deduplication strategy:"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_bpchar"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "select"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            LITERAL
              STRING "'foo'"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "from"
        WHITESPACE " "
        CALL_EXPR
          NAME_REF
            IDENT "generate_series"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            LITERAL
              INT_NUMBER "1500"
            R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    COMMENT "--"
    WHITESPACE "\n"
    COMMENT "-- Perform unique checking, with and without the use of deduplication"
    WHITESPACE "\n"
    COMMENT "--"
    WHITESPACE "\n"
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dedup_unique_test_table"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    CONSTRAINT_STORAGE_PARAMS
      WITH_KW "WITH"
      WHITESPACE " "
      L_PAREN "("
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "autovacuum_enabled"
      EQ "="
      LITERAL
        FALSE_KW "false"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    UNIQUE_KW "UNIQUE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "dedup_unique"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dedup_unique_test_table"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "a"
      R_PAREN ")"
    WHITESPACE " "
    CONSTRAINT_STORAGE_PARAMS
      WITH_KW "WITH"
      WHITESPACE " "
      L_PAREN "("
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "deduplicate_items"
      EQ "="
      ON_KW "on"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    UNIQUE_KW "UNIQUE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "plain_unique"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dedup_unique_test_table"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "a"
      R_PAREN ")"
    WHITESPACE " "
    CONSTRAINT_STORAGE_PARAMS
      WITH_KW "WITH"
      WHITESPACE " "
      L_PAREN "("
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "deduplicate_items"
      EQ "="
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              OFF_KW "off"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- Generate enough garbage tuples in index to ensure that even the unique index"
  WHITESPACE "\n"
  COMMENT "-- with deduplication enabled has to check multiple leaf pages during unique"
  WHITESPACE "\n"
  COMMENT "-- checking (at least with a BLCKSZ of 8192 or less)"
  WHITESPACE "\n"
  DO_STMT
    DO_KW "DO"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\nBEGIN\n    FOR r IN 1..1350 LOOP\n        DELETE FROM dedup_unique_test_table;\n        INSERT INTO dedup_unique_test_table SELECT 1;\n    END LOOP;\nEND$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Exercise the LP_DEAD-bit-set tuple deletion code with a posting list tuple."
  WHITESPACE "\n"
  COMMENT "-- The implementation prefers deleting existing items to merging any duplicate"
  WHITESPACE "\n"
  COMMENT "-- tuples into a posting list, so we need an explicit test to make sure we get"
  WHITESPACE "\n"
  COMMENT "-- coverage (note that this test also assumes BLCKSZ is 8192 or less):"
  WHITESPACE "\n"
  DROP_INDEX_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "plain_unique"
  SEMICOLON ";"
  WHITESPACE "\n"
  DELETE_STMT
    DELETE_KW "DELETE"
    WHITESPACE " "
    FROM_KW "FROM"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dedup_unique_test_table"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dedup_unique_test_table"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            NAME_REF
              IDENT "i"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "FROM"
        WHITESPACE " "
        CALL_EXPR
          NAME_REF
            IDENT "generate_series"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "0"
            COMMA ","
            LITERAL
              INT_NUMBER "450"
            R_PAREN ")"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "i"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test B-tree fast path (cache rightmost leaf page) optimization."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_TABLE
    COMMENT "-- First create a tree that's at least three levels deep (i.e. has one level"
    WHITESPACE "\n"
    COMMENT "-- between the root and leaf levels). The text inserted is long.  It won't be"
    WHITESPACE "\n"
    COMMENT "-- TOAST compressed because we use plain storage in the table.  Only a few"
    WHITESPACE "\n"
    COMMENT "-- index tuples fit on each internal page, allowing us to get a tall tree with"
    WHITESPACE "\n"
    COMMENT "-- few pages.  (A tall tree is required to trigger caching.)"
    WHITESPACE "\n"
    COMMENT "--"
    WHITESPACE "\n"
    COMMENT "-- The text column must be the leading column in the index, since suffix"
    WHITESPACE "\n"
    COMMENT "-- truncation would otherwise truncate tuples on internal pages, leaving us"
    WHITESPACE "\n"
    COMMENT "-- with a short tree."
    WHITESPACE "\n"
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "btree_tall_tbl"
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "id"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "int4"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "t"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "alter"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_tall_tbl"
    WHITESPACE " "
    ALTER_COLUMN
      ALTER_KW "alter"
      WHITESPACE " "
      COLUMN_KW "COLUMN"
      WHITESPACE " "
      IDENT "t"
      WHITESPACE " "
      SET_STORAGE
        SET_KW "set"
        WHITESPACE " "
        STORAGE_KW "storage"
        WHITESPACE " "
        IDENT "plain"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "create"
    WHITESPACE " "
    INDEX_KW "index"
    WHITESPACE " "
    NAME
      IDENT "btree_tall_idx"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_tall_tbl"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "t"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "id"
      R_PAREN ")"
    WHITESPACE " "
    CONSTRAINT_STORAGE_PARAMS
      WITH_KW "with"
      WHITESPACE " "
      L_PAREN "("
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "fillfactor"
      WHITESPACE " "
      EQ "="
      WHITESPACE " "
      LITERAL
        INT_NUMBER "10"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_tall_tbl"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "select"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            NAME_REF
              IDENT "g"
          COMMA ","
          WHITESPACE " "
          TARGET
            CALL_EXPR
              NAME_REF
                IDENT "repeat"
              ARG_LIST
                L_PAREN "("
                LITERAL
                  STRING "'x'"
                COMMA ","
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "250"
                R_PAREN ")"
      WHITESPACE "\n"
      FROM_CLAUSE
        FROM_KW "from"
        WHITESPACE " "
        CALL_EXPR
          NAME_REF
            IDENT "generate_series"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "130"
            R_PAREN ")"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "g"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_tall_tbl"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "select"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            NAME_REF
              IDENT "g"
          COMMA ","
          WHITESPACE " "
          TARGET
            LITERAL
              NULL_KW "NULL"
      WHITESPACE "\n"
      FROM_CLAUSE
        FROM_KW "from"
        WHITESPACE " "
        CALL_EXPR
          NAME_REF
            IDENT "generate_series"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "50"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "60"
            R_PAREN ")"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "g"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test for skip scan with type that lacks skip support (text)"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "enable_seqscan"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    LITERAL
      FALSE_KW "false"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "enable_bitmapscan"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    LITERAL
      FALSE_KW "false"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Forwards scan"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "id"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "btree_tall_tbl"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "id"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "55"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "id"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "id"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "btree_tall_tbl"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "id"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "55"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "id"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Backwards scan"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "id"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "btree_tall_tbl"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "id"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "55"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
      WHITESPACE " "
      DESC_KW "DESC"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "id"
      WHITESPACE " "
      DESC_KW "DESC"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "id"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "btree_tall_tbl"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "id"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "55"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
      WHITESPACE " "
      DESC_KW "DESC"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "id"
      WHITESPACE " "
      DESC_KW "DESC"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "enable_seqscan"
  SEMICOLON ";"
  WHITESPACE "\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "enable_bitmapscan"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    COMMENT "--"
    WHITESPACE "\n"
    COMMENT "-- Test for multilevel page deletion"
    WHITESPACE "\n"
    COMMENT "--"
    WHITESPACE "\n"
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "delete_test_table"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                BIGINT_KW "bigint"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                BIGINT_KW "bigint"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                BIGINT_KW "bigint"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "d"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                BIGINT_KW "bigint"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "delete_test_table"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            NAME_REF
              IDENT "i"
          COMMA ","
          WHITESPACE " "
          TARGET
            LITERAL
              INT_NUMBER "1"
          COMMA ","
          WHITESPACE " "
          TARGET
            LITERAL
              INT_NUMBER "2"
          COMMA ","
          WHITESPACE " "
          TARGET
            LITERAL
              INT_NUMBER "3"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "FROM"
        WHITESPACE " "
        CALL_EXPR
          NAME_REF
            IDENT "generate_series"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            LITERAL
              INT_NUMBER "80000"
            R_PAREN ")"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "i"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "ALTER"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "delete_test_table"
    WHITESPACE " "
    ADD_CONSTRAINT
      ADD_KW "ADD"
      WHITESPACE " "
      PRIMARY_KEY_CONSTRAINT
        PRIMARY_KW "PRIMARY"
        WHITESPACE " "
        KEY_KW "KEY"
        WHITESPACE " "
        COLUMN_LIST
          L_PAREN "("
          COLUMN
            NAME_REF
              IDENT "a"
          COMMA ","
          COLUMN
            NAME_REF
              IDENT "b"
          COMMA ","
          COLUMN
            NAME_REF
              IDENT "c"
          COMMA ","
          COLUMN
            NAME_REF
              IDENT "d"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- Delete most entries, and vacuum, deleting internal pages and creating \"fast"
  WHITESPACE "\n"
  COMMENT "-- root\""
  WHITESPACE "\n"
  DELETE_STMT
    DELETE_KW "DELETE"
    WHITESPACE " "
    FROM_KW "FROM"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "delete_test_table"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        L_ANGLE "<"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "79990"
  SEMICOLON ";"
  WHITESPACE "\n"
  VACUUM_STMT
    VACUUM_KW "VACUUM"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "delete_test_table"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test B-tree insertion with a metapage update (XLOG_BTREE_INSERT_META"
  WHITESPACE "\n"
  COMMENT "-- WAL record type). This happens when a \"fast root\" page is split.  This"
  WHITESPACE "\n"
  COMMENT "-- also creates coverage for nbtree FSM page recycling."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- The vacuum above should've turned the leaf page into a fast root. We just"
  WHITESPACE "\n"
  COMMENT "-- need to insert some rows to cause the fast root page to split."
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "delete_test_table"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            NAME_REF
              IDENT "i"
          COMMA ","
          WHITESPACE " "
          TARGET
            LITERAL
              INT_NUMBER "1"
          COMMA ","
          WHITESPACE " "
          TARGET
            LITERAL
              INT_NUMBER "2"
          COMMA ","
          WHITESPACE " "
          TARGET
            LITERAL
              INT_NUMBER "3"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "FROM"
        WHITESPACE " "
        CALL_EXPR
          NAME_REF
            IDENT "generate_series"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            LITERAL
              INT_NUMBER "1000"
            R_PAREN ")"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "i"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test unsupported btree opclass parameters"
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "create"
    WHITESPACE " "
    INDEX_KW "index"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_tall_tbl"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "id"
      WHITESPACE " "
      IDENT "int4_ops"
      L_PAREN "("
      NAME
        IDENT "foo"
      EQ "="
      LITERAL
        INT_NUMBER "1"
      R_PAREN ")"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    COMMENT "-- test parallel build with immutable function."
    WHITESPACE "\n"
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "btree_test_expr"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "n"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "btree_test_func"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        SQL_KW "sql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "IMMUTABLE"
      WHITESPACE " "
      RETURN_FUNC_OPTION
        RETURN_KW "RETURN"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "0"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "BEGIN"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "SET"
    WHITESPACE " "
    LOCAL_KW "LOCAL"
    WHITESPACE " "
    NAME_REF
      IDENT "min_parallel_table_scan_size"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      INT_NUMBER "0"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "SET"
    WHITESPACE " "
    LOCAL_KW "LOCAL"
    WHITESPACE " "
    NAME_REF
      IDENT "max_parallel_maintenance_workers"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      INT_NUMBER "4"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "btree_test_expr_idx"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_test_expr"
    WHITESPACE " "
    USING_KW "USING"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      CALL_EXPR
        NAME_REF
          IDENT "btree_test_func"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMIT_STMT
    COMMIT_KW "COMMIT"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_TABLE
    DROP_KW "DROP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_test_expr"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_test_func"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test case of ALTER INDEX with abuse of column names for indexes."
  WHITESPACE "\n"
  COMMENT "-- This grammar is not officially supported, but the parser allows it."
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "btree_tall_idx2"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_tall_tbl"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "id"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_INDEX_STMT
    ALTER_KW "ALTER"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_tall_idx2"
    WHITESPACE " "
    ALTER_KW "ALTER"
    WHITESPACE " "
    COLUMN_KW "COLUMN"
  WHITESPACE " "
  ERROR
    IDENT "id"
  WHITESPACE " "
  SET_STMT
    SET_KW "SET"
  WHITESPACE " "
  ERROR
    L_PAREN "("
  ERROR
    IDENT "n_distinct"
  ERROR
    EQ "="
  ERROR
    INT_NUMBER "100"
  ERROR
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_INDEX_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_tall_idx2"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    COMMENT "-- Partitioned index"
    WHITESPACE "\n"
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "btree_part"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "id"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "int4"
      R_PAREN ")"
    WHITESPACE " "
    PARTITION_KW "PARTITION"
    WHITESPACE " "
    BY_KW "BY"
    WHITESPACE " "
    RANGE_KW "RANGE"
    WHITESPACE " "
    L_PAREN "("
    NAME_REF
      IDENT "id"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "btree_part_idx"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_part"
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "id"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_INDEX_STMT
    ALTER_KW "ALTER"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_part_idx"
    WHITESPACE " "
    ALTER_KW "ALTER"
    WHITESPACE " "
    COLUMN_KW "COLUMN"
  WHITESPACE " "
  ERROR
    IDENT "id"
  WHITESPACE " "
  SET_STMT
    SET_KW "SET"
  WHITESPACE " "
  ERROR
    L_PAREN "("
  ERROR
    IDENT "n_distinct"
  ERROR
    EQ "="
  ERROR
    INT_NUMBER "100"
  ERROR
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_TABLE
    DROP_KW "DROP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "btree_part"
  SEMICOLON ";"
  WHITESPACE "\n"
---
ERROR@349: expected string literal
ERROR@349: expected SEMICOLON
ERROR@350: expected command, found COLON
ERROR@351: expected command, found STRING
ERROR@386: expected string literal
ERROR@386: expected SEMICOLON
ERROR@387: expected command, found COLON
ERROR@388: expected command, found STRING
ERROR@422: expected string literal
ERROR@422: expected SEMICOLON
ERROR@423: expected command, found COLON
ERROR@424: expected command, found STRING
ERROR@457: expected string literal
ERROR@457: expected SEMICOLON
ERROR@458: expected command, found COLON
ERROR@459: expected command, found STRING
ERROR@2258: expected R_PAREN
ERROR@2259: expected command, found OFF_KW
ERROR@2262: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@2262: expected SEMICOLON
ERROR@2262: expected command, found R_PAREN
ERROR@2751: expected R_PAREN
ERROR@2752: expected command, found OFF_KW
ERROR@2755: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@2755: expected SEMICOLON
ERROR@2755: expected command, found R_PAREN
ERROR@3216: expected R_PAREN
ERROR@3217: expected command, found OFF_KW
ERROR@3220: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@3220: expected SEMICOLON
ERROR@3220: expected command, found R_PAREN
ERROR@3681: expected R_PAREN
ERROR@3682: expected command, found OFF_KW
ERROR@3685: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@3685: expected SEMICOLON
ERROR@3685: expected command, found R_PAREN
ERROR@4547: expected R_PAREN
ERROR@4548: expected command, found OFF_KW
ERROR@4551: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@4551: expected SEMICOLON
ERROR@4551: expected command, found R_PAREN
ERROR@5388: expected R_PAREN
ERROR@5389: expected command, found OFF_KW
ERROR@5392: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@5392: expected SEMICOLON
ERROR@5392: expected command, found R_PAREN
ERROR@5817: expected R_PAREN
ERROR@5818: expected command, found OFF_KW
ERROR@5821: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@5821: expected SEMICOLON
ERROR@5821: expected command, found R_PAREN
ERROR@6087: expected R_PAREN
ERROR@6088: expected command, found OFF_KW
ERROR@6091: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@6091: expected SEMICOLON
ERROR@6091: expected command, found R_PAREN
ERROR@6248: expected R_PAREN
ERROR@6249: expected command, found OFF_KW
ERROR@6252: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@6252: expected SEMICOLON
ERROR@6252: expected command, found R_PAREN
ERROR@6453: expected R_PAREN
ERROR@6454: expected command, found OFF_KW
ERROR@6457: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@6457: expected SEMICOLON
ERROR@6457: expected command, found R_PAREN
ERROR@6852: expected R_PAREN
ERROR@6853: expected command, found OFF_KW
ERROR@6856: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@6856: expected SEMICOLON
ERROR@6856: expected command, found R_PAREN
ERROR@7024: expected R_PAREN
ERROR@7025: expected command, found OFF_KW
ERROR@7028: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@7028: expected SEMICOLON
ERROR@7028: expected command, found R_PAREN
ERROR@7071: expected SEMICOLON
ERROR@7072: expected command, found ILIKE_KW
ERROR@7078: expected command, found STRING
ERROR@7087: expected command, found ORDER_KW
ERROR@7093: expected command, found BY_KW
ERROR@7096: expected command, found INT_NUMBER
ERROR@7140: expected SEMICOLON
ERROR@7141: expected command, found ILIKE_KW
ERROR@7147: expected command, found STRING
ERROR@7156: expected command, found ORDER_KW
ERROR@7162: expected command, found BY_KW
ERROR@7165: expected command, found INT_NUMBER
ERROR@7182: expected R_PAREN
ERROR@7183: expected command, found OFF_KW
ERROR@7186: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@7186: expected SEMICOLON
ERROR@7186: expected command, found R_PAREN
ERROR@7229: expected SEMICOLON
ERROR@7230: expected command, found ILIKE_KW
ERROR@7236: expected command, found STRING
ERROR@7245: expected command, found ORDER_KW
ERROR@7251: expected command, found BY_KW
ERROR@7254: expected command, found INT_NUMBER
ERROR@7334: expected R_PAREN
ERROR@7335: expected command, found OFF_KW
ERROR@7338: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@7338: expected SEMICOLON
ERROR@7338: expected command, found R_PAREN
ERROR@7506: expected R_PAREN
ERROR@7507: expected command, found OFF_KW
ERROR@7510: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@7510: expected SEMICOLON
ERROR@7510: expected command, found R_PAREN
ERROR@7553: expected SEMICOLON
ERROR@7554: expected command, found ILIKE_KW
ERROR@7560: expected command, found STRING
ERROR@7569: expected command, found ORDER_KW
ERROR@7575: expected command, found BY_KW
ERROR@7578: expected command, found INT_NUMBER
ERROR@7622: expected SEMICOLON
ERROR@7623: expected command, found ILIKE_KW
ERROR@7629: expected command, found STRING
ERROR@7638: expected command, found ORDER_KW
ERROR@7644: expected command, found BY_KW
ERROR@7647: expected command, found INT_NUMBER
ERROR@7664: expected R_PAREN
ERROR@7665: expected command, found OFF_KW
ERROR@7668: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@7668: expected SEMICOLON
ERROR@7668: expected command, found R_PAREN
ERROR@7711: expected SEMICOLON
ERROR@7712: expected command, found ILIKE_KW
ERROR@7718: expected command, found STRING
ERROR@7727: expected command, found ORDER_KW
ERROR@7733: expected command, found BY_KW
ERROR@7736: expected command, found INT_NUMBER
ERROR@8109: expected R_PAREN
ERROR@8110: expected command, found OFF_KW
ERROR@8113: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@8113: expected SEMICOLON
ERROR@8113: expected command, found R_PAREN
ERROR@8225: expected R_PAREN
ERROR@8226: expected command, found OFF_KW
ERROR@8229: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@8229: expected SEMICOLON
ERROR@8229: expected command, found R_PAREN
ERROR@8372: expected R_PAREN
ERROR@8373: expected command, found OFF_KW
ERROR@8376: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@8376: expected SEMICOLON
ERROR@8376: expected command, found R_PAREN
ERROR@8504: expected R_PAREN
ERROR@8505: expected command, found OFF_KW
ERROR@8508: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@8508: expected SEMICOLON
ERROR@8508: expected command, found R_PAREN
ERROR@11113: expected R_PAREN
ERROR@11114: expected command, found OFF_KW
ERROR@11117: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@11117: expected SEMICOLON
ERROR@11117: expected command, found R_PAREN
ERROR@11282: expected R_PAREN
ERROR@11283: expected command, found OFF_KW
ERROR@11286: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@11286: expected SEMICOLON
ERROR@11286: expected command, found R_PAREN
ERROR@13005: expected numeric literal
ERROR@13005: expected SET_KW
ERROR@13005: expected STATISTICS_KW
ERROR@13005: expected numeric literal
ERROR@13005: expected SEMICOLON
ERROR@13006: expected command, found IDENT
ERROR@13012: expected name
ERROR@13012: expected EQ
ERROR@13012: expected config value, got L_PAREN
ERROR@13012: expected SEMICOLON
ERROR@13013: expected command, found L_PAREN
ERROR@13014: expected command, found IDENT
ERROR@13024: expected command, found EQ
ERROR@13025: expected command, found INT_NUMBER
ERROR@13028: expected command, found R_PAREN
ERROR@13225: expected numeric literal
ERROR@13225: expected SET_KW
ERROR@13225: expected STATISTICS_KW
ERROR@13225: expected numeric literal
ERROR@13225: expected SEMICOLON
ERROR@13226: expected command, found IDENT
ERROR@13232: expected name
ERROR@13232: expected EQ
ERROR@13232: expected config value, got L_PAREN
ERROR@13232: expected SEMICOLON
ERROR@13233: expected command, found L_PAREN
ERROR@13234: expected command, found IDENT
ERROR@13244: expected command, found EQ
ERROR@13245: expected command, found INT_NUMBER
ERROR@13248: expected command, found R_PAREN
