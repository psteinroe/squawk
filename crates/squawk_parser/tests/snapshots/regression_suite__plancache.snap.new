---
source: crates/squawk_parser/tests/regression_suite.rs
assertion_line: 87
input_file: crates/squawk_parser/tests/data/regression_suite/plancache.sql
---
SOURCE_FILE
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Tests to exercise the plan caching/invalidation mechanism"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_TABLE_AS_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TEMP_KW "TEMP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pcachetest"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            STAR "*"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "FROM"
        WHITESPACE " "
        NAME_REF
          IDENT "int8_tbl"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- create and use a cached plan"
  WHITESPACE "\n"
  PREPARE_STMT
    PREPARE_KW "PREPARE"
    WHITESPACE " "
    NAME
      IDENT "prepstmt"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            STAR "*"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "FROM"
        WHITESPACE " "
        NAME_REF
          IDENT "pcachetest"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXECUTE_STMT
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    NAME_REF
      IDENT "prepstmt"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- and one with parameters"
  WHITESPACE "\n"
  PREPARE_STMT
    PREPARE_KW "PREPARE"
    WHITESPACE " "
    NAME
      IDENT "prepstmt2"
    L_PAREN "("
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            BIGINT_KW "bigint"
    R_PAREN ")"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            STAR "*"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "FROM"
        WHITESPACE " "
        NAME_REF
          IDENT "pcachetest"
      WHITESPACE " "
      WHERE_CLAUSE
        WHERE_KW "WHERE"
        WHITESPACE " "
        BIN_EXPR
          NAME_REF
            IDENT "q1"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          LITERAL
            PARAM "$1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXECUTE_STMT
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    NAME_REF
      IDENT "prepstmt2"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "123"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- invalidate the plans and see what happens"
  WHITESPACE "\n"
  DROP_TABLE
    DROP_KW "DROP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pcachetest"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXECUTE_STMT
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    NAME_REF
      IDENT "prepstmt"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXECUTE_STMT
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    NAME_REF
      IDENT "prepstmt2"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "123"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- recreate the temp table (this demonstrates that the raw plan is"
  WHITESPACE "\n"
  COMMENT "-- purely textual and doesn't depend on OIDs, for instance)"
  WHITESPACE "\n"
  CREATE_TABLE_AS_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TEMP_KW "TEMP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pcachetest"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            STAR "*"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "FROM"
        WHITESPACE " "
        NAME_REF
          IDENT "int8_tbl"
      WHITESPACE " "
      ORDER_BY_CLAUSE
        ORDER_KW "ORDER"
        WHITESPACE " "
        BY_KW "BY"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "2"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXECUTE_STMT
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    NAME_REF
      IDENT "prepstmt"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXECUTE_STMT
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    NAME_REF
      IDENT "prepstmt2"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "123"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- prepared statements should prevent change in output tupdesc,"
  WHITESPACE "\n"
  COMMENT "-- since clients probably aren't expecting that to change on the fly"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "ALTER"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pcachetest"
    WHITESPACE " "
    ADD_COLUMN
      ADD_KW "ADD"
      WHITESPACE " "
      COLUMN_KW "COLUMN"
      WHITESPACE " "
      NAME_REF
        IDENT "q3"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              BIGINT_KW "bigint"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXECUTE_STMT
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    NAME_REF
      IDENT "prepstmt"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXECUTE_STMT
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    NAME_REF
      IDENT "prepstmt2"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "123"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- but we're nice guys and will let you undo your mistake"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "ALTER"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pcachetest"
    WHITESPACE " "
    DROP_COLUMN
      DROP_KW "DROP"
      WHITESPACE " "
      COLUMN_KW "COLUMN"
      WHITESPACE " "
      NAME_REF
        IDENT "q3"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXECUTE_STMT
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    NAME_REF
      IDENT "prepstmt"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXECUTE_STMT
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    NAME_REF
      IDENT "prepstmt2"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "123"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Try it with a view, which isn't directly used in the resulting plan"
  WHITESPACE "\n"
  COMMENT "-- but should trigger invalidation anyway"
  WHITESPACE "\n"
  CREATE_VIEW_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TEMP_KW "TEMP"
    WHITESPACE " "
    VIEW_KW "VIEW"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pcacheview"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE "\n  "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            STAR "*"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "FROM"
        WHITESPACE " "
        NAME_REF
          IDENT "pcachetest"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  PREPARE_STMT
    PREPARE_KW "PREPARE"
    WHITESPACE " "
    NAME
      IDENT "vprep"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            STAR "*"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "FROM"
        WHITESPACE " "
        NAME_REF
          IDENT "pcacheview"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXECUTE_STMT
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    NAME_REF
      IDENT "vprep"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_VIEW_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    TEMP_KW "TEMP"
    WHITESPACE " "
    VIEW_KW "VIEW"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pcacheview"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE "\n  "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            NAME_REF
              IDENT "q1"
          COMMA ","
          WHITESPACE " "
          TARGET
            BIN_EXPR
              NAME_REF
                IDENT "q2"
              SLASH "/"
              LITERAL
                INT_NUMBER "2"
            WHITESPACE " "
            AS_KW "AS"
            WHITESPACE " "
            NAME
              IDENT "q2"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "FROM"
        WHITESPACE " "
        NAME_REF
          IDENT "pcachetest"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXECUTE_STMT
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    NAME_REF
      IDENT "vprep"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Check basic SPI plan invalidation"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "cache_test"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare total int;\nbegin\n\tcreate temp table t1(f1 int);\n\tinsert into t1 values($1);\n\tinsert into t1 values(11);\n\tinsert into t1 values(12);\n\tinsert into t1 values(13);\n\tselect sum(f1) into total from t1;\n\tdrop table t1;\n\treturn total;\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cache_test"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cache_test"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "2"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cache_test"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "3"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Check invalidation of plpgsql \"simple expression\""
  WHITESPACE "\n\n"
  CREATE_VIEW_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TEMP_KW "temp"
    WHITESPACE " "
    VIEW_KW "view"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "v1"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE "\n  "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "select"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            BIN_EXPR
              LITERAL
                INT_NUMBER "2"
              PLUS "+"
              LITERAL
                INT_NUMBER "2"
            WHITESPACE " "
            AS_KW "as"
            WHITESPACE " "
            NAME
              IDENT "f1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "cache_test_2"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n\treturn f1 from v1;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cache_test_2"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_VIEW_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    TEMP_KW "temp"
    WHITESPACE " "
    VIEW_KW "view"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "v1"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE "\n  "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "select"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            BIN_EXPR
              BIN_EXPR
                LITERAL
                  INT_NUMBER "2"
                PLUS "+"
                LITERAL
                  INT_NUMBER "2"
              PLUS "+"
              LITERAL
                INT_NUMBER "4"
            WHITESPACE " "
            AS_KW "as"
            WHITESPACE " "
            NAME
              IDENT "f1"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cache_test_2"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_VIEW_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    TEMP_KW "temp"
    WHITESPACE " "
    VIEW_KW "view"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "v1"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE "\n  "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "select"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            BIN_EXPR
              BIN_EXPR
                BIN_EXPR
                  LITERAL
                    INT_NUMBER "2"
                  PLUS "+"
                  LITERAL
                    INT_NUMBER "2"
                PLUS "+"
                LITERAL
                  INT_NUMBER "4"
              PLUS "+"
              PAREN_EXPR
                L_PAREN "("
                SELECT
                  SELECT_CLAUSE
                    SELECT_KW "select"
                    WHITESPACE " "
                    TARGET_LIST
                      TARGET
                        CALL_EXPR
                          NAME_REF
                            IDENT "max"
                          ARG_LIST
                            L_PAREN "("
                            NAME_REF
                              IDENT "unique1"
                            R_PAREN ")"
                  WHITESPACE " "
                  FROM_CLAUSE
                    FROM_KW "from"
                    WHITESPACE " "
                    NAME_REF
                      IDENT "tenk1"
                R_PAREN ")"
            WHITESPACE " "
            AS_KW "as"
            WHITESPACE " "
            NAME
              IDENT "f1"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cache_test_2"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--- Check that change of search_path is honored when re-using cached plan"
  WHITESPACE "\n\n"
  CREATE_SCHEMA_STMT
    CREATE_KW "create"
    WHITESPACE " "
    SCHEMA_KW "schema"
    WHITESPACE " "
    NAME
      IDENT "s1"
    WHITESPACE "\n  "
    CREATE_TABLE
      CREATE_KW "create"
      WHITESPACE " "
      TABLE_KW "table"
      WHITESPACE " "
      PATH
        PATH_SEGMENT
          NAME
            IDENT "abc"
      WHITESPACE " "
      TABLE_ARGS
        L_PAREN "("
        COLUMN
          NAME_REF
            IDENT "f1"
          WHITESPACE " "
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INT_KW "int"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_SCHEMA_STMT
    CREATE_KW "create"
    WHITESPACE " "
    SCHEMA_KW "schema"
    WHITESPACE " "
    NAME
      IDENT "s2"
    WHITESPACE "\n  "
    CREATE_TABLE
      CREATE_KW "create"
      WHITESPACE " "
      TABLE_KW "table"
      WHITESPACE " "
      PATH
        PATH_SEGMENT
          NAME
            IDENT "abc"
      WHITESPACE " "
      TABLE_ARGS
        L_PAREN "("
        COLUMN
          NAME_REF
            IDENT "f1"
          WHITESPACE " "
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INT_KW "int"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "s1"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "abc"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      L_PAREN "("
      LITERAL
        INT_NUMBER "123"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "s2"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "abc"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      L_PAREN "("
      LITERAL
        INT_NUMBER "456"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "search_path"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    IDENT "s1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  PREPARE_STMT
    PREPARE_KW "prepare"
    WHITESPACE " "
    NAME
      IDENT "p1"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "select"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            NAME_REF
              IDENT "f1"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "from"
        WHITESPACE " "
        NAME_REF
          IDENT "abc"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "p1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "search_path"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    IDENT "s2"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f1"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "abc"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "p1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ALTER_TABLE
    ALTER_KW "alter"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "s1"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "abc"
    WHITESPACE " "
    ADD_COLUMN
      ADD_KW "add"
      WHITESPACE " "
      COLUMN_KW "column"
      WHITESPACE " "
      NAME_REF
        IDENT "f2"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "float8"
  SEMICOLON ";"
  WHITESPACE "   "
  COMMENT "-- force replan"
  WHITESPACE "\n\n"
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "p1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_SCHEMA_STMT
    DROP_KW "drop"
    WHITESPACE " "
    SCHEMA_KW "schema"
    WHITESPACE " "
    NAME
      IDENT "s1"
    WHITESPACE " "
    CASCADE_KW "cascade"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_SCHEMA_STMT
    DROP_KW "drop"
    WHITESPACE " "
    SCHEMA_KW "schema"
    WHITESPACE " "
    NAME
      IDENT "s2"
    WHITESPACE " "
    CASCADE_KW "cascade"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "search_path"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Check that invalidation deals with regclass constants"
  WHITESPACE "\n\n"
  CREATE_SEQUENCE_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TEMP_KW "temp"
    WHITESPACE " "
    SEQUENCE_KW "sequence"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "seq"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  PREPARE_STMT
    PREPARE_KW "prepare"
    WHITESPACE " "
    NAME
      IDENT "p2"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "select"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            CALL_EXPR
              NAME_REF
                IDENT "nextval"
              ARG_LIST
                L_PAREN "("
                LITERAL
                  STRING "'seq'"
                R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "p2"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_SEQUENCE_STMT
    DROP_KW "drop"
    WHITESPACE " "
    SEQUENCE_KW "sequence"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "seq"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_SEQUENCE_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TEMP_KW "temp"
    WHITESPACE " "
    SEQUENCE_KW "sequence"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "seq"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "p2"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Check DDL via SPI, immediately followed by SPI plan re-use"
  WHITESPACE "\n"
  COMMENT "-- (bug in original coding)"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "cachebug"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare r int;\nbegin\n  drop table if exists temptable cascade;\n  create temp table temptable as select * from generate_series(1,3) as f1;\n  create temp view vv as select * from temptable;\n  for r in select * from vv loop\n    raise notice '%', r;\n  end loop;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cachebug"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cachebug"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    COMMENT "-- Check that addition or removal of any partition is correctly dealt with by"
    WHITESPACE "\n"
    COMMENT "-- default partition table when it is being used in prepared statement."
    WHITESPACE "\n"
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pc_list_parted"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    PARTITION_KW "partition"
    WHITESPACE " "
    BY_KW "by"
    WHITESPACE " "
    IDENT "list"
    L_PAREN "("
    NAME_REF
      IDENT "a"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pc_list_part_null"
    WHITESPACE " "
    PARTITION_KW "partition"
    WHITESPACE " "
    OF_KW "of"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pc_list_parted"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    VALUES_KW "values"
    WHITESPACE " "
    IN_KW "in"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      NULL_KW "null"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pc_list_part_1"
    WHITESPACE " "
    PARTITION_KW "partition"
    WHITESPACE " "
    OF_KW "of"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pc_list_parted"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    VALUES_KW "values"
    WHITESPACE " "
    IN_KW "in"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      INT_NUMBER "1"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pc_list_part_def"
    WHITESPACE " "
    PARTITION_KW "partition"
    WHITESPACE " "
    OF_KW "of"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pc_list_parted"
    WHITESPACE " "
    DEFAULT_KW "default"
  SEMICOLON ";"
  WHITESPACE "\n"
  PREPARE_STMT
    PREPARE_KW "prepare"
    WHITESPACE " "
    NAME
      IDENT "pstmt_def_insert"
    WHITESPACE " "
    L_PAREN "("
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    R_PAREN ")"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE " "
    INSERT_STMT
      INSERT_KW "insert"
      WHITESPACE " "
      INTO_KW "into"
      WHITESPACE " "
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "pc_list_part_def"
      WHITESPACE " "
      SELECT
        VALUES_KW "values"
        L_PAREN "("
        LITERAL
          PARAM "$1"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- should fail"
  WHITESPACE "\n"
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "pstmt_def_insert"
    ARG_LIST
      L_PAREN "("
      LITERAL
        NULL_KW "null"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "pstmt_def_insert"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pc_list_part_2"
    WHITESPACE " "
    PARTITION_KW "partition"
    WHITESPACE " "
    OF_KW "of"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pc_list_parted"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    VALUES_KW "values"
    WHITESPACE " "
    IN_KW "in"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      INT_NUMBER "2"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "pstmt_def_insert"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "2"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "alter"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pc_list_parted"
    WHITESPACE " "
    DETACH_PARTITION
      DETACH_KW "detach"
      WHITESPACE " "
      PARTITION_KW "partition"
      WHITESPACE " "
      NAME_REF
        IDENT "pc_list_part_null"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- should be ok"
  WHITESPACE "\n"
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "pstmt_def_insert"
    ARG_LIST
      L_PAREN "("
      LITERAL
        NULL_KW "null"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_TABLE
    DROP_KW "drop"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pc_list_part_1"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- should be ok"
  WHITESPACE "\n"
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "pstmt_def_insert"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_TABLE
    DROP_KW "drop"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pc_list_parted"
    COMMA ","
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pc_list_part_null"
  SEMICOLON ";"
  WHITESPACE "\n"
  DEALLOCATE_STMT
    DEALLOCATE_KW "deallocate"
    WHITESPACE " "
    NAME
      IDENT "pstmt_def_insert"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test plan_cache_mode"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_mode"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_mode"
    WHITESPACE " "
    COMPOUND_SELECT
      SELECT
        SELECT_CLAUSE
          SELECT_KW "select"
          WHITESPACE " "
          TARGET_LIST
            TARGET
              LITERAL
                INT_NUMBER "1"
        WHITESPACE " "
        FROM_CLAUSE
          FROM_KW "from"
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "generate_series"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "1000"
              R_PAREN ")"
      WHITESPACE " "
      UNION_KW "union"
      WHITESPACE " "
      ALL_KW "all"
      WHITESPACE " "
      SELECT
        SELECT_CLAUSE
          SELECT_KW "select"
          WHITESPACE " "
          TARGET_LIST
            TARGET
              LITERAL
                INT_NUMBER "2"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "create"
    WHITESPACE " "
    INDEX_KW "index"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_mode"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "a"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ANALYZE_STMT
    ANALYZE_KW "analyze"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_mode"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  PREPARE_STMT
    PREPARE_KW "prepare"
    WHITESPACE " "
    NAME
      IDENT "test_mode_pp"
    WHITESPACE " "
    L_PAREN "("
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    R_PAREN ")"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "select"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "from"
        WHITESPACE " "
        NAME_REF
          IDENT "test_mode"
      WHITESPACE " "
      WHERE_CLAUSE
        WHERE_KW "where"
        WHITESPACE " "
        BIN_EXPR
          NAME_REF
            IDENT "a"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          LITERAL
            PARAM "$1"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            NAME_KW "name"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "generic_plans"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "custom_plans"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_prepared_statements"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE "  "
      BIN_EXPR
        NAME_REF
          NAME_KW "name"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'test_mode_pp'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- up to 5 executions, custom plan is used"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plan_cache_mode"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    IDENT "auto"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE " "
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "test_mode_pp"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "2"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            NAME_KW "name"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "generic_plans"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "custom_plans"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_prepared_statements"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE "  "
      BIN_EXPR
        NAME_REF
          NAME_KW "name"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'test_mode_pp'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- force generic plan"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plan_cache_mode"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    IDENT "force_generic_plan"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE " "
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "test_mode_pp"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "2"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            NAME_KW "name"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "generic_plans"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "custom_plans"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_prepared_statements"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE "  "
      BIN_EXPR
        NAME_REF
          NAME_KW "name"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'test_mode_pp'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- get to generic plan by 5 executions"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plan_cache_mode"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    IDENT "auto"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "test_mode_pp"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- 1x"
  WHITESPACE "\n"
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "test_mode_pp"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- 2x"
  WHITESPACE "\n"
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "test_mode_pp"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- 3x"
  WHITESPACE "\n"
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "test_mode_pp"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- 4x"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            NAME_KW "name"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "generic_plans"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "custom_plans"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_prepared_statements"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE "  "
      BIN_EXPR
        NAME_REF
          NAME_KW "name"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'test_mode_pp'"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "test_mode_pp"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- 5x"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            NAME_KW "name"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "generic_plans"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "custom_plans"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_prepared_statements"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE "  "
      BIN_EXPR
        NAME_REF
          NAME_KW "name"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'test_mode_pp'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- we should now get a really bad plan"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE " "
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "test_mode_pp"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "2"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- but we can force a custom plan"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plan_cache_mode"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    IDENT "force_custom_plan"
  SEMICOLON ";"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE " "
  EXECUTE_STMT
    EXECUTE_KW "execute"
    WHITESPACE " "
    NAME_REF
      IDENT "test_mode_pp"
    ARG_LIST
      L_PAREN "("
      LITERAL
        INT_NUMBER "2"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            NAME_KW "name"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "generic_plans"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "custom_plans"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_prepared_statements"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE "  "
      BIN_EXPR
        NAME_REF
          NAME_KW "name"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'test_mode_pp'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_TABLE
    DROP_KW "drop"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_mode"
  SEMICOLON ";"
  WHITESPACE "\n"
---
ERROR@4777: expected R_PAREN
ERROR@4778: expected command, found OFF_KW
ERROR@4781: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@4781: expected SEMICOLON
ERROR@4781: expected command, found R_PAREN
ERROR@4989: expected R_PAREN
ERROR@4990: expected command, found OFF_KW
ERROR@4993: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@4993: expected SEMICOLON
ERROR@4993: expected command, found R_PAREN
ERROR@5601: expected R_PAREN
ERROR@5602: expected command, found OFF_KW
ERROR@5605: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@5605: expected SEMICOLON
ERROR@5605: expected command, found R_PAREN
ERROR@5723: expected R_PAREN
ERROR@5724: expected command, found OFF_KW
ERROR@5727: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@5727: expected SEMICOLON
ERROR@5727: expected command, found R_PAREN
