---
source: crates/squawk_parser/tests/regression_suite.rs
assertion_line: 87
input_file: crates/squawk_parser/tests/data/regression_suite/sysviews.sql
---
SOURCE_FILE
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test assorted system views"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- This test is mainly meant to provide some code coverage for the"
  WHITESPACE "\n"
  COMMENT "-- set-returning functions that underlie certain system views."
  WHITESPACE "\n"
  COMMENT "-- The output of most of these functions is very environment-dependent,"
  WHITESPACE "\n"
  COMMENT "-- so our ability to test with fixed expected output is pretty limited;"
  WHITESPACE "\n"
  COMMENT "-- but even a trivial check of count(*) will exercise the normal code path"
  WHITESPACE "\n"
  COMMENT "-- through the SRF."
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            GTEQ ">="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_available_extension_versions"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            GTEQ ">="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_available_extensions"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- The entire output of pg_backend_memory_contexts is not stable,"
  WHITESPACE "\n"
  COMMENT "-- we test only the existence and basic condition of TopMemoryContext."
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            TYPE_KW "type"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            NAME_KW "name"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "ident"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            LEVEL_KW "level"
        COMMA ","
        WHITESPACE " "
        TARGET
          BIN_EXPR
            NAME_REF
              IDENT "total_bytes"
            WHITESPACE " "
            GTEQ ">="
            WHITESPACE " "
            NAME_REF
              IDENT "free_bytes"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_backend_memory_contexts"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          LEVEL_KW "level"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- We can exercise some MemoryContext type stats functions.  Most of the"
  WHITESPACE "\n"
  COMMENT "-- column values are too platform-dependant to display."
  WHITESPACE "\n\n"
  COMMENT "-- Ensure stats from the bump allocator look sane.  Bump isn't a commonly"
  WHITESPACE "\n"
  COMMENT "-- used context, but it is used in tuplesort.c, so open a cursor to keep"
  WHITESPACE "\n"
  COMMENT "-- the tuplesort alive long enough for us to query the context stats."
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  SEMICOLON ";"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "cur"
    WHITESPACE " "
    CURSOR_KW "cursor"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "select"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            CALL_EXPR
              NAME_REF
                LEFT_KW "left"
              ARG_LIST
                L_PAREN "("
                NAME_REF
                  IDENT "a"
                COMMA ","
                LITERAL
                  INT_NUMBER "10"
                R_PAREN ")"
          COMMA ","
          WHITESPACE " "
          TARGET
            NAME_REF
              IDENT "b"
      WHITESPACE "\n  "
      FROM_CLAUSE
        FROM_KW "from"
        WHITESPACE " "
        PAREN_EXPR
          L_PAREN "("
          SELECT
            VALUES_KW "values"
            L_PAREN "("
            CALL_EXPR
              NAME_REF
                IDENT "repeat"
              ARG_LIST
                L_PAREN "("
                LITERAL
                  STRING "'a'"
                COMMA ","
                WHITESPACE " "
                BIN_EXPR
                  LITERAL
                    INT_NUMBER "512"
                  WHITESPACE " "
                  STAR "*"
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "1024"
                R_PAREN ")"
            COMMA ","
            LITERAL
              INT_NUMBER "1"
            R_PAREN ")"
            COMMA ","
            L_PAREN "("
            CALL_EXPR
              NAME_REF
                IDENT "repeat"
              ARG_LIST
                L_PAREN "("
                LITERAL
                  STRING "'b'"
                COMMA ","
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "512"
                R_PAREN ")"
            COMMA ","
            LITERAL
              INT_NUMBER "2"
            R_PAREN ")"
          R_PAREN ")"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "v"
          COLUMN_LIST
            L_PAREN "("
            COLUMN
              NAME
                IDENT "a"
            COMMA ","
            COLUMN
              NAME
                IDENT "b"
            R_PAREN ")"
      WHITESPACE "\n  "
      ORDER_BY_CLAUSE
        ORDER_KW "order"
        WHITESPACE " "
        BY_KW "by"
        WHITESPACE " "
        FIELD_EXPR
          NAME_REF
            IDENT "v"
          DOT "."
          NAME_REF
            IDENT "a"
        WHITESPACE " "
        DESC_KW "desc"
  SEMICOLON ";"
  WHITESPACE "\n"
  FETCH_STMT
    FETCH_KW "fetch"
    WHITESPACE " "
    LITERAL
      INT_NUMBER "1"
    WHITESPACE " "
    FROM_KW "from"
    WHITESPACE " "
    NAME
      IDENT "cur"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            TYPE_KW "type"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            NAME_KW "name"
        COMMA ","
        WHITESPACE " "
        TARGET
          BIN_EXPR
            NAME_REF
              IDENT "total_bytes"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "total_nblocks"
        COMMA ","
        WHITESPACE " "
        TARGET
          BIN_EXPR
            NAME_REF
              IDENT "free_bytes"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "free_chunks"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_backend_memory_contexts"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          NAME_KW "name"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'Caller tuples'"
  SEMICOLON ";"
  WHITESPACE "\n"
  ROLLBACK_STMT
    ROLLBACK_KW "rollback"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Further sanity checks on pg_backend_memory_contexts.  We expect"
  WHITESPACE "\n"
  COMMENT "-- CacheMemoryContext to have multiple children.  Ensure that's the case."
  WHITESPACE "\n"
  SELECT
    WITH_CLAUSE
      WITH_KW "with"
      WHITESPACE " "
      WITH_TABLE
        NAME
          IDENT "contexts"
        WHITESPACE " "
        AS_KW "as"
        WHITESPACE " "
        L_PAREN "("
        WHITESPACE "\n  "
        SELECT
          SELECT_CLAUSE
            SELECT_KW "select"
            WHITESPACE " "
            TARGET_LIST
              TARGET
                STAR "*"
          WHITESPACE " "
          FROM_CLAUSE
            FROM_KW "from"
            WHITESPACE " "
            NAME_REF
              IDENT "pg_backend_memory_contexts"
        WHITESPACE "\n"
        R_PAREN ")"
    WHITESPACE "\n"
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "1"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "contexts"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "c1"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "contexts"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "c2"
    WHITESPACE "\n"
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          FIELD_EXPR
            NAME_REF
              IDENT "c2"
            DOT "."
            NAME_REF
              NAME_KW "name"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          LITERAL
            STRING "'CacheMemoryContext'"
        WHITESPACE "\n"
        AND_KW "and"
        WHITESPACE " "
        BIN_EXPR
          INDEX_EXPR
            FIELD_EXPR
              NAME_REF
                IDENT "c1"
              DOT "."
              NAME_REF
                PATH_KW "path"
            L_BRACK "["
            FIELD_EXPR
              NAME_REF
                IDENT "c2"
              DOT "."
              NAME_REF
                LEVEL_KW "level"
            R_BRACK "]"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          INDEX_EXPR
            FIELD_EXPR
              NAME_REF
                IDENT "c2"
              DOT "."
              NAME_REF
                PATH_KW "path"
            L_BRACK "["
            FIELD_EXPR
              NAME_REF
                IDENT "c2"
              DOT "."
              NAME_REF
                LEVEL_KW "level"
            R_BRACK "]"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- At introduction, pg_config had 23 entries; it may grow"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "20"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_config"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- We expect no cursors in this test; see also portals.sql"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            EQ "="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_cursors"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            GTEQ ">="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_file_settings"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- There will surely be at least one rule, with no errors."
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
        COMMA ","
        WHITESPACE " "
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
              WHITESPACE " "
              FILTER_CLAUSE
                FILTER_KW "FILTER"
                WHITESPACE " "
                L_PAREN "("
                WHERE_KW "WHERE"
                WHITESPACE " "
                BIN_EXPR
                  NAME_REF
                    ERROR_KW "error"
                  WHITESPACE " "
                  IS_NOT
                    IS_KW "IS"
                    WHITESPACE " "
                    NOT_KW "NOT"
                  WHITESPACE " "
                  LITERAL
                    NULL_KW "NULL"
                R_PAREN ")"
            WHITESPACE " "
            EQ "="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "no_err"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_hba_file_rules"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- There may be no rules, and there should be no errors."
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            GTEQ ">="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
        COMMA ","
        WHITESPACE " "
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
              WHITESPACE " "
              FILTER_CLAUSE
                FILTER_KW "FILTER"
                WHITESPACE " "
                L_PAREN "("
                WHERE_KW "WHERE"
                WHITESPACE " "
                BIN_EXPR
                  NAME_REF
                    ERROR_KW "error"
                  WHITESPACE " "
                  IS_NOT
                    IS_KW "IS"
                    WHITESPACE " "
                    NOT_KW "NOT"
                  WHITESPACE " "
                  LITERAL
                    NULL_KW "NULL"
                R_PAREN ")"
            WHITESPACE " "
            EQ "="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "no_err"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_ident_file_mappings"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- There will surely be at least one active lock"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_locks"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- We expect no prepared statements in this test; see also prepare.sql"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            EQ "="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_prepared_statements"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- See also prepared_xacts.sql"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            GTEQ ">="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_prepared_xacts"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- There will surely be at least one SLRU cache"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_stat_slru"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- There must be only one record"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            EQ "="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "1"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_stat_wal"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- We expect no walreceiver running in this test"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            EQ "="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_stat_wal_receiver"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- This is to record the prevailing planner enable_foo settings during"
  WHITESPACE "\n"
  COMMENT "-- a regression test run."
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            NAME_KW "name"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "setting"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_settings"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          NAME_KW "name"
        WHITESPACE " "
        LIKE_KW "like"
        WHITESPACE " "
        LITERAL
          STRING "'enable%'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- There are always wait event descriptions for various types.  InjectionPoint"
  WHITESPACE "\n"
  COMMENT "-- may be present or absent, depending on history since last postmaster start."
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            TYPE_KW "type"
        COMMA ","
        WHITESPACE " "
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_wait_events"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          TYPE_KW "type"
        WHITESPACE " "
        NEQB "<>"
        WHITESPACE " "
        LITERAL
          STRING "'InjectionPoint'"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        TYPE_KW "type"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          TYPE_KW "type"
        WHITESPACE " "
        COLLATE_KW "COLLATE"
        WHITESPACE " "
        NAME_REF
          IDENT "\"C\""
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test that the pg_timezone_names and pg_timezone_abbrevs views are"
  WHITESPACE "\n"
  COMMENT "-- more-or-less working.  We can't test their contents in any great detail"
  WHITESPACE "\n"
  COMMENT "-- without the outputs changing anytime IANA updates the underlying data,"
  WHITESPACE "\n"
  COMMENT "-- but it seems reasonable to expect at least one entry per major meridian."
  WHITESPACE "\n"
  COMMENT "-- (At the time of writing, the actual counts are around 38 because of"
  WHITESPACE "\n"
  COMMENT "-- zones using fractional GMT offsets, so this is a pretty loose test.)"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                DISTINCT_KW "distinct"
                WHITESPACE " "
                NAME_REF
                  IDENT "utc_offset"
                R_PAREN ")"
            WHITESPACE " "
            GTEQ ">="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "24"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_timezone_names"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                DISTINCT_KW "distinct"
                WHITESPACE " "
                NAME_REF
                  IDENT "utc_offset"
                R_PAREN ")"
            WHITESPACE " "
            GTEQ ">="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "24"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_timezone_abbrevs"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- Let's check the non-default timezone abbreviation sets, too"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "timezone_abbreviations"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'Australia'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                DISTINCT_KW "distinct"
                WHITESPACE " "
                NAME_REF
                  IDENT "utc_offset"
                R_PAREN ")"
            WHITESPACE " "
            GTEQ ">="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "24"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_timezone_abbrevs"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "timezone_abbreviations"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'India'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                DISTINCT_KW "distinct"
                WHITESPACE " "
                NAME_REF
                  IDENT "utc_offset"
                R_PAREN ")"
            WHITESPACE " "
            GTEQ ">="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "24"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_timezone_abbrevs"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- One specific case we can check without much fear of breakage"
  WHITESPACE "\n"
  COMMENT "-- is the historical local-mean-time value used for America/Los_Angeles."
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_timezone_abbrevs"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "abbrev"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'LMT'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "DO"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\nDECLARE\n    bg_writer_pid int;\n    r RECORD;\nBEGIN\n        SELECT pid from pg_stat_activity where backend_type='background writer'\n\t INTO bg_writer_pid;\n\n        select type, name, ident\n        from pg_get_process_memory_contexts(bg_writer_pid, false, 20)\n\t where path = '{1}' into r;\n\tRAISE NOTICE '%', r;\n        select type, name, ident\n        from pg_get_process_memory_contexts(pg_backend_pid(), false, 20)\n\t where path = '{1}' into r;\n\tRAISE NOTICE '%', r;\nEND $$"
  SEMICOLON ";"
  WHITESPACE "\n"
