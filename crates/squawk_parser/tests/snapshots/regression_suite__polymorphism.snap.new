---
source: crates/squawk_parser/tests/regression_suite.rs
assertion_line: 87
input_file: crates/squawk_parser/tests/data/regression_suite/polymorphism.sql
---
SOURCE_FILE
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Tests for polymorphic SQL functions and aggregates based on them."
  WHITESPACE "\n"
  COMMENT "-- Tests for other features related to function-calling have snuck in, too."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyelement"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select x + 1\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "42"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              LITERAL
                FLOAT_NUMBER "4.5"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "point"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "3"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "4"
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail for lack of + operator"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyarray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select array[x + 1, x + 2]\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "42"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              LITERAL
                FLOAT_NUMBER "4.5"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyelement"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select x[1]\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  INT_NUMBER "2"
                COMMA ","
                LITERAL
                  INT_NUMBER "4"
                R_BRACK "]"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  FLOAT_NUMBER "4.5"
                COMMA ","
                WHITESPACE " "
                LITERAL
                  FLOAT_NUMBER "7.7"
                R_BRACK "]"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "stavalues1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_statistic"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail, can't infer element type"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyarray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select x\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  INT_NUMBER "2"
                COMMA ","
                LITERAL
                  INT_NUMBER "4"
                R_BRACK "]"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  FLOAT_NUMBER "4.5"
                COMMA ","
                WHITESPACE " "
                LITERAL
                  FLOAT_NUMBER "7.7"
                R_BRACK "]"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "stavalues1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_statistic"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail, can't infer element type"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- fail, can't infer type:"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyrange"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select array[x + 1, x + 2]\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyrange"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyarray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select array[lower(x), upper(x)]\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "42"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "49"
                  R_PAREN ")"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "float8range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    FLOAT_NUMBER "4.5"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    FLOAT_NUMBER "7.8"
                  R_PAREN ")"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyrange"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblearray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select array[x, y]\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "4"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FLOAT_NUMBER "4.5"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblerange"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "z"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblearray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select array[lower(x), upper(x), y, z]\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "42"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "49"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "11"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  INT_NUMBER "2"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        SMALLINT_KW "smallint"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "float8range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    FLOAT_NUMBER "4.5"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    FLOAT_NUMBER "7.8"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FLOAT_NUMBER "7.8"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  INT_NUMBER "11"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        REAL_KW "real"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "42"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "49"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "11"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FLOAT_NUMBER "4.5"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "fail"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- range type doesn't fit"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblerange"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "z"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblemultirange"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "z"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblearray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select array[lower(x), upper(x), y, z]\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "multirange"
                ARG_LIST
                  L_PAREN "("
                  CALL_EXPR
                    NAME_REF
                      IDENT "int4range"
                    ARG_LIST
                      L_PAREN "("
                      LITERAL
                        INT_NUMBER "42"
                      COMMA ","
                      WHITESPACE " "
                      LITERAL
                        INT_NUMBER "49"
                      R_PAREN ")"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "11"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  INT_NUMBER "2"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        SMALLINT_KW "smallint"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "multirange"
                ARG_LIST
                  L_PAREN "("
                  CALL_EXPR
                    NAME_REF
                      IDENT "float8range"
                    ARG_LIST
                      L_PAREN "("
                      LITERAL
                        FLOAT_NUMBER "4.5"
                      COMMA ","
                      WHITESPACE " "
                      LITERAL
                        FLOAT_NUMBER "7.8"
                      R_PAREN ")"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FLOAT_NUMBER "7.8"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  INT_NUMBER "11"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        REAL_KW "real"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "multirange"
                ARG_LIST
                  L_PAREN "("
                  CALL_EXPR
                    NAME_REF
                      IDENT "int4range"
                    ARG_LIST
                      L_PAREN "("
                      LITERAL
                        INT_NUMBER "42"
                      COMMA ","
                      WHITESPACE " "
                      LITERAL
                        INT_NUMBER "49"
                      R_PAREN ")"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "11"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FLOAT_NUMBER "4.5"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "fail"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- range type doesn't fit"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblemultirange"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "z"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- fail, can't infer type:"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblerange"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select array[x + 1, x + 2]\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblerange"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblearray"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblerange"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select x\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "42"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "49"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  INT_NUMBER "11"
                R_BRACK "]"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "float8range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    FLOAT_NUMBER "4.5"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    FLOAT_NUMBER "7.8"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  INT_NUMBER "7"
                R_BRACK "]"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblerange"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblearray"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- fail, can't infer type:"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblemultirange"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select array[x + 1, x + 2]\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblemultirange"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblearray"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblemultirange"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select x\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "multirange"
                ARG_LIST
                  L_PAREN "("
                  CALL_EXPR
                    NAME_REF
                      IDENT "int4range"
                    ARG_LIST
                      L_PAREN "("
                      LITERAL
                        INT_NUMBER "42"
                      COMMA ","
                      WHITESPACE " "
                      LITERAL
                        INT_NUMBER "49"
                      R_PAREN ")"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  INT_NUMBER "11"
                R_BRACK "]"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "multirange"
                ARG_LIST
                  L_PAREN "("
                  CALL_EXPR
                    NAME_REF
                      IDENT "float8range"
                    ARG_LIST
                      L_PAREN "("
                      LITERAL
                        FLOAT_NUMBER "4.5"
                      COMMA ","
                      WHITESPACE " "
                      LITERAL
                        FLOAT_NUMBER "7.8"
                      R_PAREN ")"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  INT_NUMBER "7"
                R_BRACK "]"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblemultirange"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblearray"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      COMMA ","
      WHITESPACE "\n                      "
      PARAM
        NAME
          IDENT "c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "d"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE "\n                      "
      PARAM
        PARAM_OUT
          OUT_KW "OUT"
        WHITESPACE " "
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "OUT"
        WHITESPACE " "
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblearray"
      R_PAREN ")"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select a || b, array[c, d]\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "y"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "y"
              R_PAREN ")"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "polyf"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "2"
            R_BRACK "]"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "42"
          COMMA ","
          WHITESPACE " "
          LITERAL
            FLOAT_NUMBER "34.5"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "y"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "y"
              R_PAREN ")"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "polyf"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "2"
            R_BRACK "]"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "point"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "2"
              R_PAREN ")"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "point"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "3"
              COMMA ","
              LITERAL
                INT_NUMBER "4"
              R_PAREN ")"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "y"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "y"
              R_PAREN ")"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "polyf"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            STRING "'{1,2}'"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "point"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "2"
              R_PAREN ")"
          COMMA ","
          WHITESPACE " "
          LITERAL
            STRING "'(3,4)'"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "y"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "y"
              R_PAREN ")"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "polyf"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              FLOAT_NUMBER "2.2"
            R_BRACK "]"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "42"
          COMMA ","
          WHITESPACE " "
          LITERAL
            FLOAT_NUMBER "34.5"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      COMMA ","
      WHITESPACE "\n                    "
      PARAM
        NAME
          IDENT "c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "d"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyrange"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anymultirange"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'select multirange($1);'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "1"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "10"
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              LITERAL
                NULL_KW "null"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyrange"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anymultirange"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyelement"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'select lower($1);'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4multirange"
                ARG_LIST
                  L_PAREN "("
                  CALL_EXPR
                    NAME_REF
                      IDENT "int4range"
                    ARG_LIST
                      L_PAREN "("
                      LITERAL
                        INT_NUMBER "1"
                      COMMA ","
                      LITERAL
                        INT_NUMBER "10"
                      R_PAREN ")"
                  COMMA ","
                  WHITESPACE " "
                  CALL_EXPR
                    NAME_REF
                      IDENT "int4range"
                    ARG_LIST
                      L_PAREN "("
                      LITERAL
                        INT_NUMBER "20"
                      COMMA ","
                      LITERAL
                        INT_NUMBER "30"
                      R_PAREN ")"
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              LITERAL
                NULL_KW "null"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anymultirange"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatiblerange"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblemultirange"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'select multirange($1);'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "1"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "10"
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              LITERAL
                NULL_KW "null"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatiblerange"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anymultirange"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyrange"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'select range_merge($1);'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4multirange"
                ARG_LIST
                  L_PAREN "("
                  CALL_EXPR
                    NAME_REF
                      IDENT "int4range"
                    ARG_LIST
                      L_PAREN "("
                      LITERAL
                        INT_NUMBER "1"
                      COMMA ","
                      LITERAL
                        INT_NUMBER "10"
                      R_PAREN ")"
                  COMMA ","
                  WHITESPACE " "
                  CALL_EXPR
                    NAME_REF
                      IDENT "int4range"
                    ARG_LIST
                      L_PAREN "("
                      LITERAL
                        INT_NUMBER "20"
                      COMMA ","
                      LITERAL
                        INT_NUMBER "30"
                      R_PAREN ")"
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              LITERAL
                NULL_KW "null"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anymultirange"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatiblemultirange"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblerange"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'select range_merge($1);'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4multirange"
                ARG_LIST
                  L_PAREN "("
                  CALL_EXPR
                    NAME_REF
                      IDENT "int4range"
                    ARG_LIST
                      L_PAREN "("
                      LITERAL
                        INT_NUMBER "1"
                      COMMA ","
                      LITERAL
                        INT_NUMBER "10"
                      R_PAREN ")"
                  COMMA ","
                  WHITESPACE " "
                  CALL_EXPR
                    NAME_REF
                      IDENT "int4range"
                    ARG_LIST
                      L_PAREN "("
                      LITERAL
                        INT_NUMBER "20"
                      COMMA ","
                      LITERAL
                        INT_NUMBER "30"
                      R_PAREN ")"
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              LITERAL
                NULL_KW "null"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatiblemultirange"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatiblemultirange"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatible"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'select lower($1);'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4multirange"
                ARG_LIST
                  L_PAREN "("
                  CALL_EXPR
                    NAME_REF
                      IDENT "int4range"
                    ARG_LIST
                      L_PAREN "("
                      LITERAL
                        INT_NUMBER "1"
                      COMMA ","
                      LITERAL
                        INT_NUMBER "10"
                      R_PAREN ")"
                  COMMA ","
                  WHITESPACE " "
                  CALL_EXPR
                    NAME_REF
                      IDENT "int4range"
                    ARG_LIST
                      L_PAREN "("
                      LITERAL
                        INT_NUMBER "20"
                      COMMA ","
                      LITERAL
                        INT_NUMBER "30"
                      R_PAREN ")"
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "polyf"
            ARG_LIST
              L_PAREN "("
              LITERAL
                NULL_KW "null"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "polyf"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatiblemultirange"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Polymorphic aggregate tests"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Legend:"
  WHITESPACE "\n"
  COMMENT "-----------"
  WHITESPACE "\n"
  COMMENT "-- A = type is ANY"
  WHITESPACE "\n"
  COMMENT "-- P = type is polymorphic"
  WHITESPACE "\n"
  COMMENT "-- N = type is non-polymorphic"
  WHITESPACE "\n"
  COMMENT "-- B = aggregate base type"
  WHITESPACE "\n"
  COMMENT "-- S = aggregate state type"
  WHITESPACE "\n"
  COMMENT "-- R = aggregate return type"
  WHITESPACE "\n"
  COMMENT "-- 1 = arg1 of a function"
  WHITESPACE "\n"
  COMMENT "-- 2 = arg2 of a function"
  WHITESPACE "\n"
  COMMENT "-- ag = aggregate"
  WHITESPACE "\n"
  COMMENT "-- tf = trans (state) function"
  WHITESPACE "\n"
  COMMENT "-- ff = final function"
  WHITESPACE "\n"
  COMMENT "-- rt = return type of a function"
  WHITESPACE "\n"
  COMMENT "-- -> = implies"
  WHITESPACE "\n"
  COMMENT "-- => = allowed"
  WHITESPACE "\n"
  COMMENT "-- !> = not allowed"
  WHITESPACE "\n"
  COMMENT "-- E  = exists"
  WHITESPACE "\n"
  COMMENT "-- NE = not-exists"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Possible states:"
  WHITESPACE "\n"
  COMMENT "-- ----------------"
  WHITESPACE "\n"
  COMMENT "-- B = (A || P || N)"
  WHITESPACE "\n"
  COMMENT "--   when (B = A) -> (tf2 = NE)"
  WHITESPACE "\n"
  COMMENT "-- S = (P || N)"
  WHITESPACE "\n"
  COMMENT "-- ff = (E || NE)"
  WHITESPACE "\n"
  COMMENT "-- tf1 = (P || N)"
  WHITESPACE "\n"
  COMMENT "-- tf2 = (NE || P || N)"
  WHITESPACE "\n"
  COMMENT "-- R = (P || N)"
  WHITESPACE "\n\n"
  COMMENT "-- create functions for use as tf and ff with the needed combinations of"
  WHITESPACE "\n"
  COMMENT "-- argument polymorphism, but within the constraints of valid aggregate"
  WHITESPACE "\n"
  COMMENT "-- functions, i.e. tf arg1 and tf return type must match"
  WHITESPACE "\n\n"
  COMMENT "-- polymorphic single arg transfn"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stfp"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyarray"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyarray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE "\n"
        LITERAL
          STRING "'select $1'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        SQL_KW "SQL"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- non-polymorphic single arg transfn"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stfnp"
    PARAM_LIST
      L_PAREN "("
      PARAM
        ARRAY_TYPE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INT_KW "int"
          L_BRACK "["
          R_BRACK "]"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      ARRAY_TYPE
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        L_BRACK "["
        R_BRACK "]"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE "\n"
        LITERAL
          STRING "'select $1'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        SQL_KW "SQL"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- dual polymorphic transfn"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tfp"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyarray"
      COMMA ","
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyarray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE "\n"
        LITERAL
          STRING "'select $1 || $2'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        SQL_KW "SQL"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- dual non-polymorphic transfn"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tfnp"
    PARAM_LIST
      L_PAREN "("
      PARAM
        ARRAY_TYPE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INT_KW "int"
          L_BRACK "["
          R_BRACK "]"
      COMMA ","
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      ARRAY_TYPE
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        L_BRACK "["
        R_BRACK "]"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE "\n"
        LITERAL
          STRING "'select $1 || $2'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        SQL_KW "SQL"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- arg1 only polymorphic transfn"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tf1p"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyarray"
      COMMA ","
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyarray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE "\n"
        LITERAL
          STRING "'select $1'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        SQL_KW "SQL"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- arg2 only polymorphic transfn"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tf2p"
    PARAM_LIST
      L_PAREN "("
      PARAM
        ARRAY_TYPE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INT_KW "int"
          L_BRACK "["
          R_BRACK "]"
      COMMA ","
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      ARRAY_TYPE
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        L_BRACK "["
        R_BRACK "]"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE "\n"
        LITERAL
          STRING "'select $1'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        SQL_KW "SQL"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- multi-arg polymorphic"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "sum3"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      COMMA ","
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      COMMA ","
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyelement"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE "\n"
        LITERAL
          STRING "'select $1+$2+$3'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "strict"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- finalfn polymorphic"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "ffp"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyarray"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyarray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE "\n"
        LITERAL
          STRING "'select $1'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        SQL_KW "SQL"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- finalfn non-polymorphic"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "ffnp"
    PARAM_LIST
      L_PAREN "("
      PARAM
        ARRAY_TYPE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INT_KW "int"
          L_BRACK "["
          R_BRACK "]"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      ARRAY_TYPE
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        L_BRACK "["
        R_BRACK "]"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE "\n"
        LITERAL
          STRING "'select $1'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        SQL_KW "SQL"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Try to cover all the possible states:"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Note: in Cases 1 & 2, we are trying to return P. Therefore, if the transfn"
  WHITESPACE "\n"
  COMMENT "-- is stfnp, tfnp, or tf2p, we must use ffp as finalfn, because stfnp, tfnp,"
  WHITESPACE "\n"
  COMMENT "-- and tf2p do not return P. Conversely, in Cases 3 & 4, we are trying to"
  WHITESPACE "\n"
  COMMENT "-- return N. Therefore, if the transfn is stfp, tfp, or tf1p, we must use ffnp"
  WHITESPACE "\n"
  COMMENT "-- as finalfn, because stfp, tfp, and tf1p do not return N."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "--     Case1 (R = P) && (B = A)"
  WHITESPACE "\n"
  COMMENT "--     ------------------------"
  WHITESPACE "\n"
  COMMENT "--     S    tf1"
  WHITESPACE "\n"
  COMMENT "--     -------"
  WHITESPACE "\n"
  COMMENT "--     N    N"
  WHITESPACE "\n"
  COMMENT "-- should CREATE"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp01a"
    PARAM_LIST
      L_PAREN "("
      STAR "*"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "stfnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "int4"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--     P    N"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: stfnp(anyarray) not matched by stfnp(int[])"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp02a"
    PARAM_LIST
      L_PAREN "("
      STAR "*"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "stfnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--     N    P"
  WHITESPACE "\n"
  COMMENT "-- should CREATE"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp03a"
    PARAM_LIST
      L_PAREN "("
      STAR "*"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "stfp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "int4"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp03b"
    PARAM_LIST
      L_PAREN "("
      STAR "*"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "stfp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "int4"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--     P    P"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: we have no way to resolve S"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp04a"
    PARAM_LIST
      L_PAREN "("
      STAR "*"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "stfp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp04b"
    PARAM_LIST
      L_PAREN "("
      STAR "*"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "stfp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "--    Case2 (R = P) && ((B = P) || (B = N))"
  WHITESPACE "\n"
  COMMENT "--    -------------------------------------"
  WHITESPACE "\n"
  COMMENT "--    S    tf1      B    tf2"
  WHITESPACE "\n"
  COMMENT "--    -----------------------"
  WHITESPACE "\n"
  COMMENT "--    N    N        N    N"
  WHITESPACE "\n"
  COMMENT "-- should CREATE"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp05a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    N    N        N    P"
  WHITESPACE "\n"
  COMMENT "-- should CREATE"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp06a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf2p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    N    N        P    N"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tfnp(int[], anyelement) not matched by tfnp(int[], int)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp07a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    N    N        P    P"
  WHITESPACE "\n"
  COMMENT "-- should CREATE"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp08a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf2p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    N    P        N    N"
  WHITESPACE "\n"
  COMMENT "-- should CREATE"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp09a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf1p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp09b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf1p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    N    P        N    P"
  WHITESPACE "\n"
  COMMENT "-- should CREATE"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp10a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp10b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    N    P        P    N"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tf1p(int[],anyelement) not matched by tf1p(anyarray,int)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp11a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf1p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp11b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf1p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    N    P        P    P"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tfp(int[],anyelement) not matched by tfp(anyarray,anyelement)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp12a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp12b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    N        N    N"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tfnp(anyarray, int) not matched by tfnp(int[],int)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp13a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    N        N    P"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tf2p(anyarray, int) not matched by tf2p(int[],anyelement)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp14a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf2p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    N        P    N"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tfnp(anyarray, anyelement) not matched by tfnp(int[],int)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp15a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfnp"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    N        P    P"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tf2p(anyarray, anyelement) not matched by tf2p(int[],anyelement)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp16a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf2p"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    P        N    N"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: we have no way to resolve S"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp17a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf1p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp17b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf1p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    P        N    P"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tfp(anyarray, int) not matched by tfp(anyarray, anyelement)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp18a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp18b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    P        P    N"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tf1p(anyarray, anyelement) not matched by tf1p(anyarray, int)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp19a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf1p"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp19b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf1p"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    P        P    P"
  WHITESPACE "\n"
  COMMENT "-- should CREATE"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp20a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfp"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggp20b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfp"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--     Case3 (R = N) && (B = A)"
  WHITESPACE "\n"
  COMMENT "--     ------------------------"
  WHITESPACE "\n"
  COMMENT "--     S    tf1"
  WHITESPACE "\n"
  COMMENT "--     -------"
  WHITESPACE "\n"
  COMMENT "--     N    N"
  WHITESPACE "\n"
  COMMENT "-- should CREATE"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn01a"
    PARAM_LIST
      L_PAREN "("
      STAR "*"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "stfnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "int4"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn01b"
    PARAM_LIST
      L_PAREN "("
      STAR "*"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "stfnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "int4"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--     P    N"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: stfnp(anyarray) not matched by stfnp(int[])"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn02a"
    PARAM_LIST
      L_PAREN "("
      STAR "*"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "stfnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn02b"
    PARAM_LIST
      L_PAREN "("
      STAR "*"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "stfnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--     N    P"
  WHITESPACE "\n"
  COMMENT "-- should CREATE"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn03a"
    PARAM_LIST
      L_PAREN "("
      STAR "*"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "stfp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "int4"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--     P    P"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: ffnp(anyarray) not matched by ffnp(int[])"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn04a"
    PARAM_LIST
      L_PAREN "("
      STAR "*"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "stfp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "--    Case4 (R = N) && ((B = P) || (B = N))"
  WHITESPACE "\n"
  COMMENT "--    -------------------------------------"
  WHITESPACE "\n"
  COMMENT "--    S    tf1      B    tf2"
  WHITESPACE "\n"
  COMMENT "--    -----------------------"
  WHITESPACE "\n"
  COMMENT "--    N    N        N    N"
  WHITESPACE "\n"
  COMMENT "-- should CREATE"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn05a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn05b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    N    N        N    P"
  WHITESPACE "\n"
  COMMENT "-- should CREATE"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn06a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf2p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn06b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf2p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    N    N        P    N"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tfnp(int[], anyelement) not matched by tfnp(int[], int)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn07a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn07b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    N    N        P    P"
  WHITESPACE "\n"
  COMMENT "-- should CREATE"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn08a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf2p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn08b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf2p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    N    P        N    N"
  WHITESPACE "\n"
  COMMENT "-- should CREATE"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn09a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf1p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    N    P        N    P"
  WHITESPACE "\n"
  COMMENT "-- should CREATE"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn10a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    N    P        P    N"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tf1p(int[],anyelement) not matched by tf1p(anyarray,int)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn11a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf1p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    N    P        P    P"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tfp(int[],anyelement) not matched by tfp(anyarray,anyelement)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn12a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    N        N    N"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tfnp(anyarray, int) not matched by tfnp(int[],int)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn13a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn13b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    N        N    P"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tf2p(anyarray, int) not matched by tf2p(int[],anyelement)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn14a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf2p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn14b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf2p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    N        P    N"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tfnp(anyarray, anyelement) not matched by tfnp(int[],int)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn15a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfnp"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn15b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfnp"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    N        P    P"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tf2p(anyarray, anyelement) not matched by tf2p(int[],anyelement)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn16a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf2p"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn16b"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf2p"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    P        N    N"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: ffnp(anyarray) not matched by ffnp(int[])"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn17a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf1p"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    P        N    P"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tfp(anyarray, int) not matched by tfp(anyarray, anyelement)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn18a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    P        P    N"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: tf1p(anyarray, anyelement) not matched by tf1p(anyarray, int)"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn19a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tf1p"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--    P    P        P    P"
  WHITESPACE "\n"
  COMMENT "-- should ERROR: ffnp(anyarray) not matched by ffnp(int[])"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myaggn20a"
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "tfp"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ffnp"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- multi-arg polymorphic"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "mysum2"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      COMMA ","
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "sum3"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyelement"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "INITCOND"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'0'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    COMMENT "-- create test data for polymorphic aggregates"
    WHITESPACE "\n"
    CREATE_KW "create"
    WHITESPACE " "
    TEMP_KW "temp"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "t"
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "f1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "f2"
        WHITESPACE " "
        ARRAY_TYPE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INT_KW "int"
          L_BRACK "["
          R_BRACK "]"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "f3"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "t"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      COMMA ","
      ARRAY_EXPR
        ARRAY_KW "array"
        L_BRACK "["
        LITERAL
          INT_NUMBER "1"
        R_BRACK "]"
      COMMA ","
      LITERAL
        STRING "'a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "t"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      COMMA ","
      ARRAY_EXPR
        ARRAY_KW "array"
        L_BRACK "["
        LITERAL
          INT_NUMBER "11"
        R_BRACK "]"
      COMMA ","
      LITERAL
        STRING "'b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "t"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      COMMA ","
      ARRAY_EXPR
        ARRAY_KW "array"
        L_BRACK "["
        LITERAL
          INT_NUMBER "111"
        R_BRACK "]"
      COMMA ","
      LITERAL
        STRING "'c'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "t"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      L_PAREN "("
      LITERAL
        INT_NUMBER "2"
      COMMA ","
      ARRAY_EXPR
        ARRAY_KW "array"
        L_BRACK "["
        LITERAL
          INT_NUMBER "2"
        R_BRACK "]"
      COMMA ","
      LITERAL
        STRING "'a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "t"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      L_PAREN "("
      LITERAL
        INT_NUMBER "2"
      COMMA ","
      ARRAY_EXPR
        ARRAY_KW "array"
        L_BRACK "["
        LITERAL
          INT_NUMBER "22"
        R_BRACK "]"
      COMMA ","
      LITERAL
        STRING "'b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "t"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      L_PAREN "("
      LITERAL
        INT_NUMBER "2"
      COMMA ","
      ARRAY_EXPR
        ARRAY_KW "array"
        L_BRACK "["
        LITERAL
          INT_NUMBER "222"
        R_BRACK "]"
      COMMA ","
      LITERAL
        STRING "'c'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "t"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      L_PAREN "("
      LITERAL
        INT_NUMBER "3"
      COMMA ","
      ARRAY_EXPR
        ARRAY_KW "array"
        L_BRACK "["
        LITERAL
          INT_NUMBER "3"
        R_BRACK "]"
      COMMA ","
      LITERAL
        STRING "'a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "t"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      L_PAREN "("
      LITERAL
        INT_NUMBER "3"
      COMMA ","
      ARRAY_EXPR
        ARRAY_KW "array"
        L_BRACK "["
        LITERAL
          INT_NUMBER "3"
        R_BRACK "]"
      COMMA ","
      LITERAL
        STRING "'b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test the successfully created polymorphic aggregates"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggp01a"
            ARG_LIST
              L_PAREN "("
              STAR "*"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggp03a"
            ARG_LIST
              L_PAREN "("
              STAR "*"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggp03b"
            ARG_LIST
              L_PAREN "("
              STAR "*"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggp05a"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggp06a"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggp08a"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggp09a"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggp09b"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggp10a"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggp10b"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggp20a"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggp20b"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggn01a"
            ARG_LIST
              L_PAREN "("
              STAR "*"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggn01b"
            ARG_LIST
              L_PAREN "("
              STAR "*"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggn03a"
            ARG_LIST
              L_PAREN "("
              STAR "*"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggn05a"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggn05b"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggn06a"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggn06b"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggn08a"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggn08b"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggn09a"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f3"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myaggn10a"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
    WHITESPACE " "
    GROUP_BY_CLAUSE
      GROUP_KW "group"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "f3"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "mysum2"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "f1"
              COMMA ","
              WHITESPACE " "
              BIN_EXPR
                NAME_REF
                  IDENT "f1"
                WHITESPACE " "
                PLUS "+"
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "t"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test inlining of polymorphic SQL functions"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bleat"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise notice 'bleat %', $1;\n  return $1;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "sql_if"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "bool"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyelement"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nselect case when $1 then $2 else $3 end $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Note this would fail with integer overflow, never mind wrong bleat() output,"
  WHITESPACE "\n"
  COMMENT "-- if the CASE expression were not successfully inlined"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "f1"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "sql_if"
            ARG_LIST
              L_PAREN "("
              BIN_EXPR
                NAME_REF
                  IDENT "f1"
                WHITESPACE " "
                R_ANGLE ">"
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "0"
              COMMA ","
              WHITESPACE " "
              CALL_EXPR
                NAME_REF
                  IDENT "bleat"
                ARG_LIST
                  L_PAREN "("
                  NAME_REF
                    IDENT "f1"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              CALL_EXPR
                NAME_REF
                  IDENT "bleat"
                ARG_LIST
                  L_PAREN "("
                  BIN_EXPR
                    NAME_REF
                      IDENT "f1"
                    WHITESPACE " "
                    PLUS "+"
                    WHITESPACE " "
                    LITERAL
                      INT_NUMBER "1"
                  R_PAREN ")"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "int4_tbl"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "q2"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "sql_if"
            ARG_LIST
              L_PAREN "("
              BIN_EXPR
                NAME_REF
                  IDENT "q2"
                WHITESPACE " "
                R_ANGLE ">"
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "0"
              COMMA ","
              WHITESPACE " "
              NAME_REF
                IDENT "q2"
              COMMA ","
              WHITESPACE " "
              BIN_EXPR
                NAME_REF
                  IDENT "q2"
                WHITESPACE " "
                PLUS "+"
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "int8_tbl"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- another sort of polymorphic aggregate"
  WHITESPACE "\n\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "array_larger_accum"
    WHITESPACE " "
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyarray"
      R_PAREN ")"
    WHITESPACE "\n"
    L_PAREN "("
    WHITESPACE "\n    "
    NAME
      IDENT "sfunc"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "array_larger"
    COMMA ","
    WHITESPACE "\n    "
    NAME
      IDENT "stype"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n    "
    NAME
      IDENT "initcond"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'{}'"
    WHITESPACE "\n"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "array_larger_accum"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "i"
              R_PAREN ")"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      PAREN_EXPR
        L_PAREN "("
        SELECT
          VALUES_KW "VALUES"
          WHITESPACE " "
          L_PAREN "("
          ARRAY_EXPR
            ARRAY_KW "ARRAY"
            L_BRACK "["
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            LITERAL
              INT_NUMBER "2"
            R_BRACK "]"
          R_PAREN ")"
          COMMA ","
          WHITESPACE " "
          L_PAREN "("
          ARRAY_EXPR
            ARRAY_KW "ARRAY"
            L_BRACK "["
            LITERAL
              INT_NUMBER "3"
            COMMA ","
            LITERAL
              INT_NUMBER "4"
            R_BRACK "]"
          R_PAREN ")"
        R_PAREN ")"
      WHITESPACE " "
      ALIAS
        AS_KW "as"
        WHITESPACE " "
        NAME
          IDENT "t"
        COLUMN_LIST
          L_PAREN "("
          COLUMN
            NAME
              IDENT "i"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "array_larger_accum"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "i"
              R_PAREN ")"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      PAREN_EXPR
        L_PAREN "("
        SELECT
          VALUES_KW "VALUES"
          WHITESPACE " "
          L_PAREN "("
          ARRAY_EXPR
            ARRAY_KW "ARRAY"
            L_BRACK "["
            CALL_EXPR
              NAME_REF
                ROW_KW "row"
              ARG_LIST
                L_PAREN "("
                LITERAL
                  INT_NUMBER "1"
                COMMA ","
                LITERAL
                  INT_NUMBER "2"
                R_PAREN ")"
            COMMA ","
            CALL_EXPR
              NAME_REF
                ROW_KW "row"
              ARG_LIST
                L_PAREN "("
                LITERAL
                  INT_NUMBER "3"
                COMMA ","
                LITERAL
                  INT_NUMBER "4"
                R_PAREN ")"
            R_BRACK "]"
          R_PAREN ")"
          COMMA ","
          WHITESPACE " "
          L_PAREN "("
          ARRAY_EXPR
            ARRAY_KW "ARRAY"
            L_BRACK "["
            CALL_EXPR
              NAME_REF
                ROW_KW "row"
              ARG_LIST
                L_PAREN "("
                LITERAL
                  INT_NUMBER "5"
                COMMA ","
                LITERAL
                  INT_NUMBER "6"
                R_PAREN ")"
            COMMA ","
            CALL_EXPR
              NAME_REF
                ROW_KW "row"
              ARG_LIST
                L_PAREN "("
                LITERAL
                  INT_NUMBER "7"
                COMMA ","
                LITERAL
                  INT_NUMBER "8"
                R_PAREN ")"
            R_BRACK "]"
          R_PAREN ")"
        R_PAREN ")"
      WHITESPACE " "
      ALIAS
        AS_KW "as"
        WHITESPACE " "
        NAME
          IDENT "t"
        COLUMN_LIST
          L_PAREN "("
          COLUMN
            NAME
              IDENT "i"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- another kind of polymorphic aggregate"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "add_group"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "grp"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "ad"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "size"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE "\n  "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyarray"
    WHITESPACE "\n  "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  if grp is null then\n    return array[ad];\n  end if;\n  if array_upper(grp, 1) < size then\n    return grp || ad;\n  end if;\n  return grp;\nend;\n$$"
      WHITESPACE "\n  "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "immutable"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "create"
    WHITESPACE " "
    AGGREGATE_KW "aggregate"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "build_group"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    WHITESPACE "\n  "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "add_group"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    WHITESPACE "\n"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "build_group"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "q1"
              COMMA ","
              LITERAL
                INT_NUMBER "3"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "int8_tbl"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- this should fail because stype isn't compatible with arg"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "create"
    WHITESPACE " "
    AGGREGATE_KW "aggregate"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "build_group"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "int8"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    WHITESPACE "\n  "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "add_group"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "int2"
      L_BRACK "["
      R_BRACK "]"
    WHITESPACE "\n"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- but we can make a non-poly agg from a poly sfunc if types are OK"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "create"
    WHITESPACE " "
    AGGREGATE_KW "aggregate"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "build_group"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "int8"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    WHITESPACE "\n  "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "add_group"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "int8"
      L_BRACK "["
      R_BRACK "]"
    WHITESPACE "\n"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- check proper resolution of data types for polymorphic transfn/finalfn"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "first_el_transfn"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyarray"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyarray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE "\n"
        LITERAL
          STRING "'select $1 || $2'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "immutable"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "first_el"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyarray"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyelement"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE "\n"
        LITERAL
          STRING "'select $1[1]'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "strict"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "immutable"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "create"
    WHITESPACE " "
    AGGREGATE_KW "aggregate"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "first_el_agg_f8"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "float8"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    WHITESPACE "\n  "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "array_append"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "float8"
      L_BRACK "["
      R_BRACK "]"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "first_el"
    WHITESPACE "\n"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "create"
    WHITESPACE " "
    AGGREGATE_KW "aggregate"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "first_el_agg_any"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      R_PAREN ")"
    WHITESPACE " "
    L_PAREN "("
    WHITESPACE "\n  "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "first_el_transfn"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "anyarray"
    COMMA ","
    WHITESPACE "\n  "
    NAME
      IDENT "FINALFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "first_el"
    WHITESPACE "\n"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "first_el_agg_f8"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                NAME_REF
                  IDENT "x"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "float8"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "generate_series"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "1"
          COMMA ","
          LITERAL
            INT_NUMBER "10"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "first_el_agg_any"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "generate_series"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "1"
          COMMA ","
          LITERAL
            INT_NUMBER "10"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "first_el_agg_f8"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                NAME_REF
                  IDENT "x"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "float8"
              R_PAREN ")"
            WHITESPACE " "
            OVER_CLAUSE
              OVER_KW "over"
              L_PAREN "("
              WINDOW_DEF
                ORDER_BY_CLAUSE
                  ORDER_KW "order"
                  WHITESPACE " "
                  BY_KW "by"
                  WHITESPACE " "
                  NAME_REF
                    IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "generate_series"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "1"
          COMMA ","
          LITERAL
            INT_NUMBER "10"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "first_el_agg_any"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
            WHITESPACE " "
            OVER_CLAUSE
              OVER_KW "over"
              L_PAREN "("
              WINDOW_DEF
                ORDER_BY_CLAUSE
                  ORDER_KW "order"
                  WHITESPACE " "
                  BY_KW "by"
                  WHITESPACE " "
                  NAME_REF
                    IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "generate_series"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "1"
          COMMA ","
          LITERAL
            INT_NUMBER "10"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- check that we can apply functions taking ANYARRAY to pg_stats"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      DISTINCT_CLAUSE
        DISTINCT_KW "distinct"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "array_ndims"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "histogram_bounds"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_stats"
    WHITESPACE "\n"
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "histogram_bounds"
        WHITESPACE " "
        IS_NOT
          IS_KW "is"
          WHITESPACE " "
          NOT_KW "not"
        WHITESPACE " "
        LITERAL
          NULL_KW "null"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- such functions must protect themselves if varying element type isn't OK"
  WHITESPACE "\n"
  COMMENT "-- (WHERE clause here is to avoid possibly getting a collation error instead)"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "max"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "histogram_bounds"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_stats"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "tablename"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'pg_am'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- another corner case is the input functions for polymorphic pseudotypes"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "array_in"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'{1,2,3}'"
              COMMA ","
              CAST_EXPR
                LITERAL
                  STRING "'int4'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "regtype"
              COMMA ","
              PREFIX_EXPR
                MINUS "-"
                LITERAL
                  INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- this has historically worked"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "array_in"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'{1,2,3}'"
          COMMA ","
          CAST_EXPR
            LITERAL
              STRING "'int4'"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    IDENT "regtype"
          COMMA ","
          PREFIX_EXPR
            MINUS "-"
            LITERAL
              INT_NUMBER "1"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- this not"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "anyrange_in"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'[10,20)'"
              COMMA ","
              CAST_EXPR
                LITERAL
                  STRING "'int4range'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "regtype"
              COMMA ","
              PREFIX_EXPR
                MINUS "-"
                LITERAL
                  INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test variadic polymorphic functions"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myleast"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_VARIADIC
          VARIADIC_KW "variadic"
        WHITESPACE " "
        PATH_TYPE
          IDENT "anyarray"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyelement"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select min($1[i]) from generate_subscripts($1,1) g(i)\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "immutable"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "strict"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myleast"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "10"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "20"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "33"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myleast"
            ARG_LIST
              L_PAREN "("
              LITERAL
                FLOAT_NUMBER "1.1"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FLOAT_NUMBER "0.22"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FLOAT_NUMBER "0.55"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myleast"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'z'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myleast"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  COMMENT "-- test with variadic call parameter"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myleast"
            ARG_LIST
              L_PAREN "("
              VARIADIC_KW "variadic"
              WHITESPACE " "
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  INT_NUMBER "1"
                COMMA ","
                LITERAL
                  INT_NUMBER "2"
                COMMA ","
                LITERAL
                  INT_NUMBER "3"
                COMMA ","
                LITERAL
                  INT_NUMBER "4"
                COMMA ","
                PREFIX_EXPR
                  MINUS "-"
                  LITERAL
                    INT_NUMBER "1"
                R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myleast"
            ARG_LIST
              L_PAREN "("
              VARIADIC_KW "variadic"
              WHITESPACE " "
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  FLOAT_NUMBER "1.1"
                COMMA ","
                WHITESPACE " "
                PREFIX_EXPR
                  MINUS "-"
                  LITERAL
                    FLOAT_NUMBER "5.5"
                R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--test with empty variadic call parameter"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "myleast"
            ARG_LIST
              L_PAREN "("
              VARIADIC_KW "variadic"
              WHITESPACE " "
              CAST_EXPR
                ARRAY_EXPR
                  ARRAY_KW "array"
                  L_BRACK "["
                  R_BRACK "]"
                COLON2 "::"
                ARRAY_TYPE
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          INT_KW "int"
                  L_BRACK "["
                  R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- an example with some ordinary arguments too"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "concat"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_VARIADIC
          VARIADIC_KW "variadic"
        WHITESPACE " "
        PATH_TYPE
          IDENT "anyarray"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select array_to_string($2, $1);\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "immutable"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "strict"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "concat"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'%'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "3"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "4"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "5"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "concat"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'|'"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  STRING "'a'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'b'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'c'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "concat"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'|'"
              COMMA ","
              WHITESPACE " "
              VARIADIC_KW "variadic"
              WHITESPACE " "
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  INT_NUMBER "1"
                COMMA ","
                LITERAL
                  INT_NUMBER "2"
                COMMA ","
                LITERAL
                  INT_NUMBER "33"
                R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "concat"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'|'"
              COMMA ","
              WHITESPACE " "
              VARIADIC_KW "variadic"
              WHITESPACE " "
              CAST_EXPR
                ARRAY_EXPR
                  ARRAY_KW "array"
                  L_BRACK "["
                  R_BRACK "]"
                COLON2 "::"
                ARRAY_TYPE
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          INT_KW "int"
                  L_BRACK "["
                  R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "concat"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anyarray"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- mix variadic with anyelement"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "formarray"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_VARIADIC
          VARIADIC_KW "variadic"
        WHITESPACE " "
        PATH_TYPE
          IDENT "anyarray"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyarray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select array_prepend($1, $2);\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "immutable"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "strict"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "formarray"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              LITERAL
                INT_NUMBER "3"
              COMMA ","
              LITERAL
                INT_NUMBER "4"
              COMMA ","
              LITERAL
                INT_NUMBER "5"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "formarray"
            ARG_LIST
              L_PAREN "("
              LITERAL
                FLOAT_NUMBER "1.1"
              COMMA ","
              WHITESPACE " "
              VARIADIC_KW "variadic"
              WHITESPACE " "
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  FLOAT_NUMBER "1.2"
                COMMA ","
                LITERAL
                  FLOAT_NUMBER "55.5"
                R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "formarray"
            ARG_LIST
              L_PAREN "("
              LITERAL
                FLOAT_NUMBER "1.1"
              COMMA ","
              WHITESPACE " "
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  FLOAT_NUMBER "1.2"
                COMMA ","
                LITERAL
                  FLOAT_NUMBER "55.5"
                R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- fail without variadic"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "formarray"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  STRING "'x'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- fail, type mismatch"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "formarray"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              WHITESPACE " "
              VARIADIC_KW "variadic"
              WHITESPACE " "
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                CAST_EXPR
                  LITERAL
                    STRING "'x'"
                  COLON2 "::"
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
                R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- fail, type mismatch"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "formarray"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_VARIADIC
          VARIADIC_KW "variadic"
        WHITESPACE " "
        PATH_TYPE
          IDENT "anyarray"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test pg_typeof() function"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              LITERAL
                NULL_KW "null"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "           "
  COMMENT "-- unknown"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "0"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "              "
  COMMENT "-- integer"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              LITERAL
                FLOAT_NUMBER "0.0"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "            "
  COMMENT "-- numeric"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              BIN_EXPR
                BIN_EXPR
                  LITERAL
                    INT_NUMBER "1"
                  PLUS "+"
                  LITERAL
                    INT_NUMBER "1"
                WHITESPACE " "
                EQ "="
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "2"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "        "
  COMMENT "-- boolean"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'x'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "            "
  COMMENT "-- unknown"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              BIN_EXPR
                LITERAL
                  STRING "''"
                WHITESPACE " "
                CUSTOM_OP
                  PIPE "|"
                  PIPE "|"
                WHITESPACE " "
                LITERAL
                  STRING "''"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "       "
  COMMENT "-- text"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "pg_typeof"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "0"
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "   "
  COMMENT "-- regtype"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  FLOAT_NUMBER "1.2"
                COMMA ","
                LITERAL
                  FLOAT_NUMBER "55.5"
                R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- numeric[]"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "myleast"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "10"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "1"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "20"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "33"
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- polymorphic input"
  WHITESPACE "\n\n"
  COMMENT "-- test functions with default parameters"
  WHITESPACE "\n\n"
  COMMENT "-- test basic functionality"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "1"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "2"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $1 + $2;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "10"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "10"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "20"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "10"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "20"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "30"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- ok"
  WHITESPACE "\n\n"
  COMMENT "-- fail: defaults must be at end of argument list"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "1"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $1 + $2;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- however, this should work:"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "1"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "sum"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "2"
      R_PAREN ")"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $1 + $2;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- verify it lists properly"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- check implicit coercion"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          DEFAULT_KW "DEFAULT"
          WHITESPACE " "
          LITERAL
            FLOAT_NUMBER "1.0"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          DEFAULT_KW "DEFAULT"
          WHITESPACE " "
          LITERAL
            STRING "'-1'"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $1 + $2;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
        WHITESPACE " "
        PARAM_DEFAULT
          DEFAULT_KW "DEFAULT"
          WHITESPACE " "
          LITERAL
            STRING "'Hello'"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
        WHITESPACE " "
        PARAM_DEFAULT
          DEFAULT_KW "DEFAULT"
          WHITESPACE " "
          LITERAL
            STRING "'World'"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $1 || ', ' || $2;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail: which dfunc should be called? int or text"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'Hi'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- ok"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'Hi'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'City'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- ok"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "0"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- ok"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "10"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "20"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- ok"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "1"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "2"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select 2;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "1"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "2"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "3"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "4"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select 4;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Now, dfunc(nargs = 2) and dfunc(nargs = 4) are ambiguous when called"
  WHITESPACE "\n"
  COMMENT "-- with 0 to 2 arguments."
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "2"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "3"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- ok"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "3"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "4"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- ok"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- default values are not allowed for output parameters"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "20"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select 1;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- polymorphic parameter test"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyelement"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          CAST_EXPR
            LITERAL
              STRING "'World'"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    TEXT_KW "text"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select 'Hello, ' || $1::text;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "0"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "to_date"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    STRING "'20081215'"
                  COMMA ","
                  LITERAL
                    STRING "'YYYYMMDD'"
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'City'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- check defaults for variadics"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PARAM_VARIADIC
          VARIADIC_KW "variadic"
        WHITESPACE " "
        ARRAY_TYPE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INT_KW "int"
          L_BRACK "["
          R_BRACK "]"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE "\n"
        LITERAL
          DOLLAR_QUOTED_STRING "$$ select array_upper($1, 1) $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "10"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "10"
              COMMA ","
              LITERAL
                INT_NUMBER "20"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PARAM_VARIADIC
          VARIADIC_KW "variadic"
        WHITESPACE " "
        ARRAY_TYPE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INT_KW "int"
          L_BRACK "["
          R_BRACK "]"
        WHITESPACE " "
        PARAM_DEFAULT
          DEFAULT_KW "default"
          WHITESPACE " "
          CAST_EXPR
            ARRAY_EXPR
              ARRAY_KW "array"
              L_BRACK "["
              R_BRACK "]"
            COLON2 "::"
            ARRAY_TYPE
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      INT_KW "int"
              L_BRACK "["
              R_BRACK "]"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE "\n"
        LITERAL
          DOLLAR_QUOTED_STRING "$$ select array_upper($1, 1) $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- now ok"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "10"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "10"
              COMMA ","
              LITERAL
                INT_NUMBER "20"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- can't remove the default once it exists"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PARAM_VARIADIC
          VARIADIC_KW "variadic"
        WHITESPACE " "
        ARRAY_TYPE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INT_KW "int"
          L_BRACK "["
          R_BRACK "]"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE "\n"
        LITERAL
          DOLLAR_QUOTED_STRING "$$ select array_upper($1, 1) $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PARAM_VARIADIC
          VARIADIC_KW "variadic"
        WHITESPACE " "
        ARRAY_TYPE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INT_KW "int"
          L_BRACK "["
          R_BRACK "]"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Ambiguity should be reported only if there's not a better match available"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "1"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "2"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "3"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select 3;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "1"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "2"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select 2;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $1;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- dfunc(narg=2) and dfunc(narg=3) are ambiguous"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  COMMENT "-- but this works since the ambiguous functions aren't preferred anyway"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'Hi'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Tests for named- and mixed-notation function calling"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "0"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "d"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "0"
      R_PAREN ")"
    WHITESPACE "\n  "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      TABLE_KW "table"
      WHITESPACE " "
      L_PAREN "("
      NAME_REF
        IDENT "a"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "b"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "c"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "d"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $1, $2, $3, $4;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            PAREN_EXPR
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "dfunc"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "10"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "20"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "30"
                  R_PAREN ")"
              R_PAREN ")"
            DOT "."
            STAR "*"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            PAREN_EXPR
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "dfunc"
                ARG_LIST
                  L_PAREN "("
                  NAMED_ARG
                    NAME_REF
                      IDENT "a"
                    WHITESPACE " "
                    COLONEQ ":="
                    WHITESPACE " "
                    LITERAL
                      INT_NUMBER "10"
                  COMMA ","
                  WHITESPACE " "
                  NAMED_ARG
                    NAME_REF
                      IDENT "b"
                    WHITESPACE " "
                    COLONEQ ":="
                    WHITESPACE " "
                    LITERAL
                      INT_NUMBER "20"
                  COMMA ","
                  WHITESPACE " "
                  NAMED_ARG
                    NAME_REF
                      IDENT "c"
                    WHITESPACE " "
                    COLONEQ ":="
                    WHITESPACE " "
                    LITERAL
                      INT_NUMBER "30"
                  R_PAREN ")"
              R_PAREN ")"
            DOT "."
            STAR "*"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          NAMED_ARG
            NAME_REF
              IDENT "a"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "10"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "b"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "20"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          NAMED_ARG
            NAME_REF
              IDENT "b"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "10"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "a"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "20"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "0"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "1"
          COMMA ","
          LITERAL
            INT_NUMBER "2"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "1"
          COMMA ","
          LITERAL
            INT_NUMBER "2"
          COMMA ","
          NAMED_ARG
            NAME_REF
              IDENT "c"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "3"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "1"
          COMMA ","
          LITERAL
            INT_NUMBER "2"
          COMMA ","
          NAMED_ARG
            NAME_REF
              IDENT "d"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "3"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          NAMED_ARG
            NAME_REF
              IDENT "x"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "20"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "b"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "10"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "x"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "30"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail, duplicate name"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "10"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "b"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "20"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "30"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail, named args must be last"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          NAMED_ARG
            NAME_REF
              IDENT "x"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "10"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "b"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "20"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "c"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "30"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail, unknown param"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "10"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "10"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "a"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "20"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail, a overlaps positional parameter"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "1"
          COMMA ","
          NAMED_ARG
            NAME_REF
              IDENT "c"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "2"
          COMMA ","
          NAMED_ARG
            NAME_REF
              IDENT "d"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "3"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- fail, no value for b"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test with different parameter types"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        CHAR_TYPE
          VARCHAR_KW "varchar"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NUMERIC_KW "numeric"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "date"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          NAME_REF
            CURRENT_DATE_KW "current_date"
      R_PAREN ")"
    WHITESPACE "\n  "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      TABLE_KW "table"
      WHITESPACE " "
      L_PAREN "("
      NAME_REF
        IDENT "a"
      WHITESPACE " "
      CHAR_TYPE
        VARCHAR_KW "varchar"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "b"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              NUMERIC_KW "numeric"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "c"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "date"
      R_PAREN ")"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $1, $2, $3;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            PAREN_EXPR
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "dfunc"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    STRING "'Hello World'"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "20"
                  COMMA ","
                  WHITESPACE " "
                  CAST_EXPR
                    LITERAL
                      STRING "'2009-07-25'"
                    COLON2 "::"
                    PATH_TYPE
                      PATH
                        PATH_SEGMENT
                          NAME_REF
                            IDENT "date"
                  R_PAREN ")"
              R_PAREN ")"
            DOT "."
            STAR "*"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'Hello World'"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "20"
          COMMA ","
          WHITESPACE " "
          CAST_EXPR
            LITERAL
              STRING "'2009-07-25'"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    IDENT "date"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          NAMED_ARG
            NAME_REF
              IDENT "c"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            CAST_EXPR
              LITERAL
                STRING "'2009-07-25'"
              COLON2 "::"
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      IDENT "date"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "a"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              STRING "'Hello World'"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "b"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "20"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'Hello World'"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "b"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "20"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "c"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            CAST_EXPR
              LITERAL
                STRING "'2009-07-25'"
              COLON2 "::"
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      IDENT "date"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'Hello World'"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "c"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            CAST_EXPR
              LITERAL
                STRING "'2009-07-25'"
              COLON2 "::"
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      IDENT "date"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "b"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "20"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'Hello World'"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "c"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "20"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "b"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            CAST_EXPR
              LITERAL
                STRING "'2009-07-25'"
              COLON2 "::"
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      IDENT "date"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        CHAR_TYPE
          VARCHAR_KW "varchar"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NUMERIC_KW "numeric"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "date"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test out parameters with named params"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        CHAR_TYPE
          VARCHAR_KW "varchar"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            STRING "'def a'"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "_a"
        WHITESPACE " "
        CHAR_TYPE
          VARCHAR_KW "varchar"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NUMERIC_KW "numeric"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            NULL_KW "NULL"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "_c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NUMERIC_KW "numeric"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "record"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $1, $2;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            PAREN_EXPR
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "dfunc"
                ARG_LIST
                  L_PAREN "("
                  R_PAREN ")"
              R_PAREN ")"
            DOT "."
            STAR "*"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'Hello'"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "100"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          NAMED_ARG
            NAME_REF
              IDENT "a"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              STRING "'Hello'"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "c"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "100"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          NAMED_ARG
            NAME_REF
              IDENT "c"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "100"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "a"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              STRING "'Hello'"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'Hello'"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'Hello'"
          COMMA ","
          WHITESPACE " "
          NAMED_ARG
            NAME_REF
              IDENT "c"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "100"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "dfunc"
        ARG_LIST
          L_PAREN "("
          NAMED_ARG
            NAME_REF
              IDENT "c"
            WHITESPACE " "
            COLONEQ ":="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "100"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- fail, can no longer change an input parameter's name"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        CHAR_TYPE
          VARCHAR_KW "varchar"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            STRING "'def a'"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "_a"
        WHITESPACE " "
        CHAR_TYPE
          VARCHAR_KW "varchar"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NUMERIC_KW "numeric"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            NULL_KW "NULL"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "_c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NUMERIC_KW "numeric"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "record"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $1, $2;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        CHAR_TYPE
          VARCHAR_KW "varchar"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            STRING "'def a'"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "_a"
        WHITESPACE " "
        CHAR_TYPE
          VARCHAR_KW "varchar"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NUMERIC_KW "numeric"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            NULL_KW "NULL"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "_c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NUMERIC_KW "numeric"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "record"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $1, $2;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        CHAR_TYPE
          VARCHAR_KW "varchar"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NUMERIC_KW "numeric"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--fail, named parameters are not unique"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "testpolym"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$ select 1;$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "testpolym"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$ select 1;$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "testpolym"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_INOUT
          INOUT_KW "inout"
        WHITESPACE " "
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$ select 1;$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "testpolym"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_INOUT
          INOUT_KW "inout"
        WHITESPACE " "
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$ select 1;$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- valid"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "testpolym"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$ select $1;$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "testpolym"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "37"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "testpolym"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "testpolym"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      TABLE_KW "table"
      L_PAREN "("
      NAME_REF
        IDENT "a"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$ select $1;$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "testpolym"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "37"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "testpolym"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test polymorphic params and defaults"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            NULL_KW "null"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "flag"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "bool"
        WHITESPACE " "
        PARAM_DEFAULT
          EQ "="
          WHITESPACE " "
          LITERAL
            TRUE_KW "true"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyelement"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select case when $3 then $1 else $2 end;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "2"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'a'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'b'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- positional notation with default"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "1"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "b"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "2"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                CAST_EXPR
                  LITERAL
                    STRING "'a'"
                  COLON2 "::"
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "b"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                LITERAL
                  STRING "'b'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                CAST_EXPR
                  LITERAL
                    STRING "'a'"
                  COLON2 "::"
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "b"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                LITERAL
                  STRING "'b'"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "flag"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                LITERAL
                  FALSE_KW "false"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- named notation"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "b"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                CAST_EXPR
                  LITERAL
                    STRING "'b'"
                  COLON2 "::"
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                LITERAL
                  STRING "'a'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- named notation with default"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                CAST_EXPR
                  LITERAL
                    STRING "'a'"
                  COLON2 "::"
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "flag"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                LITERAL
                  TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- named notation with default"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                CAST_EXPR
                  LITERAL
                    STRING "'a'"
                  COLON2 "::"
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "flag"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                LITERAL
                  FALSE_KW "false"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- named notation with default"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "b"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                CAST_EXPR
                  LITERAL
                    STRING "'b'"
                  COLON2 "::"
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                LITERAL
                  STRING "'a'"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "flag"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                LITERAL
                  TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- named notation"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'a'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'b'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- full positional notation"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'a'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'b'"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "flag"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                LITERAL
                  FALSE_KW "false"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- mixed notation"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'a'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'b'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- full positional notation"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'a'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'b'"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "flag"
                WHITESPACE " "
                COLONEQ ":="
                WHITESPACE " "
                LITERAL
                  TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- mixed notation"
  WHITESPACE "\n\n"
  COMMENT "-- ansi/sql syntax"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "1"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "b"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "2"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                CAST_EXPR
                  LITERAL
                    STRING "'a'"
                  COLON2 "::"
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "b"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                LITERAL
                  STRING "'b'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                CAST_EXPR
                  LITERAL
                    STRING "'a'"
                  COLON2 "::"
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "b"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                LITERAL
                  STRING "'b'"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "flag"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                LITERAL
                  FALSE_KW "false"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- named notation"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "b"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                CAST_EXPR
                  LITERAL
                    STRING "'b'"
                  COLON2 "::"
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                LITERAL
                  STRING "'a'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- named notation with default"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                CAST_EXPR
                  LITERAL
                    STRING "'a'"
                  COLON2 "::"
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "flag"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                LITERAL
                  TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- named notation with default"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                CAST_EXPR
                  LITERAL
                    STRING "'a'"
                  COLON2 "::"
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "flag"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                LITERAL
                  FALSE_KW "false"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- named notation with default"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "b"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                CAST_EXPR
                  LITERAL
                    STRING "'b'"
                  COLON2 "::"
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                LITERAL
                  STRING "'a'"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "flag"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                LITERAL
                  TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- named notation"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'a'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'b'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- full positional notation"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'a'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'b'"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "flag"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                LITERAL
                  FALSE_KW "false"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- mixed notation"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'a'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'b'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- full positional notation"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'a'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'b'"
              COMMA ","
              WHITESPACE " "
              NAMED_ARG
                NAME_REF
                  IDENT "flag"
                WHITESPACE " "
                FAT_ARROW "=>"
                WHITESPACE " "
                LITERAL
                  TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- mixed notation"
  WHITESPACE "\n\n"
  COMMENT "-- this tests lexer edge cases around =>"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              BIN_EXPR
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                CUSTOM_OP
                  EQ "="
                  R_ANGLE ">"
                  MINUS "-"
                LITERAL
                  INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              BIN_EXPR
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                CUSTOM_OP
                  EQ "="
                  R_ANGLE ">"
                  PLUS "+"
                LITERAL
                  INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                FAT_ARROW "=>"
                COMMENT "/**/"
                LITERAL
                  INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "dfunc"
            ARG_LIST
              L_PAREN "("
              NAMED_ARG
                NAME_REF
                  IDENT "a"
                WHITESPACE " "
                FAT_ARROW "=>"
                COMMENT "--comment to be removed by psql"
                WHITESPACE "\n  "
                LITERAL
                  INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- need DO to protect the -- from psql"
  WHITESPACE "\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\n  declare r integer;\n  begin\n    select dfunc(a=>-- comment\n      1) into r;\n    raise info 'r = %', r;\n  end;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- check reverse-listing of named-arg calls"
  WHITESPACE "\n"
  CREATE_VIEW_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    VIEW_KW "VIEW"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dfview"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE "\n   "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            NAME_REF
              IDENT "q1"
          COMMA ","
          WHITESPACE " "
          TARGET
            NAME_REF
              IDENT "q2"
          COMMA ","
          WHITESPACE "\n     "
          TARGET
            CALL_EXPR
              NAME_REF
                IDENT "dfunc"
              ARG_LIST
                L_PAREN "("
                NAME_REF
                  IDENT "q1"
                COMMA ","
                NAME_REF
                  IDENT "q2"
                COMMA ","
                WHITESPACE " "
                NAMED_ARG
                  NAME_REF
                    IDENT "flag"
                  WHITESPACE " "
                  COLONEQ ":="
                  WHITESPACE " "
                  BIN_EXPR
                    NAME_REF
                      IDENT "q1"
                    R_ANGLE ">"
                    NAME_REF
                      IDENT "q2"
                R_PAREN ")"
            WHITESPACE " "
            AS_KW "as"
            WHITESPACE " "
            NAME
              IDENT "c3"
          COMMA ","
          WHITESPACE "\n     "
          TARGET
            CALL_EXPR
              NAME_REF
                IDENT "dfunc"
              ARG_LIST
                L_PAREN "("
                NAME_REF
                  IDENT "q1"
                COMMA ","
                WHITESPACE " "
                NAMED_ARG
                  NAME_REF
                    IDENT "flag"
                  WHITESPACE " "
                  COLONEQ ":="
                  WHITESPACE " "
                  BIN_EXPR
                    NAME_REF
                      IDENT "q1"
                    L_ANGLE "<"
                    NAME_REF
                      IDENT "q2"
                COMMA ","
                WHITESPACE " "
                NAMED_ARG
                  NAME_REF
                    IDENT "b"
                  WHITESPACE " "
                  COLONEQ ":="
                  WHITESPACE " "
                  NAME_REF
                    IDENT "q2"
                R_PAREN ")"
            WHITESPACE " "
            AS_KW "as"
            WHITESPACE " "
            NAME
              IDENT "c4"
      WHITESPACE "\n     "
      FROM_CLAUSE
        FROM_KW "FROM"
        WHITESPACE " "
        NAME_REF
          IDENT "int8_tbl"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "dfview"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  DROP_VIEW_STMT
    DROP_KW "drop"
    WHITESPACE " "
    VIEW_KW "view"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfview"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "dfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "bool"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Tests for ANYCOMPATIBLE polymorphism family"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatible"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select greatest($1, $2)\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "12"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            FLOAT_NUMBER "12.3"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "point"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "2"
              R_PAREN ")"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'11'"
          COMMA ","
          WHITESPACE " "
          LITERAL
            STRING "'12.3'"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- defaults to text"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblearray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select array[$1, $2]\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "12"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            FLOAT_NUMBER "12.3"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            LITERAL
              INT_NUMBER "2"
            R_BRACK "]"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatiblearray"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblearray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select array[$1] || $2\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "12"
            R_BRACK "]"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              FLOAT_NUMBER "12.3"
            R_BRACK "]"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            FLOAT_NUMBER "12.3"
          COMMA ","
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "13"
            R_BRACK "]"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            FLOAT_NUMBER "12.3"
          COMMA ","
          WHITESPACE " "
          LITERAL
            STRING "'{13,14.4}'"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            CALL_EXPR
              NAME_REF
                IDENT "point"
              ARG_LIST
                L_PAREN "("
                LITERAL
                  INT_NUMBER "1"
                COMMA ","
                LITERAL
                  INT_NUMBER "2"
                R_PAREN ")"
            R_BRACK "]"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "12"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatiblearray"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatiblerange"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblerange"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $2\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "int4range"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "4"
              COMMA ","
              LITERAL
                INT_NUMBER "7"
              R_PAREN ")"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "numrange"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "4"
              COMMA ","
              LITERAL
                INT_NUMBER "7"
              R_PAREN ")"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "12"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            FLOAT_NUMBER "11.2"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "int4range"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "4"
              COMMA ","
              LITERAL
                INT_NUMBER "7"
              R_PAREN ")"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            FLOAT_NUMBER "11.2"
          COMMA ","
          WHITESPACE " "
          LITERAL
            STRING "'[4,7)'"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatiblerange"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatiblerange"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatiblerange"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatible"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select lower($1) + upper($2)\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          CALL_EXPR
            NAME_REF
              IDENT "int4range"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "11"
              COMMA ","
              LITERAL
                INT_NUMBER "12"
              R_PAREN ")"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "int4range"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "4"
              COMMA ","
              LITERAL
                INT_NUMBER "7"
              R_PAREN ")"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          CALL_EXPR
            NAME_REF
              IDENT "int4range"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "11"
              COMMA ","
              LITERAL
                INT_NUMBER "12"
              R_PAREN ")"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "numrange"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "4"
              COMMA ","
              LITERAL
                INT_NUMBER "7"
              R_PAREN ")"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatiblerange"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatiblerange"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- fail, can't infer result type:"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblerange"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $1\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatiblemultirange"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblemultirange"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $2\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "multirange"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "4"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "7"
                  R_PAREN ")"
              R_PAREN ")"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "multirange"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "numrange"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "4"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "7"
                  R_PAREN ")"
              R_PAREN ")"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "12"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            FLOAT_NUMBER "11.2"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "multirange"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "4"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "7"
                  R_PAREN ")"
              R_PAREN ")"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            FLOAT_NUMBER "11.2"
          COMMA ","
          WHITESPACE " "
          LITERAL
            STRING "'{[4,7)}'"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatiblemultirange"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatiblemultirange"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatiblemultirange"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatible"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select lower($1) + upper($2)\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          CALL_EXPR
            NAME_REF
              IDENT "multirange"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "11"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "12"
                  R_PAREN ")"
              R_PAREN ")"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "multirange"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "4"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "7"
                  R_PAREN ")"
              R_PAREN ")"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          CALL_EXPR
            NAME_REF
              IDENT "multirange"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "11"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "12"
                  R_PAREN ")"
              R_PAREN ")"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "multirange"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "numrange"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "4"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "7"
                  R_PAREN ")"
              R_PAREN ")"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatiblemultirange"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatiblemultirange"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- fail, can't infer result type:"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatible"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblemultirange"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $1\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatiblenonarray"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatiblenonarray"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblearray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select array[$1, $2]\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "12"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            FLOAT_NUMBER "12.3"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "11"
            R_BRACK "]"
          COMMA ","
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            LITERAL
              INT_NUMBER "2"
            R_BRACK "]"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatiblenonarray"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "anycompatiblenonarray"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      COMMA ","
      WHITESPACE "\n                         "
      PARAM
        NAME
          IDENT "c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "d"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblearray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select array[c, d]\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "2"
            R_BRACK "]"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "42"
          COMMA ","
          WHITESPACE " "
          LITERAL
            FLOAT_NUMBER "34.5"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "2"
            R_BRACK "]"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "point"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "2"
              R_PAREN ")"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "point"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "3"
              COMMA ","
              LITERAL
                INT_NUMBER "4"
              R_PAREN ")"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            STRING "'{1,2}'"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "point"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "2"
              R_PAREN ")"
          COMMA ","
          WHITESPACE " "
          LITERAL
            STRING "'(3,4)'"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              FLOAT_NUMBER "2.2"
            R_BRACK "]"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "42"
          COMMA ","
          WHITESPACE " "
          LITERAL
            FLOAT_NUMBER "34.5"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      COMMA ","
      WHITESPACE "\n                       "
      PARAM
        NAME
          IDENT "c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "d"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_VARIADIC
          VARIADIC_KW "variadic"
        WHITESPACE " "
        PATH_TYPE
          IDENT "anycompatiblearray"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblearray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  select $1\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "12"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            FLOAT_NUMBER "12.2"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            STRING "'12'"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            STRING "'12.2'"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          VARIADIC_KW "variadic"
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "11"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "12"
            R_BRACK "]"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "anyctest"
        ARG_LIST
          L_PAREN "("
          VARIADIC_KW "variadic"
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "11"
            COMMA ","
            WHITESPACE " "
            LITERAL
              FLOAT_NUMBER "12.2"
            R_BRACK "]"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "anyctest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_VARIADIC
          VARIADIC_KW "variadic"
        WHITESPACE " "
        PATH_TYPE
          IDENT "anycompatiblearray"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
