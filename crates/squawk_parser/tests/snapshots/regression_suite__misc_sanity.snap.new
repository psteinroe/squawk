---
source: crates/squawk_parser/tests/regression_suite.rs
assertion_line: 87
input_file: crates/squawk_parser/tests/data/regression_suite/misc_sanity.sql
---
SOURCE_FILE
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- MISC_SANITY"
  WHITESPACE "\n"
  COMMENT "-- Sanity checks for common errors in making system tables that don't fit"
  WHITESPACE "\n"
  COMMENT "-- comfortably into either opr_sanity or type_sanity."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Every test failure in this file should be closely inspected."
  WHITESPACE "\n"
  COMMENT "-- The description of the failing test should be read carefully before"
  WHITESPACE "\n"
  COMMENT "-- adjusting the expected output.  In most cases, the queries should"
  WHITESPACE "\n"
  COMMENT "-- not find *any* matching entries."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- NB: run this test early, because some later tests create bogus entries."
  WHITESPACE "\n\n\n"
  COMMENT "-- **************** pg_depend ****************"
  WHITESPACE "\n\n"
  COMMENT "-- Look for illegal values in pg_depend fields."
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_depend"
      WHITESPACE " "
      ALIAS
        AS_KW "as"
        WHITESPACE " "
        NAME
          IDENT "d1"
    WHITESPACE "\n"
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          BIN_EXPR
            BIN_EXPR
              BIN_EXPR
                NAME_REF
                  IDENT "refclassid"
                WHITESPACE " "
                EQ "="
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "0"
              WHITESPACE " "
              OR_KW "OR"
              WHITESPACE " "
              BIN_EXPR
                NAME_REF
                  IDENT "refobjid"
                WHITESPACE " "
                EQ "="
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "0"
            WHITESPACE " "
            OR_KW "OR"
            WHITESPACE "\n      "
            BIN_EXPR
              NAME_REF
                IDENT "classid"
              WHITESPACE " "
              EQ "="
              WHITESPACE " "
              LITERAL
                INT_NUMBER "0"
          WHITESPACE " "
          OR_KW "OR"
          WHITESPACE " "
          BIN_EXPR
            NAME_REF
              IDENT "objid"
            WHITESPACE " "
            EQ "="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
        WHITESPACE " "
        OR_KW "OR"
        WHITESPACE "\n      "
        BIN_EXPR
          NAME_REF
            IDENT "deptype"
          WHITESPACE " "
          NOT_IN
            NOT_KW "NOT"
            WHITESPACE " "
            IN_KW "IN"
          WHITESPACE " "
          TUPLE_EXPR
            L_PAREN "("
            LITERAL
              STRING "'a'"
            COMMA ","
            WHITESPACE " "
            LITERAL
              STRING "'e'"
            COMMA ","
            WHITESPACE " "
            LITERAL
              STRING "'i'"
            COMMA ","
            WHITESPACE " "
            LITERAL
              STRING "'n'"
            COMMA ","
            WHITESPACE " "
            LITERAL
              STRING "'x'"
            COMMA ","
            WHITESPACE " "
            LITERAL
              STRING "'P'"
            COMMA ","
            WHITESPACE " "
            LITERAL
              STRING "'S'"
            R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- **************** pg_shdepend ****************"
  WHITESPACE "\n\n"
  COMMENT "-- Look for illegal values in pg_shdepend fields."
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_shdepend"
      WHITESPACE " "
      ALIAS
        AS_KW "as"
        WHITESPACE " "
        NAME
          IDENT "d1"
    WHITESPACE "\n"
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          BIN_EXPR
            BIN_EXPR
              BIN_EXPR
                NAME_REF
                  IDENT "refclassid"
                WHITESPACE " "
                EQ "="
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "0"
              WHITESPACE " "
              OR_KW "OR"
              WHITESPACE " "
              BIN_EXPR
                NAME_REF
                  IDENT "refobjid"
                WHITESPACE " "
                EQ "="
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "0"
            WHITESPACE " "
            OR_KW "OR"
            WHITESPACE "\n      "
            BIN_EXPR
              NAME_REF
                IDENT "classid"
              WHITESPACE " "
              EQ "="
              WHITESPACE " "
              LITERAL
                INT_NUMBER "0"
          WHITESPACE " "
          OR_KW "OR"
          WHITESPACE " "
          BIN_EXPR
            NAME_REF
              IDENT "objid"
            WHITESPACE " "
            EQ "="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
        WHITESPACE " "
        OR_KW "OR"
        WHITESPACE "\n      "
        BIN_EXPR
          NAME_REF
            IDENT "deptype"
          WHITESPACE " "
          NOT_IN
            NOT_KW "NOT"
            WHITESPACE " "
            IN_KW "IN"
          WHITESPACE " "
          TUPLE_EXPR
            L_PAREN "("
            LITERAL
              STRING "'a'"
            COMMA ","
            WHITESPACE " "
            LITERAL
              STRING "'i'"
            COMMA ","
            WHITESPACE " "
            LITERAL
              STRING "'o'"
            COMMA ","
            WHITESPACE " "
            LITERAL
              STRING "'r'"
            COMMA ","
            WHITESPACE " "
            LITERAL
              STRING "'t'"
            R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- **************** pg_class ****************"
  WHITESPACE "\n\n"
  COMMENT "-- Look for system tables with varlena columns but no toast table. All"
  WHITESPACE "\n"
  COMMENT "-- system tables with toastable columns should have toast tables, with"
  WHITESPACE "\n"
  COMMENT "-- the following exceptions:"
  WHITESPACE "\n"
  COMMENT "-- 1. pg_class and pg_attribute, due to fear of recursive dependencies as"
  WHITESPACE "\n"
  COMMENT "-- toast tables depend on them."
  WHITESPACE "\n"
  COMMENT "-- 2. pg_largeobject and pg_largeobject_metadata.  Large object catalogs"
  WHITESPACE "\n"
  COMMENT "-- and toast tables are mutually exclusive and large object data is handled"
  WHITESPACE "\n"
  COMMENT "-- as user data by pg_upgrade, which would cause failures."
  WHITESPACE "\n"
  COMMENT "-- 3. pg_authid, since its toast table cannot be accessed when it would be"
  WHITESPACE "\n"
  COMMENT "-- needed, i.e., during authentication before we've selected a database."
  WHITESPACE "\n"
  COMMENT "-- 4. pg_replication_origin, since we want to be able to access that catalog"
  WHITESPACE "\n"
  COMMENT "-- without setting up a snapshot.  To make that safe, it needs to not have a"
  WHITESPACE "\n"
  COMMENT "-- toast table, since toasted data cannot be fetched without a snapshot.  As of"
  WHITESPACE "\n"
  COMMENT "-- this writing, its only varlena column is roname, which we limit to 512 bytes"
  WHITESPACE "\n"
  COMMENT "-- to avoid needing out-of-line storage."
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "relname"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "attname"
        COMMA ","
        WHITESPACE " "
        TARGET
          CAST_EXPR
            NAME_REF
              IDENT "atttypid"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    IDENT "regtype"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_class"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "c"
      WHITESPACE " "
      JOIN
        JOIN_KW "JOIN"
        WHITESPACE " "
        NAME_REF
          IDENT "pg_attribute"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "a"
        WHITESPACE " "
        ON_KW "ON"
        WHITESPACE " "
        BIN_EXPR
          FIELD_EXPR
            NAME_REF
              IDENT "c"
            DOT "."
            NAME_REF
              IDENT "oid"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          NAME_REF
            IDENT "attrelid"
    WHITESPACE "\n"
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          BIN_EXPR
            BIN_EXPR
              FIELD_EXPR
                NAME_REF
                  IDENT "c"
                DOT "."
                NAME_REF
                  IDENT "oid"
              WHITESPACE " "
              L_ANGLE "<"
              WHITESPACE " "
              LITERAL
                INT_NUMBER "16384"
            WHITESPACE " "
            AND_KW "AND"
            WHITESPACE "\n      "
            BIN_EXPR
              NAME_REF
                IDENT "reltoastrelid"
              WHITESPACE " "
              EQ "="
              WHITESPACE " "
              LITERAL
                INT_NUMBER "0"
          WHITESPACE " "
          AND_KW "AND"
          WHITESPACE "\n      "
          BIN_EXPR
            NAME_REF
              IDENT "relkind"
            WHITESPACE " "
            EQ "="
            WHITESPACE " "
            LITERAL
              STRING "'r'"
        WHITESPACE " "
        AND_KW "AND"
        WHITESPACE "\n      "
        BIN_EXPR
          NAME_REF
            IDENT "attstorage"
          WHITESPACE " "
          NEQ "!="
          WHITESPACE " "
          LITERAL
            STRING "'p'"
    WHITESPACE "\n"
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
      COMMA ","
      WHITESPACE " "
      LITERAL
        INT_NUMBER "2"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- system catalogs without primary keys"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Current exceptions:"
  WHITESPACE "\n"
  COMMENT "-- * pg_depend, pg_shdepend don't have a unique key"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "relname"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_class"
    WHITESPACE "\n"
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          BIN_EXPR
            NAME_REF
              IDENT "relnamespace"
            WHITESPACE " "
            EQ "="
            WHITESPACE " "
            CAST_EXPR
              LITERAL
                STRING "'pg_catalog'"
              COLON2 "::"
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      IDENT "regnamespace"
          WHITESPACE " "
          AND_KW "AND"
          WHITESPACE " "
          BIN_EXPR
            NAME_REF
              IDENT "relkind"
            WHITESPACE " "
            EQ "="
            WHITESPACE " "
            LITERAL
              STRING "'r'"
        WHITESPACE "\n      "
        AND_KW "AND"
        WHITESPACE " "
        BIN_EXPR
          FIELD_EXPR
            NAME_REF
              IDENT "pg_class"
            DOT "."
            NAME_REF
              IDENT "oid"
          WHITESPACE " "
          NOT_IN
            NOT_KW "NOT"
            WHITESPACE " "
            IN_KW "IN"
          WHITESPACE " "
          PAREN_EXPR
            L_PAREN "("
            SELECT
              SELECT_CLAUSE
                SELECT_KW "SELECT"
                WHITESPACE " "
                TARGET_LIST
                  TARGET
                    NAME_REF
                      IDENT "indrelid"
              WHITESPACE " "
              FROM_CLAUSE
                FROM_KW "FROM"
                WHITESPACE " "
                NAME_REF
                  IDENT "pg_index"
              WHITESPACE " "
              WHERE_CLAUSE
                WHERE_KW "WHERE"
                WHITESPACE " "
                NAME_REF
                  IDENT "indisprimary"
            R_PAREN ")"
    WHITESPACE "\n"
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- system catalog unique indexes not wrapped in a constraint"
  WHITESPACE "\n"
  COMMENT "-- (There should be none.)"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "relname"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_class"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "c"
      WHITESPACE " "
      JOIN
        JOIN_KW "JOIN"
        WHITESPACE " "
        NAME_REF
          IDENT "pg_index"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "i"
        WHITESPACE " "
        ON_KW "ON"
        WHITESPACE " "
        BIN_EXPR
          FIELD_EXPR
            NAME_REF
              IDENT "c"
            DOT "."
            NAME_REF
              IDENT "oid"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          FIELD_EXPR
            NAME_REF
              IDENT "i"
            DOT "."
            NAME_REF
              IDENT "indexrelid"
    WHITESPACE "\n"
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          BIN_EXPR
            BIN_EXPR
              NAME_REF
                IDENT "relnamespace"
              WHITESPACE " "
              EQ "="
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  STRING "'pg_catalog'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "regnamespace"
            WHITESPACE " "
            AND_KW "AND"
            WHITESPACE " "
            BIN_EXPR
              NAME_REF
                IDENT "relkind"
              WHITESPACE " "
              EQ "="
              WHITESPACE " "
              LITERAL
                STRING "'i'"
          WHITESPACE "\n      "
          AND_KW "AND"
          WHITESPACE " "
          FIELD_EXPR
            NAME_REF
              IDENT "i"
            DOT "."
            NAME_REF
              IDENT "indisunique"
        WHITESPACE "\n      "
        AND_KW "AND"
        WHITESPACE " "
        BIN_EXPR
          FIELD_EXPR
            NAME_REF
              IDENT "c"
            DOT "."
            NAME_REF
              IDENT "oid"
          WHITESPACE " "
          NOT_IN
            NOT_KW "NOT"
            WHITESPACE " "
            IN_KW "IN"
          WHITESPACE " "
          PAREN_EXPR
            L_PAREN "("
            SELECT
              SELECT_CLAUSE
                SELECT_KW "SELECT"
                WHITESPACE " "
                TARGET_LIST
                  TARGET
                    NAME_REF
                      IDENT "conindid"
              WHITESPACE " "
              FROM_CLAUSE
                FROM_KW "FROM"
                WHITESPACE " "
                NAME_REF
                  IDENT "pg_constraint"
            R_PAREN ")"
    WHITESPACE "\n"
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n"
