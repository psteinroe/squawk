---
source: crates/squawk_parser/tests/regression_suite.rs
assertion_line: 87
input_file: crates/squawk_parser/tests/data/regression_suite/copy2.sql
---
SOURCE_FILE
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TEMP_KW "TEMP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "x"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "serial"
      COMMA ","
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
        WHITESPACE " "
        NOT_NULL_CONSTRAINT
          NOT_KW "not"
          WHITESPACE " "
          NULL_KW "null"
        WHITESPACE " "
        DEFAULT_CONSTRAINT
          DEFAULT_KW "default"
          WHITESPACE " "
          LITERAL
            STRING "'stuff'"
      COMMA ","
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "d"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "e"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      WHITESPACE "\n"
      R_PAREN ")"
  WHITESPACE " "
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "fn_x_before"
    WHITESPACE " "
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'\n  BEGIN\n\t\tNEW.e := ''before trigger fired''::text;\n\t\treturn NEW;\n\tEND;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "fn_x_after"
    WHITESPACE " "
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'\n  BEGIN\n\t\tUPDATE x set e=''after trigger fired'' where c=''stuff'';\n\t\treturn NULL;\n\tEND;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "trg_x_after"
    WHITESPACE " "
    AFTER_KW "AFTER"
    WHITESPACE " "
    INSERT_KW "INSERT"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "x"
    WHITESPACE "\n"
    FOR_KW "FOR"
    WHITESPACE " "
    EACH_KW "EACH"
    WHITESPACE " "
    ROW_KW "ROW"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "fn_x_after"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "trg_x_before"
    WHITESPACE " "
    BEFORE_KW "BEFORE"
    WHITESPACE " "
    INSERT_KW "INSERT"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "x"
    WHITESPACE "\n"
    FOR_KW "FOR"
    WHITESPACE " "
    EACH_KW "EACH"
    WHITESPACE " "
    ROW_KW "ROW"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "fn_x_before"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n\n\n\n"
  COMMENT "-- non-existent column in column list: should fail"
  WHITESPACE "\n"
  COMMENT "-- redundant options"
  WHITESPACE "\n"
  COMMENT "-- incorrect options"
  WHITESPACE "\n"
  COMMENT "-- too many columns in column list: should fail"
  WHITESPACE "\n"
  COMMENT "-- missing data: should fail"
  WHITESPACE "\n\n"
  COMMENT "-- extra data: should fail"
  WHITESPACE "\n\n"
  COMMENT "-- various COPY options: delimiters, oids, NULL string, encoding"
  WHITESPACE "\n\n\n\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "x"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    STDOUT_KW "stdout"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n\n\n\n"
  COMMENT "-- check results of copy in"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- check copy out"
  WHITESPACE "\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "x"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    STDOUT_KW "stdout"
  SEMICOLON ";"
  WHITESPACE "\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "x"
    WHITESPACE " "
    COLUMN_LIST
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "c"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "e"
      R_PAREN ")"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    STDOUT_KW "stdout"
  SEMICOLON ";"
  WHITESPACE "\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "x"
    WHITESPACE " "
    COLUMN_LIST
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "b"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "e"
      R_PAREN ")"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    STDOUT_KW "stdout"
    WHITESPACE " "
    WITH_KW "WITH"
    WHITESPACE " "
    NAME
      NULL_KW "NULL"
    WHITESPACE " "
    LITERAL
      STRING "'I''m null'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TEMP_KW "TEMP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "y"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "col1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "col2"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "y"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'Jackson, Sam'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        ESC_STRING "E'\\\\h'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "y"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'It is \"perfect\".'"
      COMMA ","
      LITERAL
        ESC_STRING "E'\\t'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "y"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        NULL_KW "NULL"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "y"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    STDOUT_KW "stdout"
    WHITESPACE " "
    WITH_KW "WITH"
    WHITESPACE " "
    NAME
      CSV_KW "CSV"
  SEMICOLON ";"
  WHITESPACE "\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "y"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    STDOUT_KW "stdout"
    WHITESPACE " "
    WITH_KW "WITH"
    WHITESPACE " "
    NAME
      CSV_KW "CSV"
    WHITESPACE " "
    QUOTE_KW "QUOTE"
  WHITESPACE " "
  ERROR
    STRING "''''"
  WHITESPACE " "
  ERROR
    DELIMITER_KW "DELIMITER"
  WHITESPACE " "
  ERROR
    STRING "'|'"
  SEMICOLON ";"
  WHITESPACE "\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "y"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    STDOUT_KW "stdout"
    WHITESPACE " "
    WITH_KW "WITH"
    WHITESPACE " "
    NAME
      CSV_KW "CSV"
    WHITESPACE " "
    FORCE_KW "FORCE"
  WHITESPACE " "
  ERROR
    QUOTE_KW "QUOTE"
  WHITESPACE " "
  ERROR
    IDENT "col2"
  WHITESPACE " "
  ERROR
    ESCAPE_KW "ESCAPE"
  WHITESPACE " "
  ERROR
    ESC_STRING "E'\\\\'"
  WHITESPACE " "
  ERROR
    ENCODING_KW "ENCODING"
  WHITESPACE " "
  ERROR
    STRING "'sql_ascii'"
  SEMICOLON ";"
  WHITESPACE "\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "y"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    STDOUT_KW "stdout"
    WHITESPACE " "
    WITH_KW "WITH"
    WHITESPACE " "
    NAME
      CSV_KW "CSV"
    WHITESPACE " "
    FORCE_KW "FORCE"
  WHITESPACE " "
  ERROR
    QUOTE_KW "QUOTE"
  WHITESPACE " "
  ERROR
    STAR "*"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Repeat above tests with new 9.0 option syntax"
  WHITESPACE "\n\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "y"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    STDOUT_KW "stdout"
    WHITESPACE " "
    L_PAREN "("
    NAME
      FORMAT_KW "FORMAT"
    WHITESPACE " "
    CSV_KW "CSV"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "y"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    STDOUT_KW "stdout"
    WHITESPACE " "
    L_PAREN "("
    NAME
      FORMAT_KW "FORMAT"
    WHITESPACE " "
    CSV_KW "CSV"
    COMMA ","
    WHITESPACE " "
    NAME
      QUOTE_KW "QUOTE"
    WHITESPACE " "
    LITERAL
      STRING "''''"
    COMMA ","
    WHITESPACE " "
    NAME
      DELIMITER_KW "DELIMITER"
    WHITESPACE " "
    LITERAL
      STRING "'|'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "y"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    STDOUT_KW "stdout"
    WHITESPACE " "
    L_PAREN "("
    NAME
      FORMAT_KW "FORMAT"
    WHITESPACE " "
    CSV_KW "CSV"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "FORCE_QUOTE"
    WHITESPACE " "
    L_PAREN "("
    NAME
      IDENT "col2"
    R_PAREN ")"
    COMMA ","
    WHITESPACE " "
    NAME
      ESCAPE_KW "ESCAPE"
    WHITESPACE " "
    LITERAL
      ESC_STRING "E'\\\\'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COPY_STMT
    COPY_KW "COPY"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "y"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    STDOUT_KW "stdout"
    WHITESPACE " "
    L_PAREN "("
    NAME
      FORMAT_KW "FORMAT"
    WHITESPACE " "
    CSV_KW "CSV"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "FORCE_QUOTE"
    WHITESPACE " "
    STAR "*"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "--test that we read consecutive LFs properly"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TEMP_KW "TEMP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "testnl"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ERROR
    IDENT "inside"
  ERROR
    IDENT "\",2\n\n-- test end of copy marker\nCREATE TEMP TABLE testeoc (a text);\n\nc\\.d\n\""
  ERROR
    ERROR "\\"
  ERROR
    DOT "."
  ERROR
    IDENT "\"\n\nCOPY testeoc TO stdout CSV;\n\n-- test handling of nonstandard null marker that violates escaping rules\n\nCREATE TEMP TABLE testnull(a int, b text);\nINSERT INTO testnull VALUES (1, E'\\\\0'), (NULL, NULL);\n\nCOPY testnull TO stdout WITH NULL AS E'\\\\0';\n\n\nSELECT * FROM testnull;\n\nBEGIN;\nCREATE TABLE vistest (LIKE testeoc);\nCOMMIT;\nSELECT * FROM vistest;\nBEGIN;\nTRUNCATE vistest;\nSELECT * FROM vistest;\nSAVEPOINT s1;\nTRUNCATE vistest;\nSELECT * FROM vistest;\nCOMMIT;\nSELECT * FROM vistest;\n\nBEGIN;\nTRUNCATE vistest;\nSELECT * FROM vistest;\nSAVEPOINT s1;\nTRUNCATE vistest;\nSELECT * FROM vistest;\nCOMMIT;\nSELECT * FROM vistest;\n\nBEGIN;\nTRUNCATE vistest;\nSELECT * FROM vistest;\nCOMMIT;\nTRUNCATE vistest;\nBEGIN;\nTRUNCATE vistest;\nSAVEPOINT s1;\nCOMMIT;\nBEGIN;\nINSERT INTO vistest VALUES ('z');\nSAVEPOINT s1;\nTRUNCATE vistest;\nROLLBACK TO SAVEPOINT s1;\nCOMMIT;\nCREATE FUNCTION truncate_in_subxact() RETURNS VOID AS\n$$\nBEGIN\n\tTRUNCATE vistest;\nEXCEPTION\n  WHEN OTHERS THEN\n\tINSERT INTO vistest VALUES ('subxact failure');\nEND;\n$$ language plpgsql;\nBEGIN;\nINSERT INTO vistest VALUES ('z');\nSELECT truncate_in_subxact();\nSELECT * FROM vistest;\nCOMMIT;\nSELECT * FROM vistest;\n-- Test FORCE_NOT_NULL and FORCE_NULL options\nCREATE TEMP TABLE forcetest (\n    a INT NOT NULL,\n    b TEXT NOT NULL,\n    c TEXT,\n    d TEXT,\n    e TEXT\n);\n-- should succeed with no effect (\""
  ERROR
    IDENT "b"
  ERROR
    IDENT "\" remains an empty string, \""
  ERROR
    IDENT "c"
  ERROR
    IDENT "\" remains NULL)\nBEGIN;\nCOMMIT;\nSELECT b, c FROM forcetest WHERE a = 1;\n-- should succeed, FORCE_NULL and FORCE_NOT_NULL can be both specified\nBEGIN;\nCOMMIT;\nSELECT c, d FROM forcetest WHERE a = 2;\n-- should fail with not-null constraint violation\nBEGIN;\nROLLBACK;\n-- should fail with \""
  ERROR
    NOT_KW "not"
  WHITESPACE " "
  ERROR
    IDENT "referenced"
  WHITESPACE " "
  ERROR
    BY_KW "by"
  WHITESPACE " "
  COPY_STMT
    COPY_KW "COPY"
    PATH
      PATH_SEGMENT
        NAME
          IDENT "\" error\nBEGIN;\nCOMMIT;\nSELECT b, c FROM forcetest WHERE a = 4;\n-- should succeed with effect (\""
  ERROR
    IDENT "b"
  ERROR
    IDENT "\" remains an empty string)\nBEGIN;\nCOMMIT;\nSELECT b, c FROM forcetest WHERE a = 5;\n-- should succeed with effect (\""
  ERROR
    IDENT "c"
  ERROR
    IDENT "\" remains NULL)\nBEGIN;\nCOMMIT;\nSELECT b, c FROM forcetest WHERE a = 6;\n-- should fail with \""
  ERROR
    IDENT "conflicting"
  WHITESPACE " "
  ERROR
    OR_KW "or"
  WHITESPACE " "
  ERROR
    IDENT "redundant"
  WHITESPACE " "
  ERROR
    OPTIONS_KW "options"
  ERROR
    IDENT "\" error\nBEGIN;\n\n-- test case with whole-row Var in a check constraint\ncreate table check_con_tbl (f1 int);\ncreate function check_con_function(check_con_tbl) returns bool as $$\nbegin\n  raise notice 'input = %', row_to_json($1);\n  return $1.f1 > 0;\nend $$ language plpgsql immutable;\nalter table check_con_tbl add check (check_con_function(check_con_tbl.*));\ncopy check_con_tbl from stdin;\n1\ncopy check_con_tbl from stdin;\n0\nselect * from check_con_tbl;\n\n-- test with RLS enabled.\nCREATE ROLE regress_rls_copy_user;\nCREATE ROLE regress_rls_copy_user_colperms;\nCREATE TABLE rls_t1 (a int, b int, c int);\n\n\nCREATE POLICY p1 ON rls_t1 FOR SELECT USING (a % 2 = 0);\nALTER TABLE rls_t1 ENABLE ROW LEVEL SECURITY;\nALTER TABLE rls_t1 FORCE ROW LEVEL SECURITY;\n\nGRANT SELECT ON TABLE rls_t1 TO regress_rls_copy_user;\nGRANT SELECT (a, b) ON TABLE rls_t1 TO regress_rls_copy_user_colperms;\n\n-- all columns\nCOPY rls_t1 TO stdout;\nCOPY rls_t1 (a, b, c) TO stdout;\n\n-- subset of columns\nCOPY rls_t1 (a) TO stdout;\nCOPY rls_t1 (a, b) TO stdout;\n\n-- column reordering\nCOPY rls_t1 (b, a) TO stdout;\n\nSET SESSION AUTHORIZATION regress_rls_copy_user;\n\n-- all columns\nCOPY rls_t1 TO stdout;\nCOPY rls_t1 (a, b, c) TO stdout;\n\n-- subset of columns\nCOPY rls_t1 (a) TO stdout;\nCOPY rls_t1 (a, b) TO stdout;\n\n-- column reordering\nCOPY rls_t1 (b, a) TO stdout;\n\nRESET SESSION AUTHORIZATION;\n\nSET SESSION AUTHORIZATION regress_rls_copy_user_colperms;\n\n-- attempt all columns (should fail)\nCOPY rls_t1 TO stdout;\nCOPY rls_t1 (a, b, c) TO stdout;\n\n-- try to copy column with no privileges (should fail)\nCOPY rls_t1 (c) TO stdout;\n\n-- subset of columns (should succeed)\nCOPY rls_t1 (a) TO stdout;\nCOPY rls_t1 (a, b) TO stdout;\n\nRESET SESSION AUTHORIZATION;\n\n-- test with INSTEAD OF INSERT trigger on a view\nCREATE TABLE instead_of_insert_tbl(id serial, name text);\nCREATE VIEW instead_of_insert_tbl_view AS SELECT ''::text AS str;\n\n\nCREATE FUNCTION fun_instead_of_insert_tbl() RETURNS trigger AS $$\nBEGIN\n  INSERT INTO instead_of_insert_tbl (name) VALUES (NEW.str);\n  RETURN NULL;\nEND;\n$$ LANGUAGE plpgsql;\nCREATE TRIGGER trig_instead_of_insert_tbl_view\n  INSTEAD OF INSERT ON instead_of_insert_tbl_view\n  FOR EACH ROW EXECUTE PROCEDURE fun_instead_of_insert_tbl();\n\n\nSELECT * FROM instead_of_insert_tbl;\n\n-- Test of COPY optimization with view using INSTEAD OF INSERT\n-- trigger when relation is created in the same transaction as\n-- when COPY is executed.\nBEGIN;\nCREATE VIEW instead_of_insert_tbl_view_2 as select ''::text as str;\nCREATE TRIGGER trig_instead_of_insert_tbl_view_2\n  INSTEAD OF INSERT ON instead_of_insert_tbl_view_2\n  FOR EACH ROW EXECUTE PROCEDURE fun_instead_of_insert_tbl();\n\n\nSELECT * FROM instead_of_insert_tbl;\nCOMMIT;\n\n-- tests for on_error option\nCREATE TABLE check_ign_err (n int, m int[], k int);\n5\t{5}\t5\n\n-- want context for notices\n\n5\t{5}\t5\n6\ta\n7\t{7}\ta\n8\t{8}\t8\n\n-- tests for on_error option with log_verbosity and null constraint via domain\nCREATE DOMAIN dcheck_ign_err2 varchar(15) NOT NULL;\nCREATE TABLE check_ign_err2 (n int, m int[], k int, l dcheck_ign_err2);\n\n-- reset context choice\n\nSELECT * FROM check_ign_err;\n\nSELECT * FROM check_ign_err2;\n\n-- test datatype error that can't be handled as soft: should fail\nCREATE TABLE hard_err(foo widget);\n\n-- test missing data: should fail\n\n-- test extra data: should fail\n\n-- tests for reject_limit option\n10\t{10}\t10\n\n10\t{10}\t10\n\n-- clean up\nDROP TABLE forcetest;\nDROP TABLE vistest;\nDROP FUNCTION truncate_in_subxact();\nDROP TABLE x, y;\nDROP TABLE rls_t1 CASCADE;\nDROP ROLE regress_rls_copy_user;\nDROP ROLE regress_rls_copy_user_colperms;\nDROP FUNCTION fn_x_before();\nDROP FUNCTION fn_x_after();\nDROP TABLE instead_of_insert_tbl;\nDROP VIEW instead_of_insert_tbl_view;\nDROP VIEW instead_of_insert_tbl_view_2;\nDROP FUNCTION fun_instead_of_insert_tbl();\nDROP TABLE check_ign_err;\nDROP TABLE check_ign_err2;\nDROP DOMAIN dcheck_ign_err2;\nDROP TABLE hard_err;\n\n--\n-- COPY FROM ... DEFAULT\n--\n\ncreate temp table copy_default (\n\tid integer primary key,\n\ttext_value text not null default 'test',\n\tts_value timestamp without time zone not null default '2022-07-05'\n);\n\n-- if DEFAULT is not specified, then the marker will be regular data\ncopy copy_default from stdin;\n1\tvalue\t'2022-07-04'\n2\t\\D\t'2022-07-05'\n\nselect id, text_value, ts_value from copy_default;\n\ntruncate copy_default;\n\ncopy copy_default from stdin with (format csv);\n1,value,2022-07-04\n2,\\D,2022-07-05\n\nselect id, text_value, ts_value from copy_default;\n\ntruncate copy_default;\n\n-- DEFAULT cannot be used in binary mode\ncopy copy_default from stdin with (format binary, default '\\D');\n\n-- DEFAULT cannot be new line nor carriage return\ncopy copy_default from stdin with (default E'\\n');\ncopy copy_default from stdin with (default E'\\r');\n\n-- DELIMITER cannot appear in DEFAULT spec\ncopy copy_default from stdin with (delimiter ';', default 'test;test');\n\n-- CSV quote cannot appear in DEFAULT spec\ncopy copy_default from stdin with (format csv, quote '\""
  ERROR
    STRING "', default '"
  ERROR
    IDENT "test"
  ERROR
    IDENT "\"test');\n\n-- NULL and DEFAULT spec must be different\ncopy copy_default from stdin with (default '\\N');\n\n-- cannot use DEFAULT marker in column that has no DEFAULT value\ncopy copy_default from stdin with (default '\\D');\n2\t\\D\t'2022-07-05'\n\ncopy copy_default from stdin with (format csv, default '\\D');\n2,\\D,2022-07-05\n\n-- The DEFAULT marker must be unquoted and unescaped or it's not recognized\ncopy copy_default from stdin with (default '\\D');\n1\t\\D\t'2022-07-04'\n2\t\\\\D\t'2022-07-04'\n3\t\""
  ERROR
    ERROR "\\"
  ERROR
    IDENT "D"
  ERROR
    IDENT "\"\t'2022-07-04'\n\nselect id, text_value, ts_value from copy_default;\n\ntruncate copy_default;\n\ncopy copy_default from stdin with (format csv, default '\\D');\n1,\\D,2022-07-04\n2,\\\\D,2022-07-04\n3,\""
  ERROR
    ERROR "\\"
  ERROR
    IDENT "D"
  ERROR
    IDENT "\",2022-07-04\n\nselect id, text_value, ts_value from copy_default;\n\ntruncate copy_default;\n\n-- successful usage of DEFAULT option in COPY\ncopy copy_default from stdin with (default '\\D');\n1\tvalue\t'2022-07-04'\n2\t\\D\t'2022-07-03'\n3\t\\D\t\\D\n\nselect id, text_value, ts_value from copy_default;\n\ntruncate copy_default;\n\ncopy copy_default from stdin with (format csv, default '\\D');\n1,value,2022-07-04\n2,\\D,2022-07-03\n3,\\D,\\D\n\nselect id, text_value, ts_value from copy_default;\n\ntruncate copy_default;\n\n-- DEFAULT cannot be used in COPY TO\ncopy (select 1 as test) TO stdout with (default '\\D');\n"
---
ERROR@1026: expected L_PAREN
ERROR@1043: expected R_PAREN
ERROR@1246: expected L_PAREN
ERROR@1250: expected R_PAREN
ERROR@1273: expected L_PAREN
ERROR@1283: expected R_PAREN
ERROR@1283: expected SEMICOLON
ERROR@1284: expected command, found STRING
ERROR@1289: expected command, found DELIMITER_KW
ERROR@1299: expected command, found STRING
ERROR@1325: expected L_PAREN
ERROR@1335: expected R_PAREN
ERROR@1335: expected SEMICOLON
ERROR@1336: expected command, found QUOTE_KW
ERROR@1342: expected command, found IDENT
ERROR@1347: expected command, found ESCAPE_KW
ERROR@1354: expected command, found ESC_STRING
ERROR@1360: expected command, found ENCODING_KW
ERROR@1369: expected command, found STRING
ERROR@1403: expected L_PAREN
ERROR@1413: expected R_PAREN
ERROR@1413: expected SEMICOLON
ERROR@1414: expected command, found QUOTE_KW
ERROR@1420: expected command, found STAR
ERROR@1772: expected command, found IDENT
ERROR@1778: expected command, found IDENT
ERROR@1853: expected command, found ERROR
ERROR@1854: expected command, found DOT
ERROR@1855: expected command, found IDENT
ERROR@3206: expected command, found IDENT
ERROR@3207: expected command, found IDENT
ERROR@3235: expected command, found IDENT
ERROR@3236: expected command, found IDENT
ERROR@3521: expected command, found NOT_KW
ERROR@3525: expected command, found IDENT
ERROR@3536: expected command, found BY_KW
ERROR@3638: expected SEMICOLON
ERROR@3638: expected command, found IDENT
ERROR@3639: expected command, found IDENT
ERROR@3753: expected command, found IDENT
ERROR@3754: expected command, found IDENT
ERROR@3846: expected command, found IDENT
ERROR@3858: expected command, found OR_KW
ERROR@3861: expected command, found IDENT
ERROR@3871: expected command, found OPTIONS_KW
ERROR@3878: expected command, found IDENT
ERROR@8835: expected command, found STRING
ERROR@8847: expected command, found IDENT
ERROR@8851: expected command, found IDENT
ERROR@9334: expected command, found ERROR
ERROR@9335: expected command, found IDENT
ERROR@9336: expected command, found IDENT
ERROR@9526: expected command, found ERROR
ERROR@9527: expected command, found IDENT
ERROR@9528: expected command, found IDENT
ERROR@3206: unknown literal prefix
ERROR@3638: unknown literal prefix
ERROR@9528: Missing trailing " to terminate the quoted identifier
