---
source: crates/squawk_parser/tests/regression_suite.rs
assertion_line: 87
input_file: crates/squawk_parser/tests/data/regression_suite/vacuum_parallel.sql
---
SOURCE_FILE
  SET_STMT
    SET_KW "SET"
    WHITESPACE " "
    NAME_REF
      IDENT "max_parallel_maintenance_workers"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    LITERAL
      INT_NUMBER "4"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "SET"
    WHITESPACE " "
    NAME_REF
      IDENT "min_parallel_index_scan_size"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    LITERAL
      STRING "'128kB'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    COMMENT "-- Bug #17245: Make sure that we don't totally fail to VACUUM individual indexes that"
    WHITESPACE "\n"
    COMMENT "-- happen to be below min_parallel_index_scan_size during parallel VACUUM:"
    WHITESPACE "\n"
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "parallel_vacuum_table"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    CONSTRAINT_STORAGE_PARAMS
      WITH_KW "WITH"
      WHITESPACE " "
      L_PAREN "("
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "autovacuum_enabled"
      WHITESPACE " "
      EQ "="
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              OFF_KW "off"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "parallel_vacuum_table"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            NAME_REF
              IDENT "i"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "from"
        WHITESPACE " "
        CALL_EXPR
          NAME_REF
            IDENT "generate_series"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "10000"
            R_PAREN ")"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "i"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Parallel VACUUM will never be used unless there are at least two indexes"
  WHITESPACE "\n"
  COMMENT "-- that exceed min_parallel_index_scan_size.  Create two such indexes, and"
  WHITESPACE "\n"
  COMMENT "-- a third index that is smaller than min_parallel_index_scan_size."
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "regular_sized_index"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "parallel_vacuum_table"
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "a"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "typically_sized_index"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "parallel_vacuum_table"
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "a"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- Note: vacuum_in_leader_small_index can apply deduplication, making it ~3x"
  WHITESPACE "\n"
  COMMENT "-- smaller than the other indexes"
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "vacuum_in_leader_small_index"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "parallel_vacuum_table"
    INDEX_PARAMS
      L_PAREN "("
      PAREN_EXPR
        L_PAREN "("
        LITERAL
          INT_NUMBER "1"
        R_PAREN ")"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Verify (as best we can) that the cost model for parallel VACUUM"
  WHITESPACE "\n"
  COMMENT "-- will make our VACUUM run in parallel, while always leaving it up to the"
  WHITESPACE "\n"
  COMMENT "-- parallel leader to handle the vacuum_in_leader_small_index index:"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              EXISTS_KW "EXISTS"
            WHITESPACE " "
            ARG_LIST
              L_PAREN "("
              WHITESPACE "\n"
              SELECT
                SELECT_CLAUSE
                  SELECT_KW "SELECT"
                  WHITESPACE " "
                  TARGET_LIST
                    TARGET
                      LITERAL
                        INT_NUMBER "1"
                WHITESPACE "\n"
                FROM_CLAUSE
                  FROM_KW "FROM"
                  WHITESPACE " "
                  NAME_REF
                    IDENT "pg_class"
                WHITESPACE "\n"
                WHERE_CLAUSE
                  WHERE_KW "WHERE"
                  WHITESPACE " "
                  BIN_EXPR
                    BIN_EXPR
                      NAME_REF
                        IDENT "oid"
                      WHITESPACE " "
                      EQ "="
                      WHITESPACE " "
                      CAST_EXPR
                        LITERAL
                          STRING "'vacuum_in_leader_small_index'"
                        COLON2 "::"
                        PATH_TYPE
                          PATH
                            PATH_SEGMENT
                              NAME_REF
                                IDENT "regclass"
                    WHITESPACE " "
                    AND_KW "AND"
                    WHITESPACE "\n  "
                    BIN_EXPR
                      CALL_EXPR
                        NAME_REF
                          IDENT "pg_relation_size"
                        ARG_LIST
                          L_PAREN "("
                          NAME_REF
                            IDENT "oid"
                          R_PAREN ")"
                      WHITESPACE " "
                      L_ANGLE "<"
                      WHITESPACE "\n  "
                      CALL_EXPR
                        NAME_REF
                          IDENT "pg_size_bytes"
                        ARG_LIST
                          L_PAREN "("
                          CALL_EXPR
                            NAME_REF
                              IDENT "current_setting"
                            ARG_LIST
                              L_PAREN "("
                              LITERAL
                                STRING "'min_parallel_index_scan_size'"
                              R_PAREN ")"
                          R_PAREN ")"
              WHITESPACE "\n"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "leader_will_handle_small_index"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "count"
            ARG_LIST
              L_PAREN "("
              STAR "*"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "trigger_parallel_vacuum_nindexes"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_class"
    WHITESPACE "\n"
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          NAME_REF
            IDENT "oid"
          WHITESPACE " "
          IN_KW "in"
          WHITESPACE " "
          TUPLE_EXPR
            L_PAREN "("
            CAST_EXPR
              LITERAL
                STRING "'regular_sized_index'"
              COLON2 "::"
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      IDENT "regclass"
            COMMA ","
            WHITESPACE " "
            CAST_EXPR
              LITERAL
                STRING "'typically_sized_index'"
              COLON2 "::"
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      IDENT "regclass"
            R_PAREN ")"
        WHITESPACE " "
        AND_KW "AND"
        WHITESPACE "\n  "
        BIN_EXPR
          CALL_EXPR
            NAME_REF
              IDENT "pg_relation_size"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "oid"
              R_PAREN ")"
          WHITESPACE " "
          GTEQ ">="
          WHITESPACE "\n  "
          CALL_EXPR
            NAME_REF
              IDENT "pg_size_bytes"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "current_setting"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    STRING "'min_parallel_index_scan_size'"
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Parallel VACUUM with B-Tree page deletions, ambulkdelete calls:"
  WHITESPACE "\n"
  DELETE_STMT
    DELETE_KW "DELETE"
    WHITESPACE " "
    FROM_KW "FROM"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "parallel_vacuum_table"
  SEMICOLON ";"
  WHITESPACE "\n"
  VACUUM_STMT
    VACUUM_KW "VACUUM"
    WHITESPACE " "
    L_PAREN "("
    PARALLEL_KW "PARALLEL"
    WHITESPACE " "
    LITERAL
      INT_NUMBER "4"
    COMMA ","
    WHITESPACE " "
    IDENT "INDEX_CLEANUP"
    WHITESPACE " "
    ON_KW "ON"
    R_PAREN ")"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "parallel_vacuum_table"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Since vacuum_in_leader_small_index uses deduplication, we expect an"
  WHITESPACE "\n"
  COMMENT "-- assertion failure with bug #17245 (in the absence of bugfix):"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "parallel_vacuum_table"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            NAME_REF
              IDENT "i"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "FROM"
        WHITESPACE " "
        CALL_EXPR
          NAME_REF
            IDENT "generate_series"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "10000"
            R_PAREN ")"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "i"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  RESET_STMT
    RESET_KW "RESET"
    WHITESPACE " "
    NAME_REF
      IDENT "max_parallel_maintenance_workers"
  SEMICOLON ";"
  WHITESPACE "\n"
  RESET_STMT
    RESET_KW "RESET"
    WHITESPACE " "
    NAME_REF
      IDENT "min_parallel_index_scan_size"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Deliberately don't drop table, to get further coverage from tools like"
  WHITESPACE "\n"
  COMMENT "-- pg_amcheck in some testing scenarios"
  WHITESPACE "\n"
