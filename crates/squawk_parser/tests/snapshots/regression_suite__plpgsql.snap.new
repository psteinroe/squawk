---
source: crates/squawk_parser/tests/regression_suite.rs
assertion_line: 87
input_file: crates/squawk_parser/tests/data/regression_suite/plpgsql.sql
---
SOURCE_FILE
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- PLPGSQL"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Scenario:"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "--     A building with a modern TP cable installation where any"
  WHITESPACE "\n"
  COMMENT "--     of the wall connectors can be used to plug in phones,"
  WHITESPACE "\n"
  COMMENT "--     ethernet interfaces or local office hubs. The backside"
  WHITESPACE "\n"
  COMMENT "--     of the wall connectors is wired to one of several patch-"
  WHITESPACE "\n"
  COMMENT "--     fields in the building."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "--     In the patchfields, there are hubs and all the slots"
  WHITESPACE "\n"
  COMMENT "--     representing the wall connectors. In addition there are"
  WHITESPACE "\n"
  COMMENT "--     slots that can represent a phone line from the central"
  WHITESPACE "\n"
  COMMENT "--     phone system."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "--     Triggers ensure consistency of the patching information."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "--     Functions are used to build up powerful views that let"
  WHITESPACE "\n"
  COMMENT "--     you look behind the wall when looking at a patchfield"
  WHITESPACE "\n"
  COMMENT "--     or into a room."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "Room"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "roomno"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "8"
            R_PAREN ")"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          COMMENT_KW "comment"
        WHITESPACE "\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_INDEX_STMT
    CREATE_KW "create"
    WHITESPACE " "
    UNIQUE_KW "unique"
    WHITESPACE " "
    INDEX_KW "index"
    WHITESPACE " "
    NAME
      IDENT "Room_rno"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Room"
    WHITESPACE " "
    USING_KW "using"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "roomno"
      WHITESPACE " "
      IDENT "bpchar_ops"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "WSlot"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "slotname"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "20"
            R_PAREN ")"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "roomno"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "8"
            R_PAREN ")"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "slotlink"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "20"
            R_PAREN ")"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "backlink"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "20"
            R_PAREN ")"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_INDEX_STMT
    CREATE_KW "create"
    WHITESPACE " "
    UNIQUE_KW "unique"
    WHITESPACE " "
    INDEX_KW "index"
    WHITESPACE " "
    NAME
      IDENT "WSlot_name"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    USING_KW "using"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "slotname"
      WHITESPACE " "
      IDENT "bpchar_ops"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "PField"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          NAME_KW "name"
        WHITESPACE "\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          COMMENT_KW "comment"
        WHITESPACE "\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_INDEX_STMT
    CREATE_KW "create"
    WHITESPACE " "
    UNIQUE_KW "unique"
    WHITESPACE " "
    INDEX_KW "index"
    WHITESPACE " "
    NAME
      IDENT "PField_name"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PField"
    WHITESPACE " "
    USING_KW "using"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        NAME_KW "name"
      WHITESPACE " "
      IDENT "text_ops"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "PSlot"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "slotname"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "20"
            R_PAREN ")"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "pfname"
        WHITESPACE "\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "slotlink"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "20"
            R_PAREN ")"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "backlink"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "20"
            R_PAREN ")"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_INDEX_STMT
    CREATE_KW "create"
    WHITESPACE " "
    UNIQUE_KW "unique"
    WHITESPACE " "
    INDEX_KW "index"
    WHITESPACE " "
    NAME
      IDENT "PSlot_name"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    USING_KW "using"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "slotname"
      WHITESPACE " "
      IDENT "bpchar_ops"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "PLine"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "slotname"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "20"
            R_PAREN ")"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "phonenumber"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "20"
            R_PAREN ")"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          COMMENT_KW "comment"
        WHITESPACE "\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "backlink"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "20"
            R_PAREN ")"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_INDEX_STMT
    CREATE_KW "create"
    WHITESPACE " "
    UNIQUE_KW "unique"
    WHITESPACE " "
    INDEX_KW "index"
    WHITESPACE " "
    NAME
      IDENT "PLine_name"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    USING_KW "using"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "slotname"
      WHITESPACE " "
      IDENT "bpchar_ops"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "Hub"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          NAME_KW "name"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "14"
            R_PAREN ")"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          COMMENT_KW "comment"
        WHITESPACE "\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "nslots"
        WHITESPACE "\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_INDEX_STMT
    CREATE_KW "create"
    WHITESPACE " "
    UNIQUE_KW "unique"
    WHITESPACE " "
    INDEX_KW "index"
    WHITESPACE " "
    NAME
      IDENT "Hub_name"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Hub"
    WHITESPACE " "
    USING_KW "using"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        NAME_KW "name"
      WHITESPACE " "
      IDENT "bpchar_ops"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "HSlot"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "slotname"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "20"
            R_PAREN ")"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "hubname"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "14"
            R_PAREN ")"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "slotno"
        WHITESPACE "\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "slotlink"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "20"
            R_PAREN ")"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_INDEX_STMT
    CREATE_KW "create"
    WHITESPACE " "
    UNIQUE_KW "unique"
    WHITESPACE " "
    INDEX_KW "index"
    WHITESPACE " "
    NAME
      IDENT "HSlot_name"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "HSlot"
    WHITESPACE " "
    USING_KW "using"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "slotname"
      WHITESPACE " "
      IDENT "bpchar_ops"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "create"
    WHITESPACE " "
    INDEX_KW "index"
    WHITESPACE " "
    NAME
      IDENT "HSlot_hubname"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "HSlot"
    WHITESPACE " "
    USING_KW "using"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "hubname"
      WHITESPACE " "
      IDENT "bpchar_ops"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          SYSTEM_KW "System"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          NAME_KW "name"
        WHITESPACE "\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          COMMENT_KW "comment"
        WHITESPACE "\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_INDEX_STMT
    CREATE_KW "create"
    WHITESPACE " "
    UNIQUE_KW "unique"
    WHITESPACE " "
    INDEX_KW "index"
    WHITESPACE " "
    NAME
      IDENT "System_name"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          SYSTEM_KW "System"
    WHITESPACE " "
    USING_KW "using"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        NAME_KW "name"
      WHITESPACE " "
      IDENT "text_ops"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "IFace"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "slotname"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "20"
            R_PAREN ")"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "sysname"
        WHITESPACE "\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "ifname"
        WHITESPACE "\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "slotlink"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "20"
            R_PAREN ")"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_INDEX_STMT
    CREATE_KW "create"
    WHITESPACE " "
    UNIQUE_KW "unique"
    WHITESPACE " "
    INDEX_KW "index"
    WHITESPACE " "
    NAME
      IDENT "IFace_name"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "IFace"
    WHITESPACE " "
    USING_KW "using"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "slotname"
      WHITESPACE " "
      IDENT "bpchar_ops"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "PHone"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "slotname"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "20"
            R_PAREN ")"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          COMMENT_KW "comment"
        WHITESPACE "\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "slotlink"
        WHITESPACE "\t"
        CHAR_TYPE
          CHAR_KW "char"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "20"
            R_PAREN ")"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_INDEX_STMT
    CREATE_KW "create"
    WHITESPACE " "
    UNIQUE_KW "unique"
    WHITESPACE " "
    INDEX_KW "index"
    WHITESPACE " "
    NAME
      IDENT "PHone_name"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PHone"
    WHITESPACE " "
    USING_KW "using"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "slotname"
      WHITESPACE " "
      IDENT "bpchar_ops"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- *"
  WHITESPACE "\n"
  COMMENT "-- * Trigger procedures and functions for the patchfield"
  WHITESPACE "\n"
  COMMENT "-- * test of PL/pgSQL"
  WHITESPACE "\n"
  COMMENT "-- *"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * AFTER UPDATE on Room"
  WHITESPACE "\n"
  COMMENT "-- *\t- If room no changes let wall slots follow"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_room_au"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nbegin\n    if new.roomno != old.roomno then\n        update WSlot set roomno = new.roomno where roomno = old.roomno;\n    end if;\n    return new;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_room_au"
    WHITESPACE " "
    AFTER_KW "after"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Room"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_room_au"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * AFTER DELETE on Room"
  WHITESPACE "\n"
  COMMENT "-- *\t- delete wall slots in this room"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_room_ad"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nbegin\n    delete from WSlot where roomno = old.roomno;\n    return old;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_room_ad"
    WHITESPACE " "
    AFTER_KW "after"
    WHITESPACE " "
    DELETE_KW "delete"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Room"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_room_ad"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * BEFORE INSERT or UPDATE on WSlot"
  WHITESPACE "\n"
  COMMENT "-- *\t- Check that room exists"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_wslot_biu"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n    if count(*) = 0 from Room where roomno = new.roomno then\n        raise exception 'Room % does not exist', new.roomno;\n    end if;\n    return new;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_wslot_biu"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_wslot_biu"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * AFTER UPDATE on PField"
  WHITESPACE "\n"
  COMMENT "-- *\t- Let PSlots of this field follow"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_pfield_au"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nbegin\n    if new.name != old.name then\n        update PSlot set pfname = new.name where pfname = old.name;\n    end if;\n    return new;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_pfield_au"
    WHITESPACE " "
    AFTER_KW "after"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PField"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_pfield_au"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * AFTER DELETE on PField"
  WHITESPACE "\n"
  COMMENT "-- *\t- Remove all slots of this patchfield"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_pfield_ad"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nbegin\n    delete from PSlot where pfname = old.name;\n    return old;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_pfield_ad"
    WHITESPACE " "
    AFTER_KW "after"
    WHITESPACE " "
    DELETE_KW "delete"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PField"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_pfield_ad"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * BEFORE INSERT or UPDATE on PSlot"
  WHITESPACE "\n"
  COMMENT "-- *\t- Ensure that our patchfield does exist"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_pslot_biu"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$proc$\ndeclare\n    pfrec\trecord;\n    ps          alias for new;\nbegin\n    select into pfrec * from PField where name = ps.pfname;\n    if not found then\n        raise exception $$Patchfield \"%\" does not exist$$, ps.pfname;\n    end if;\n    return ps;\nend;\n$proc$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_pslot_biu"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_pslot_biu"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * AFTER UPDATE on System"
  WHITESPACE "\n"
  COMMENT "-- *\t- If system name changes let interfaces follow"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_system_au"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nbegin\n    if new.name != old.name then\n        update IFace set sysname = new.name where sysname = old.name;\n    end if;\n    return new;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_system_au"
    WHITESPACE " "
    AFTER_KW "after"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          SYSTEM_KW "System"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_system_au"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * BEFORE INSERT or UPDATE on IFace"
  WHITESPACE "\n"
  COMMENT "-- *\t- set the slotname to IF.sysname.ifname"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_iface_biu"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n    sname\ttext;\n    sysrec\trecord;\nbegin\n    select into sysrec * from system where name = new.sysname;\n    if not found then\n        raise exception $q$system \"%\" does not exist$q$, new.sysname;\n    end if;\n    sname := 'IF.' || new.sysname;\n    sname := sname || '.';\n    sname := sname || new.ifname;\n    if length(sname) > 20 then\n        raise exception 'IFace slotname \"%\" too long (20 char max)', sname;\n    end if;\n    new.slotname := sname;\n    return new;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_iface_biu"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "IFace"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_iface_biu"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * AFTER INSERT or UPDATE or DELETE on Hub"
  WHITESPACE "\n"
  COMMENT "-- *\t- insert/delete/rename slots as required"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_hub_a"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\ndeclare\n    hname\ttext;\n    dummy\tinteger;\nbegin\n    if tg_op = ''INSERT'' then\n\tdummy := tg_hub_adjustslots(new.name, 0, new.nslots);\n\treturn new;\n    end if;\n    if tg_op = ''UPDATE'' then\n\tif new.name != old.name then\n\t    update HSlot set hubname = new.name where hubname = old.name;\n\tend if;\n\tdummy := tg_hub_adjustslots(new.name, old.nslots, new.nslots);\n\treturn new;\n    end if;\n    if tg_op = ''DELETE'' then\n\tdummy := tg_hub_adjustslots(old.name, old.nslots, 0);\n\treturn old;\n    end if;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_hub_a"
    WHITESPACE " "
    AFTER_KW "after"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    DELETE_KW "delete"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Hub"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_hub_a"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * Support function to add/remove slots of Hub"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_hub_adjustslots"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "hname"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "bpchar"
      COMMA ","
      WHITESPACE "\n                                   "
      PARAM
        NAME
          IDENT "oldnslots"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      COMMA ","
      WHITESPACE "\n                                   "
      PARAM
        NAME
          IDENT "newnslots"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "integer"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nbegin\n    if newnslots = oldnslots then\n        return 0;\n    end if;\n    if newnslots < oldnslots then\n        delete from HSlot where hubname = hname and slotno > newnslots;\n\treturn 0;\n    end if;\n    for i in oldnslots + 1 .. newnslots loop\n        insert into HSlot (slotname, hubname, slotno, slotlink)\n\t\tvalues (''HS.dummy'', hname, i, '''');\n    end loop;\n    return 0;\nend\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test comments"
  WHITESPACE "\n"
  COMMENT_STMT
    COMMENT_KW "COMMENT"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "tg_hub_adjustslots_wrong"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "bpchar"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE " "
    IS_KW "IS"
    WHITESPACE " "
    LITERAL
      STRING "'function with args'"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT_STMT
    COMMENT_KW "COMMENT"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "tg_hub_adjustslots"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "bpchar"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE " "
    IS_KW "IS"
    WHITESPACE " "
    LITERAL
      STRING "'function with args'"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT_STMT
    COMMENT_KW "COMMENT"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "tg_hub_adjustslots"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "bpchar"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE " "
    IS_KW "IS"
    WHITESPACE " "
    NULL_KW "NULL"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * BEFORE INSERT or UPDATE on HSlot"
  WHITESPACE "\n"
  COMMENT "-- *\t- prevent from manual manipulation"
  WHITESPACE "\n"
  COMMENT "-- *\t- set the slotname to HS.hubname.slotno"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_hslot_biu"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\ndeclare\n    sname\ttext;\n    xname\tHSlot.slotname%TYPE;\n    hubrec\trecord;\nbegin\n    select into hubrec * from Hub where name = new.hubname;\n    if not found then\n        raise exception ''no manual manipulation of HSlot'';\n    end if;\n    if new.slotno < 1 or new.slotno > hubrec.nslots then\n        raise exception ''no manual manipulation of HSlot'';\n    end if;\n    if tg_op = ''UPDATE'' and new.hubname != old.hubname then\n\tif count(*) > 0 from Hub where name = old.hubname then\n\t    raise exception ''no manual manipulation of HSlot'';\n\tend if;\n    end if;\n    sname := ''HS.'' || trim(new.hubname);\n    sname := sname || ''.'';\n    sname := sname || new.slotno::text;\n    if length(sname) > 20 then\n        raise exception ''HSlot slotname \"%\" too long (20 char max)'', sname;\n    end if;\n    new.slotname := sname;\n    return new;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_hslot_biu"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "HSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_hslot_biu"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * BEFORE DELETE on HSlot"
  WHITESPACE "\n"
  COMMENT "-- *\t- prevent from manual manipulation"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_hslot_bd"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\ndeclare\n    hubrec\trecord;\nbegin\n    select into hubrec * from Hub where name = old.hubname;\n    if not found then\n        return old;\n    end if;\n    if old.slotno > hubrec.nslots then\n        return old;\n    end if;\n    raise exception ''no manual manipulation of HSlot'';\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_hslot_bd"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    DELETE_KW "delete"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "HSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_hslot_bd"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * BEFORE INSERT on all slots"
  WHITESPACE "\n"
  COMMENT "-- *\t- Check name prefix"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_chkslotname"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nbegin\n    if substr(new.slotname, 1, 2) != tg_argv[0] then\n        raise exception ''slotname must begin with %'', tg_argv[0];\n    end if;\n    return new;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_chkslotname"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_chkslotname"
      ARG_LIST
        L_PAREN "("
        LITERAL
          STRING "'PS'"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_chkslotname"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_chkslotname"
      ARG_LIST
        L_PAREN "("
        LITERAL
          STRING "'WS'"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_chkslotname"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_chkslotname"
      ARG_LIST
        L_PAREN "("
        LITERAL
          STRING "'PL'"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_chkslotname"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "IFace"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_chkslotname"
      ARG_LIST
        L_PAREN "("
        LITERAL
          STRING "'IF'"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_chkslotname"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PHone"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_chkslotname"
      ARG_LIST
        L_PAREN "("
        LITERAL
          STRING "'PH'"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * BEFORE INSERT or UPDATE on all slots with slotlink"
  WHITESPACE "\n"
  COMMENT "-- *\t- Set slotlink to empty string if NULL value given"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_chkslotlink"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nbegin\n    if new.slotlink isnull then\n        new.slotlink := '''';\n    end if;\n    return new;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_chkslotlink"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_chkslotlink"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_chkslotlink"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_chkslotlink"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_chkslotlink"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "IFace"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_chkslotlink"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_chkslotlink"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "HSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_chkslotlink"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_chkslotlink"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PHone"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_chkslotlink"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * BEFORE INSERT or UPDATE on all slots with backlink"
  WHITESPACE "\n"
  COMMENT "-- *\t- Set backlink to empty string if NULL value given"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_chkbacklink"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nbegin\n    if new.backlink isnull then\n        new.backlink := '''';\n    end if;\n    return new;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_chkbacklink"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_chkbacklink"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_chkbacklink"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_chkbacklink"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_chkbacklink"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_chkbacklink"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * BEFORE UPDATE on PSlot"
  WHITESPACE "\n"
  COMMENT "-- *\t- do delete/insert instead of update if name changes"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_pslot_bu"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nbegin\n    if new.slotname != old.slotname then\n        delete from PSlot where slotname = old.slotname;\n\tinsert into PSlot (\n\t\t    slotname,\n\t\t    pfname,\n\t\t    slotlink,\n\t\t    backlink\n\t\t) values (\n\t\t    new.slotname,\n\t\t    new.pfname,\n\t\t    new.slotlink,\n\t\t    new.backlink\n\t\t);\n        return null;\n    end if;\n    return new;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_pslot_bu"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_pslot_bu"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * BEFORE UPDATE on WSlot"
  WHITESPACE "\n"
  COMMENT "-- *\t- do delete/insert instead of update if name changes"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_wslot_bu"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nbegin\n    if new.slotname != old.slotname then\n        delete from WSlot where slotname = old.slotname;\n\tinsert into WSlot (\n\t\t    slotname,\n\t\t    roomno,\n\t\t    slotlink,\n\t\t    backlink\n\t\t) values (\n\t\t    new.slotname,\n\t\t    new.roomno,\n\t\t    new.slotlink,\n\t\t    new.backlink\n\t\t);\n        return null;\n    end if;\n    return new;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_wslot_bu"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_Wslot_bu"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * BEFORE UPDATE on PLine"
  WHITESPACE "\n"
  COMMENT "-- *\t- do delete/insert instead of update if name changes"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_pline_bu"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nbegin\n    if new.slotname != old.slotname then\n        delete from PLine where slotname = old.slotname;\n\tinsert into PLine (\n\t\t    slotname,\n\t\t    phonenumber,\n\t\t    comment,\n\t\t    backlink\n\t\t) values (\n\t\t    new.slotname,\n\t\t    new.phonenumber,\n\t\t    new.comment,\n\t\t    new.backlink\n\t\t);\n        return null;\n    end if;\n    return new;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_pline_bu"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_pline_bu"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * BEFORE UPDATE on IFace"
  WHITESPACE "\n"
  COMMENT "-- *\t- do delete/insert instead of update if name changes"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_iface_bu"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nbegin\n    if new.slotname != old.slotname then\n        delete from IFace where slotname = old.slotname;\n\tinsert into IFace (\n\t\t    slotname,\n\t\t    sysname,\n\t\t    ifname,\n\t\t    slotlink\n\t\t) values (\n\t\t    new.slotname,\n\t\t    new.sysname,\n\t\t    new.ifname,\n\t\t    new.slotlink\n\t\t);\n        return null;\n    end if;\n    return new;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_iface_bu"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "IFace"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_iface_bu"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * BEFORE UPDATE on HSlot"
  WHITESPACE "\n"
  COMMENT "-- *\t- do delete/insert instead of update if name changes"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_hslot_bu"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nbegin\n    if new.slotname != old.slotname or new.hubname != old.hubname then\n        delete from HSlot where slotname = old.slotname;\n\tinsert into HSlot (\n\t\t    slotname,\n\t\t    hubname,\n\t\t    slotno,\n\t\t    slotlink\n\t\t) values (\n\t\t    new.slotname,\n\t\t    new.hubname,\n\t\t    new.slotno,\n\t\t    new.slotlink\n\t\t);\n        return null;\n    end if;\n    return new;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_hslot_bu"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "HSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_hslot_bu"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * BEFORE UPDATE on PHone"
  WHITESPACE "\n"
  COMMENT "-- *\t- do delete/insert instead of update if name changes"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_phone_bu"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nbegin\n    if new.slotname != old.slotname then\n        delete from PHone where slotname = old.slotname;\n\tinsert into PHone (\n\t\t    slotname,\n\t\t    comment,\n\t\t    slotlink\n\t\t) values (\n\t\t    new.slotname,\n\t\t    new.comment,\n\t\t    new.slotlink\n\t\t);\n        return null;\n    end if;\n    return new;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_phone_bu"
    WHITESPACE " "
    BEFORE_KW "before"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PHone"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_phone_bu"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * AFTER INSERT or UPDATE or DELETE on slot with backlink"
  WHITESPACE "\n"
  COMMENT "-- *\t- Ensure that the opponent correctly points back to us"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_backlink_a"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\ndeclare\n    dummy\tinteger;\nbegin\n    if tg_op = ''INSERT'' then\n        if new.backlink != '''' then\n\t    dummy := tg_backlink_set(new.backlink, new.slotname);\n\tend if;\n\treturn new;\n    end if;\n    if tg_op = ''UPDATE'' then\n        if new.backlink != old.backlink then\n\t    if old.backlink != '''' then\n\t        dummy := tg_backlink_unset(old.backlink, old.slotname);\n\t    end if;\n\t    if new.backlink != '''' then\n\t        dummy := tg_backlink_set(new.backlink, new.slotname);\n\t    end if;\n\telse\n\t    if new.slotname != old.slotname and new.backlink != '''' then\n\t        dummy := tg_slotlink_set(new.backlink, new.slotname);\n\t    end if;\n\tend if;\n\treturn new;\n    end if;\n    if tg_op = ''DELETE'' then\n        if old.backlink != '''' then\n\t    dummy := tg_backlink_unset(old.backlink, old.slotname);\n\tend if;\n\treturn old;\n    end if;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_backlink_a"
    WHITESPACE " "
    AFTER_KW "after"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    DELETE_KW "delete"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_backlink_a"
      ARG_LIST
        L_PAREN "("
        LITERAL
          STRING "'PS'"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_backlink_a"
    WHITESPACE " "
    AFTER_KW "after"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    DELETE_KW "delete"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_backlink_a"
      ARG_LIST
        L_PAREN "("
        LITERAL
          STRING "'WS'"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_backlink_a"
    WHITESPACE " "
    AFTER_KW "after"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    DELETE_KW "delete"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_backlink_a"
      ARG_LIST
        L_PAREN "("
        LITERAL
          STRING "'PL'"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * Support function to set the opponents backlink field"
  WHITESPACE "\n"
  COMMENT "-- * if it does not already point to the requested slot"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_backlink_set"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "myname"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "bpchar"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "blname"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "bpchar"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "integer"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\ndeclare\n    mytype\tchar(2);\n    link\tchar(4);\n    rec\t\trecord;\nbegin\n    mytype := substr(myname, 1, 2);\n    link := mytype || substr(blname, 1, 2);\n    if link = ''PLPL'' then\n        raise exception\n\t\t''backlink between two phone lines does not make sense'';\n    end if;\n    if link in (''PLWS'', ''WSPL'') then\n        raise exception\n\t\t''direct link of phone line to wall slot not permitted'';\n    end if;\n    if mytype = ''PS'' then\n        select into rec * from PSlot where slotname = myname;\n\tif not found then\n\t    raise exception ''% does not exist'', myname;\n\tend if;\n\tif rec.backlink != blname then\n\t    update PSlot set backlink = blname where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\n    if mytype = ''WS'' then\n        select into rec * from WSlot where slotname = myname;\n\tif not found then\n\t    raise exception ''% does not exist'', myname;\n\tend if;\n\tif rec.backlink != blname then\n\t    update WSlot set backlink = blname where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\n    if mytype = ''PL'' then\n        select into rec * from PLine where slotname = myname;\n\tif not found then\n\t    raise exception ''% does not exist'', myname;\n\tend if;\n\tif rec.backlink != blname then\n\t    update PLine set backlink = blname where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\n    raise exception ''illegal backlink beginning with %'', mytype;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * Support function to clear out the backlink field if"
  WHITESPACE "\n"
  COMMENT "-- * it still points to specific slot"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_backlink_unset"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "bpchar"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "bpchar"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "integer"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\ndeclare\n    myname\talias for $1;\n    blname\talias for $2;\n    mytype\tchar(2);\n    rec\t\trecord;\nbegin\n    mytype := substr(myname, 1, 2);\n    if mytype = ''PS'' then\n        select into rec * from PSlot where slotname = myname;\n\tif not found then\n\t    return 0;\n\tend if;\n\tif rec.backlink = blname then\n\t    update PSlot set backlink = '''' where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\n    if mytype = ''WS'' then\n        select into rec * from WSlot where slotname = myname;\n\tif not found then\n\t    return 0;\n\tend if;\n\tif rec.backlink = blname then\n\t    update WSlot set backlink = '''' where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\n    if mytype = ''PL'' then\n        select into rec * from PLine where slotname = myname;\n\tif not found then\n\t    return 0;\n\tend if;\n\tif rec.backlink = blname then\n\t    update PLine set backlink = '''' where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\nend\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * AFTER INSERT or UPDATE or DELETE on slot with slotlink"
  WHITESPACE "\n"
  COMMENT "-- *\t- Ensure that the opponent correctly points back to us"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_slotlink_a"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\ndeclare\n    dummy\tinteger;\nbegin\n    if tg_op = ''INSERT'' then\n        if new.slotlink != '''' then\n\t    dummy := tg_slotlink_set(new.slotlink, new.slotname);\n\tend if;\n\treturn new;\n    end if;\n    if tg_op = ''UPDATE'' then\n        if new.slotlink != old.slotlink then\n\t    if old.slotlink != '''' then\n\t        dummy := tg_slotlink_unset(old.slotlink, old.slotname);\n\t    end if;\n\t    if new.slotlink != '''' then\n\t        dummy := tg_slotlink_set(new.slotlink, new.slotname);\n\t    end if;\n\telse\n\t    if new.slotname != old.slotname and new.slotlink != '''' then\n\t        dummy := tg_slotlink_set(new.slotlink, new.slotname);\n\t    end if;\n\tend if;\n\treturn new;\n    end if;\n    if tg_op = ''DELETE'' then\n        if old.slotlink != '''' then\n\t    dummy := tg_slotlink_unset(old.slotlink, old.slotname);\n\tend if;\n\treturn old;\n    end if;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_slotlink_a"
    WHITESPACE " "
    AFTER_KW "after"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    DELETE_KW "delete"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_slotlink_a"
      ARG_LIST
        L_PAREN "("
        LITERAL
          STRING "'PS'"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_slotlink_a"
    WHITESPACE " "
    AFTER_KW "after"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    DELETE_KW "delete"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_slotlink_a"
      ARG_LIST
        L_PAREN "("
        LITERAL
          STRING "'WS'"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_slotlink_a"
    WHITESPACE " "
    AFTER_KW "after"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    DELETE_KW "delete"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "IFace"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_slotlink_a"
      ARG_LIST
        L_PAREN "("
        LITERAL
          STRING "'IF'"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_slotlink_a"
    WHITESPACE " "
    AFTER_KW "after"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    DELETE_KW "delete"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "HSlot"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_slotlink_a"
      ARG_LIST
        L_PAREN "("
        LITERAL
          STRING "'HS'"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "tg_slotlink_a"
    WHITESPACE " "
    AFTER_KW "after"
    WHITESPACE " "
    INSERT_KW "insert"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    UPDATE_KW "update"
    WHITESPACE " "
    OR_KW "or"
    WHITESPACE " "
    DELETE_KW "delete"
    WHITESPACE "\n    "
    ON_KW "on"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PHone"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    EACH_KW "each"
    WHITESPACE " "
    ROW_KW "row"
    WHITESPACE " "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "tg_slotlink_a"
      ARG_LIST
        L_PAREN "("
        LITERAL
          STRING "'PH'"
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * Support function to set the opponents slotlink field"
  WHITESPACE "\n"
  COMMENT "-- * if it does not already point to the requested slot"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_slotlink_set"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "bpchar"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "bpchar"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "integer"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\ndeclare\n    myname\talias for $1;\n    blname\talias for $2;\n    mytype\tchar(2);\n    link\tchar(4);\n    rec\t\trecord;\nbegin\n    mytype := substr(myname, 1, 2);\n    link := mytype || substr(blname, 1, 2);\n    if link = ''PHPH'' then\n        raise exception\n\t\t''slotlink between two phones does not make sense'';\n    end if;\n    if link in (''PHHS'', ''HSPH'') then\n        raise exception\n\t\t''link of phone to hub does not make sense'';\n    end if;\n    if link in (''PHIF'', ''IFPH'') then\n        raise exception\n\t\t''link of phone to hub does not make sense'';\n    end if;\n    if link in (''PSWS'', ''WSPS'') then\n        raise exception\n\t\t''slotlink from patchslot to wallslot not permitted'';\n    end if;\n    if mytype = ''PS'' then\n        select into rec * from PSlot where slotname = myname;\n\tif not found then\n\t    raise exception ''% does not exist'', myname;\n\tend if;\n\tif rec.slotlink != blname then\n\t    update PSlot set slotlink = blname where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\n    if mytype = ''WS'' then\n        select into rec * from WSlot where slotname = myname;\n\tif not found then\n\t    raise exception ''% does not exist'', myname;\n\tend if;\n\tif rec.slotlink != blname then\n\t    update WSlot set slotlink = blname where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\n    if mytype = ''IF'' then\n        select into rec * from IFace where slotname = myname;\n\tif not found then\n\t    raise exception ''% does not exist'', myname;\n\tend if;\n\tif rec.slotlink != blname then\n\t    update IFace set slotlink = blname where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\n    if mytype = ''HS'' then\n        select into rec * from HSlot where slotname = myname;\n\tif not found then\n\t    raise exception ''% does not exist'', myname;\n\tend if;\n\tif rec.slotlink != blname then\n\t    update HSlot set slotlink = blname where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\n    if mytype = ''PH'' then\n        select into rec * from PHone where slotname = myname;\n\tif not found then\n\t    raise exception ''% does not exist'', myname;\n\tend if;\n\tif rec.slotlink != blname then\n\t    update PHone set slotlink = blname where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\n    raise exception ''illegal slotlink beginning with %'', mytype;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * Support function to clear out the slotlink field if"
  WHITESPACE "\n"
  COMMENT "-- * it still points to specific slot"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tg_slotlink_unset"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "bpchar"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "bpchar"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "integer"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\ndeclare\n    myname\talias for $1;\n    blname\talias for $2;\n    mytype\tchar(2);\n    rec\t\trecord;\nbegin\n    mytype := substr(myname, 1, 2);\n    if mytype = ''PS'' then\n        select into rec * from PSlot where slotname = myname;\n\tif not found then\n\t    return 0;\n\tend if;\n\tif rec.slotlink = blname then\n\t    update PSlot set slotlink = '''' where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\n    if mytype = ''WS'' then\n        select into rec * from WSlot where slotname = myname;\n\tif not found then\n\t    return 0;\n\tend if;\n\tif rec.slotlink = blname then\n\t    update WSlot set slotlink = '''' where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\n    if mytype = ''IF'' then\n        select into rec * from IFace where slotname = myname;\n\tif not found then\n\t    return 0;\n\tend if;\n\tif rec.slotlink = blname then\n\t    update IFace set slotlink = '''' where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\n    if mytype = ''HS'' then\n        select into rec * from HSlot where slotname = myname;\n\tif not found then\n\t    return 0;\n\tend if;\n\tif rec.slotlink = blname then\n\t    update HSlot set slotlink = '''' where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\n    if mytype = ''PH'' then\n        select into rec * from PHone where slotname = myname;\n\tif not found then\n\t    return 0;\n\tend if;\n\tif rec.slotlink = blname then\n\t    update PHone set slotlink = '''' where slotname = myname;\n\tend if;\n\treturn 0;\n    end if;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * Describe the backside of a patchfield slot"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pslot_backlink_view"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "bpchar"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\n<<outer>>\ndeclare\n    rec\t\trecord;\n    bltype\tchar(2);\n    retval\ttext;\nbegin\n    select into rec * from PSlot where slotname = $1;\n    if not found then\n        return '''';\n    end if;\n    if rec.backlink = '''' then\n        return ''-'';\n    end if;\n    bltype := substr(rec.backlink, 1, 2);\n    if bltype = ''PL'' then\n        declare\n\t    rec\t\trecord;\n\tbegin\n\t    select into rec * from PLine where slotname = \"outer\".rec.backlink;\n\t    retval := ''Phone line '' || trim(rec.phonenumber);\n\t    if rec.comment != '''' then\n\t        retval := retval || '' ('';\n\t\tretval := retval || rec.comment;\n\t\tretval := retval || '')'';\n\t    end if;\n\t    return retval;\n\tend;\n    end if;\n    if bltype = ''WS'' then\n        select into rec * from WSlot where slotname = rec.backlink;\n\tretval := trim(rec.slotname) || '' in room '';\n\tretval := retval || trim(rec.roomno);\n\tretval := retval || '' -> '';\n\treturn retval || wslot_slotlink_view(rec.slotname);\n    end if;\n    return rec.backlink;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * Describe the front of a patchfield slot"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pslot_slotlink_view"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "bpchar"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\ndeclare\n    psrec\trecord;\n    sltype\tchar(2);\n    retval\ttext;\nbegin\n    select into psrec * from PSlot where slotname = $1;\n    if not found then\n        return '''';\n    end if;\n    if psrec.slotlink = '''' then\n        return ''-'';\n    end if;\n    sltype := substr(psrec.slotlink, 1, 2);\n    if sltype = ''PS'' then\n\tretval := trim(psrec.slotlink) || '' -> '';\n\treturn retval || pslot_backlink_view(psrec.slotlink);\n    end if;\n    if sltype = ''HS'' then\n        retval := comment from Hub H, HSlot HS\n\t\t\twhere HS.slotname = psrec.slotlink\n\t\t\t  and H.name = HS.hubname;\n        retval := retval || '' slot '';\n\tretval := retval || slotno::text from HSlot\n\t\t\twhere slotname = psrec.slotlink;\n\treturn retval;\n    end if;\n    return psrec.slotlink;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * Describe the front of a wall connector slot"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "wslot_slotlink_view"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "bpchar"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\ndeclare\n    rec\t\trecord;\n    sltype\tchar(2);\n    retval\ttext;\nbegin\n    select into rec * from WSlot where slotname = $1;\n    if not found then\n        return '''';\n    end if;\n    if rec.slotlink = '''' then\n        return ''-'';\n    end if;\n    sltype := substr(rec.slotlink, 1, 2);\n    if sltype = ''PH'' then\n        select into rec * from PHone where slotname = rec.slotlink;\n\tretval := ''Phone '' || trim(rec.slotname);\n\tif rec.comment != '''' then\n\t    retval := retval || '' ('';\n\t    retval := retval || rec.comment;\n\t    retval := retval || '')'';\n\tend if;\n\treturn retval;\n    end if;\n    if sltype = ''IF'' then\n\tdeclare\n\t    syrow\tSystem%RowType;\n\t    ifrow\tIFace%ROWTYPE;\n        begin\n\t    select into ifrow * from IFace where slotname = rec.slotlink;\n\t    select into syrow * from System where name = ifrow.sysname;\n\t    retval := syrow.name || '' IF '';\n\t    retval := retval || ifrow.ifname;\n\t    if syrow.comment != '''' then\n\t        retval := retval || '' ('';\n\t\tretval := retval || syrow.comment;\n\t\tretval := retval || '')'';\n\t    end if;\n\t    return retval;\n\tend;\n    end if;\n    return rec.slotlink;\nend;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n\n\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  COMMENT "-- * View of a patchfield describing backside and patches"
  WHITESPACE "\n"
  COMMENT "-- ************************************************************"
  WHITESPACE "\n"
  CREATE_VIEW_STMT
    CREATE_KW "create"
    WHITESPACE " "
    VIEW_KW "view"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "Pfield_v1"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "select"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            FIELD_EXPR
              NAME_REF
                IDENT "PF"
              DOT "."
              NAME_REF
                IDENT "pfname"
          COMMA ","
          WHITESPACE " "
          TARGET
            FIELD_EXPR
              NAME_REF
                IDENT "PF"
              DOT "."
              NAME_REF
                IDENT "slotname"
          COMMA ","
          WHITESPACE "\n\t"
          TARGET
            CALL_EXPR
              NAME_REF
                IDENT "pslot_backlink_view"
              ARG_LIST
                L_PAREN "("
                FIELD_EXPR
                  NAME_REF
                    IDENT "PF"
                  DOT "."
                  NAME_REF
                    IDENT "slotname"
                R_PAREN ")"
            WHITESPACE " "
            AS_KW "as"
            WHITESPACE " "
            NAME
              IDENT "backside"
          COMMA ","
          WHITESPACE "\n\t"
          TARGET
            CALL_EXPR
              NAME_REF
                IDENT "pslot_slotlink_view"
              ARG_LIST
                L_PAREN "("
                FIELD_EXPR
                  NAME_REF
                    IDENT "PF"
                  DOT "."
                  NAME_REF
                    IDENT "slotname"
                R_PAREN ")"
            WHITESPACE " "
            AS_KW "as"
            WHITESPACE " "
            NAME
              IDENT "patch"
      WHITESPACE "\n    "
      FROM_CLAUSE
        FROM_KW "from"
        WHITESPACE " "
        NAME_REF
          IDENT "PSlot"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "PF"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- First we build the house - so we create the rooms"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Room"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'001'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Entrance'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Room"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'002'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Office'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Room"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'003'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Office'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Room"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'004'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Technical'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Room"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'101'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Office'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Room"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'102'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Conference'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Room"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'103'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Restroom'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Room"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'104'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Technical'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Room"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'105'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Office'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Room"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'106'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Office'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Second we install the wall connectors"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.001.1a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'001'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.001.1b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'001'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.001.2a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'001'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.001.2b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'001'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.001.3a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'001'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.001.3b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'001'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.002.1a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'002'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.002.1b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'002'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.002.2a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'002'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.002.2b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'002'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.002.3a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'002'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.002.3b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'002'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.003.1a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'003'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.003.1b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'003'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.003.2a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'003'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.003.2b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'003'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.003.3a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'003'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.003.3b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'003'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.101.1a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'101'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.101.1b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'101'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.101.2a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'101'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.101.2b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'101'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.101.3a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'101'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.101.3b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'101'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.102.1a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'102'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.102.1b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'102'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.102.2a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'102'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.102.2b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'102'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.102.3a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'102'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.102.3b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'102'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.105.1a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'105'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.105.1b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'105'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.105.2a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'105'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.105.2b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'105'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.105.3a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'105'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.105.3b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'105'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.106.1a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'106'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.106.1b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'106'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.106.2a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'106'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.106.2b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'106'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.106.3a'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'106'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'WS.106.3b'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'106'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Now create the patch fields and their slots"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PField"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Wallslots basement'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- The cables for these will be made later, so they are unconnected for now"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.a1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.a2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.a3'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.a4'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.a5'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.a6'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- These are already wired to the wall connectors"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.b1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.002.1a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.b2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.002.1b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.b3'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.002.2a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.b4'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.002.2b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.b5'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.002.3a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.b6'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.002.3b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.c1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.003.1a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.c2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.003.1b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.c3'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.003.2a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.c4'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.003.2b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.c5'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.003.3a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.c6'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.003.3b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- This patchfield will be renamed later into PF0_2 - so its"
  WHITESPACE "\n"
  COMMENT "-- slots references in pfname should follow"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PField"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PF0_X'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Phonelines basement'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.ta1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_X'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.ta2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_X'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.ta3'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_X'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.ta4'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_X'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.ta5'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_X'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.ta6'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_X'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.tb1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_X'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.tb2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_X'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.tb3'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_X'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.tb4'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_X'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.tb5'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_X'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.base.tb6'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF0_X'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PField"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Wallslots first floor'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.a1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.101.1a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.a2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.101.1b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.a3'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.101.2a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.a4'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.101.2b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.a5'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.101.3a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.a6'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.101.3b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.b1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.102.1a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.b2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.102.1b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.b3'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.102.2a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.b4'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.102.2b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.b5'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.102.3a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.b6'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.102.3b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.c1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.105.1a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.c2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.105.1b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.c3'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.105.2a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.c4'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.105.2b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.c5'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.105.3a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.c6'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.105.3b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.d1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.106.1a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.d2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.106.1b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.d3'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.106.2a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.d4'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.106.2b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.d5'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.106.3a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.d6'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.106.3b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Now we wire the wall connectors 1a-2a in room 001 to the"
  WHITESPACE "\n"
  COMMENT "-- patchfield. In the second update we make an error, and"
  WHITESPACE "\n"
  COMMENT "-- correct it after"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "backlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'WS.001.1a'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a1'"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "backlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'WS.001.1b'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a3'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "WSlot"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "roomno"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'001'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "PSlot"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        CUSTOM_OP
          TILDE "~"
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "backlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'WS.001.2a'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a3'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "WSlot"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "roomno"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'001'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "PSlot"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        CUSTOM_OP
          TILDE "~"
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "backlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'WS.001.1b'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a2'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "WSlot"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "roomno"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'001'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "PSlot"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        CUSTOM_OP
          TILDE "~"
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Same procedure for 2b-3b but this time updating the WSlot instead"
  WHITESPACE "\n"
  COMMENT "-- of the PSlot. Due to the triggers the result is the same:"
  WHITESPACE "\n"
  COMMENT "-- WSlot and corresponding PSlot point to each other."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "backlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'PS.base.a4'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'WS.001.2b'"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "backlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'PS.base.a6'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'WS.001.3a'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "WSlot"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "roomno"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'001'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "PSlot"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        CUSTOM_OP
          TILDE "~"
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "backlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'PS.base.a6'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'WS.001.3b'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "WSlot"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "roomno"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'001'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "PSlot"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        CUSTOM_OP
          TILDE "~"
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "WSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "backlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'PS.base.a5'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'WS.001.3a'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "WSlot"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "roomno"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'001'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "PSlot"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        CUSTOM_OP
          TILDE "~"
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PField"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PF1_2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Phonelines first floor'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.ta1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.ta2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.ta3'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.ta4'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.ta5'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.ta6'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.tb1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.tb2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.tb3'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.tb4'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.tb5'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PS.first.tb6'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PF1_2'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Fix the wrong name for patchfield PF0_2"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PField"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      NAME_KW "name"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'PF0_2'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          NAME_KW "name"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PF0_X'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "PSlot"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "WSlot"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Install the central phone system and create the phone numbers."
  WHITESPACE "\n"
  COMMENT "-- They are wired on insert to the patchfields. Again the"
  WHITESPACE "\n"
  COMMENT "-- triggers automatically tell the PSlots to update their"
  WHITESPACE "\n"
  COMMENT "-- backlink field."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.001'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-0'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Central call'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.base.ta1'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.002'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-101'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.base.ta2'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.003'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-102'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.base.ta3'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.004'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-103'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.base.ta5'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.005'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-104'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.base.ta6'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.006'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-106'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.base.tb2'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.007'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-108'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.base.tb3'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.008'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-109'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.base.tb4'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.009'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-121'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.base.tb5'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.010'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-122'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.base.tb6'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.015'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-134'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.first.ta1'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.016'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-137'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.first.ta3'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.017'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-139'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.first.ta4'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.018'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-362'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.first.tb1'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.019'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-363'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.first.tb2'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.020'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-364'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.first.tb3'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.021'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-365'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.first.tb5'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.022'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-367'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.first.tb6'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.028'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-501'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Fax entrance'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.base.ta2'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PLine"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PL.029'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'-502'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Fax first floor'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PS.first.ta1'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Buy some phones, plug them into the wall and patch the"
  WHITESPACE "\n"
  COMMENT "-- phone lines to the corresponding patchfield slots."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PHone"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PH.hc001'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Hicom standard'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.001.1a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "slotlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'PS.base.ta1'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a1'"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PHone"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PH.hc002'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Hicom standard'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.002.1a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "slotlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'PS.base.ta5'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.b1'"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PHone"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PH.hc003'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Hicom standard'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.002.2a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "slotlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'PS.base.tb2'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.b3'"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PHone"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PH.fax001'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Canon fax'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.001.2a'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "slotlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'PS.base.ta2'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a3'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Install a hub at one of the patchfields, plug a computers"
  WHITESPACE "\n"
  COMMENT "-- ethernet interface into the wall and patch it to the hub."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "Hub"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'base.hub1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Patchfield PF0_1 hub'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        INT_NUMBER "16"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          SYSTEM_KW "System"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'orion'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'PC'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "IFace"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'IF'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'orion'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'eth0'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'WS.002.1b'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "slotlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'HS.base.hub1.1'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.b2'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Now we take a look at the patchfield"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "PField_v1"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "pfname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PF0_1'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "PField_v1"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "pfname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PF0_2'"
    WHITESPACE " "
    ORDER_BY_CLAUSE
      ORDER_KW "order"
      WHITESPACE " "
      BY_KW "by"
      WHITESPACE " "
      NAME_REF
        IDENT "slotname"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Finally we want errors"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PField"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'PF1_1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'should fail due to unique index'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "backlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'WS.not.there'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a1'"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "backlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'XX.illegal'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a1'"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "slotlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'PS.not.there'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a1'"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "update"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "PSlot"
    WHITESPACE " "
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "slotlink"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'XX.illegal'"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "slotname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'PS.base.a1'"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "HSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'HS'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'base.hub1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "HSlot"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'HS'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'base.hub1'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        INT_NUMBER "20"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DELETE_STMT
    DELETE_KW "delete"
    WHITESPACE " "
    FROM_KW "from"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "HSlot"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "IFace"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'IF'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'notthere'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'eth0'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "IFace"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'IF'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'orion'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'ethernet_interface_name_too_long'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "''"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- The following tests are unrelated to the scenario outlined above;"
  WHITESPACE "\n"
  COMMENT "-- they merely exercise specific parts of PL/pgSQL"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test recursion, per bug report 7-Sep-01"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "recursion_test"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'\nDECLARE rslt text;\nBEGIN\n    IF $1 <= 0 THEN\n        rslt = CAST($2 AS TEXT);\n    ELSE\n        rslt = CAST($1 AS TEXT) || '','' || recursion_test($1 - 1, $2);\n    END IF;\n    RETURN rslt;\nEND;'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "recursion_test"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "4"
              COMMA ","
              LITERAL
                INT_NUMBER "3"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    COMMENT "--"
    WHITESPACE "\n"
    COMMENT "-- Test the FOUND magic variable"
    WHITESPACE "\n"
    COMMENT "--"
    WHITESPACE "\n"
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "found_test_tbl"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_found"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n  "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              BOOLEAN_KW "boolean"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\n  declare\n  begin\n  insert into found_test_tbl values (1);\n  if FOUND then\n     insert into found_test_tbl values (2);\n  end if;\n\n  update found_test_tbl set a = 100 where a = 1;\n  if FOUND then\n    insert into found_test_tbl values (3);\n  end if;\n\n  delete from found_test_tbl where a = 9999; -- matches no rows\n  if not FOUND then\n    insert into found_test_tbl values (4);\n  end if;\n\n  for i in 1 .. 10 loop\n    -- no need to do anything\n  end loop;\n  if FOUND then\n    insert into found_test_tbl values (5);\n  end if;\n\n  -- never executes the loop\n  for i in 2 .. 1 loop\n    -- no need to do anything\n  end loop;\n  if not FOUND then\n    insert into found_test_tbl values (6);\n  end if;\n  return true;\n  end;'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_found"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "found_test_tbl"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test set-returning functions for PL/pgSQL"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_table_func_rec"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "found_test_tbl"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nDECLARE\n\trec RECORD;\nBEGIN\n\tFOR rec IN select * from found_test_tbl LOOP\n\t\tRETURN NEXT rec;\n\tEND LOOP;\n\tRETURN;\nEND;'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "test_table_func_rec"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_table_func_row"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "found_test_tbl"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nDECLARE\n\trow found_test_tbl%ROWTYPE;\nBEGIN\n\tFOR row IN select * from found_test_tbl LOOP\n\t\tRETURN NEXT row;\n\tEND LOOP;\n\tRETURN;\nEND;'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "test_table_func_row"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_ret_set_scalar"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nDECLARE\n\ti int;\nBEGIN\n\tFOR i IN $1 .. $2 LOOP\n\t\tRETURN NEXT i + 1;\n\tEND LOOP;\n\tRETURN;\nEND;'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "test_ret_set_scalar"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "1"
          COMMA ","
          LITERAL
            INT_NUMBER "10"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_ret_set_rec_dyn"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "record"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nDECLARE\n\tretval RECORD;\nBEGIN\n\tIF $1 > 10 THEN\n\t\tSELECT INTO retval 5, 10, 15;\n\t\tRETURN NEXT retval;\n\t\tRETURN NEXT retval;\n\tELSE\n\t\tSELECT INTO retval 50, 5::numeric, ''xxx''::text;\n\t\tRETURN NEXT retval;\n\t\tRETURN NEXT retval;\n\tEND IF;\n\tRETURN;\nEND;'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "test_ret_set_rec_dyn"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "1500"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        AS_KW "AS"
        WHITESPACE " "
        COLUMN_LIST
          L_PAREN "("
          COLUMN
            NAME
              IDENT "a"
            WHITESPACE " "
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    INT_KW "int"
          COMMA ","
          WHITESPACE " "
          COLUMN
            NAME
              IDENT "b"
            WHITESPACE " "
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    INT_KW "int"
          COMMA ","
          WHITESPACE " "
          COLUMN
            NAME
              IDENT "c"
            WHITESPACE " "
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    INT_KW "int"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "test_ret_set_rec_dyn"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "5"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        AS_KW "AS"
        WHITESPACE " "
        COLUMN_LIST
          L_PAREN "("
          COLUMN
            NAME
              IDENT "a"
            WHITESPACE " "
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    INT_KW "int"
          COMMA ","
          WHITESPACE " "
          COLUMN
            NAME
              IDENT "b"
            WHITESPACE " "
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    NUMERIC_KW "numeric"
          COMMA ","
          WHITESPACE " "
          COLUMN
            NAME
              IDENT "c"
            WHITESPACE " "
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    TEXT_KW "text"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_ret_rec_dyn"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "record"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nDECLARE\n\tretval RECORD;\nBEGIN\n\tIF $1 > 10 THEN\n\t\tSELECT INTO retval 5, 10, 15;\n\t\tRETURN retval;\n\tELSE\n\t\tSELECT INTO retval 50, 5::numeric, ''xxx''::text;\n\t\tRETURN retval;\n\tEND IF;\nEND;'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "test_ret_rec_dyn"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "1500"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        AS_KW "AS"
        WHITESPACE " "
        COLUMN_LIST
          L_PAREN "("
          COLUMN
            NAME
              IDENT "a"
            WHITESPACE " "
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    INT_KW "int"
          COMMA ","
          WHITESPACE " "
          COLUMN
            NAME
              IDENT "b"
            WHITESPACE " "
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    INT_KW "int"
          COMMA ","
          WHITESPACE " "
          COLUMN
            NAME
              IDENT "c"
            WHITESPACE " "
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    INT_KW "int"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "test_ret_rec_dyn"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "5"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        AS_KW "AS"
        WHITESPACE " "
        COLUMN_LIST
          L_PAREN "("
          COLUMN
            NAME
              IDENT "a"
            WHITESPACE " "
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    INT_KW "int"
          COMMA ","
          WHITESPACE " "
          COLUMN
            NAME
              IDENT "b"
            WHITESPACE " "
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    NUMERIC_KW "numeric"
          COMMA ","
          WHITESPACE " "
          COLUMN
            NAME
              IDENT "c"
            WHITESPACE " "
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    TEXT_KW "text"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test some simple polymorphism cases."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyelement"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return x + 1;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "42"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              LITERAL
                FLOAT_NUMBER "4.5"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "point"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "3"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "4"
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail for lack of + operator"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyarray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return array[x + 1, x + 2];\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "42"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              LITERAL
                FLOAT_NUMBER "4.5"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyelement"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return x[1];\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  INT_NUMBER "2"
                COMMA ","
                LITERAL
                  INT_NUMBER "4"
                R_BRACK "]"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  FLOAT_NUMBER "4.5"
                COMMA ","
                WHITESPACE " "
                LITERAL
                  FLOAT_NUMBER "7.7"
                R_BRACK "]"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "stavalues1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_statistic"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail, can't infer element type"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyarray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return x;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  INT_NUMBER "2"
                COMMA ","
                LITERAL
                  INT_NUMBER "4"
                R_BRACK "]"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  FLOAT_NUMBER "4.5"
                COMMA ","
                WHITESPACE " "
                LITERAL
                  FLOAT_NUMBER "7.7"
                R_BRACK "]"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "stavalues1"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_statistic"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail, can't infer element type"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- fail, can't infer type:"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyrange"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return array[x + 1, x + 2];\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyrange"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anyarray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return array[lower(x), upper(x)];\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "42"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "49"
                  R_PAREN ")"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "float8range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    FLOAT_NUMBER "4.5"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    FLOAT_NUMBER "7.8"
                  R_PAREN ")"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyrange"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblearray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return array[x, y];\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "4"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FLOAT_NUMBER "4.5"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblerange"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "z"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblearray"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return array[lower(x), upper(x), y, z];\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "42"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "49"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "11"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  INT_NUMBER "2"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        SMALLINT_KW "smallint"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "float8range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    FLOAT_NUMBER "4.5"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    FLOAT_NUMBER "7.8"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FLOAT_NUMBER "7.8"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  INT_NUMBER "11"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        REAL_KW "real"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "42"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "49"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "11"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FLOAT_NUMBER "4.5"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "fail"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- range type doesn't fit"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblerange"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "z"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- fail, can't infer type:"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblerange"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return array[x + 1, x + 2];\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblerange"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblearray"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "anycompatiblerange"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return x;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "int4range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "42"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "49"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  INT_NUMBER "11"
                R_BRACK "]"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            INT_KW "int"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "float8range"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    FLOAT_NUMBER "4.5"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    FLOAT_NUMBER "7.8"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  INT_NUMBER "7"
                R_BRACK "]"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "num"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblerange"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblearray"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      COMMA ","
      WHITESPACE "\n                   "
      PARAM
        NAME
          IDENT "c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "d"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE "\n                   "
      PARAM
        PARAM_OUT
          OUT_KW "OUT"
        WHITESPACE " "
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "OUT"
        WHITESPACE " "
        NAME
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblearray"
      R_PAREN ")"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  x := a || b;\n  y := array[c, d];\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "y"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "y"
              R_PAREN ")"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "f1"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "2"
            R_BRACK "]"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "42"
          COMMA ","
          WHITESPACE " "
          LITERAL
            FLOAT_NUMBER "34.5"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "y"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "y"
              R_PAREN ")"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "f1"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "2"
            R_BRACK "]"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "point"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "2"
              R_PAREN ")"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "point"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "3"
              COMMA ","
              LITERAL
                INT_NUMBER "4"
              R_PAREN ")"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "y"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "y"
              R_PAREN ")"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "f1"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          LITERAL
            STRING "'{1,2}'"
          COMMA ","
          WHITESPACE " "
          CALL_EXPR
            NAME_REF
              IDENT "point"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "2"
              R_PAREN ")"
          COMMA ","
          WHITESPACE " "
          LITERAL
            STRING "'(3,4)'"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "x"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "x"
              R_PAREN ")"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "y"
        COMMA ","
        WHITESPACE " "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_typeof"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "y"
              R_PAREN ")"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "f1"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "11"
          COMMA ","
          WHITESPACE " "
          ARRAY_EXPR
            ARRAY_KW "array"
            L_BRACK "["
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              FLOAT_NUMBER "2.2"
            R_BRACK "]"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "42"
          COMMA ","
          WHITESPACE " "
          LITERAL
            FLOAT_NUMBER "34.5"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      COMMA ","
      WHITESPACE "\n                 "
      PARAM
        NAME
          IDENT "c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "d"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test handling of OUT parameters, including polymorphic cases."
  WHITESPACE "\n"
  COMMENT "-- Note that RETURN is optional with OUT params; we try both ways."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  COMMENT "-- wrong way to do it:"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_IN
          IN_KW "in"
        WHITESPACE " "
        NAME
          IDENT "i"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "j"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return i+1;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_IN
          IN_KW "in"
        WHITESPACE " "
        NAME
          IDENT "i"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "j"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  j := i+1;\n  return;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "42"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "f1"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "42"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_INOUT
          INOUT_KW "inout"
        WHITESPACE " "
        NAME
          IDENT "i"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  i := i+1;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "42"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "f1"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "42"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_IN
          IN_KW "in"
        WHITESPACE " "
        NAME
          IDENT "i"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "j"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  j := i+1;\n  return next;\n  j := i+2;\n  return next;\n  return;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "f1"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "42"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_IN
          IN_KW "in"
        WHITESPACE " "
        NAME
          IDENT "i"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "j"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "k"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  j := i;\n  j := j+1;\n  k := 'foo';\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "42"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "f1"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "42"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_IN
          IN_KW "in"
        WHITESPACE " "
        NAME
          IDENT "i"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "j"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "k"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "record"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  j := i+1;\n  k := 'foo';\n  return next;\n  j := j+1;\n  k := 'foot';\n  return next;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "f1"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "42"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "duplic"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_IN
          IN_KW "in"
        WHITESPACE " "
        NAME
          IDENT "i"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "j"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyelement"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "k"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anyarray"
      R_PAREN ")"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  j := i;\n  k := array[j,j];\n  return;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "duplic"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "42"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "duplic"
        ARG_LIST
          L_PAREN "("
          CAST_EXPR
            LITERAL
              STRING "'foo'"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    TEXT_KW "text"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "duplic"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anyelement"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "duplic"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_IN
          IN_KW "in"
        WHITESPACE " "
        NAME
          IDENT "i"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblerange"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "j"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatible"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        NAME
          IDENT "k"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "anycompatiblearray"
      R_PAREN ")"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  j := lower(i);\n  k := array[lower(i),upper(i)];\n  return;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "duplic"
        ARG_LIST
          L_PAREN "("
          CALL_EXPR
            NAME_REF
              IDENT "int4range"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "42"
              COMMA ","
              LITERAL
                INT_NUMBER "49"
              R_PAREN ")"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "duplic"
        ARG_LIST
          L_PAREN "("
          CALL_EXPR
            NAME_REF
              IDENT "textrange"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'aaa'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'bbb'"
              R_PAREN ")"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "duplic"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "anycompatiblerange"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- test PERFORM"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "perform_test"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE "\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "INT"
      COMMA ","
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "b"
        WHITESPACE "\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "INT"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "perform_simple_func"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              BOOLEAN_KW "boolean"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nBEGIN\n\tIF $1 < 20 THEN\n\t\tINSERT INTO perform_test VALUES ($1, $1 + 10);\n\t\tRETURN TRUE;\n\tELSE\n\t\tRETURN FALSE;\n\tEND IF;\nEND;'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "perform_test_func"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          STRING "'\nBEGIN\n\tIF FOUND then\n\t\tINSERT INTO perform_test VALUES (100, 100);\n\tEND IF;\n\n\tPERFORM perform_simple_func(5);\n\n\tIF FOUND then\n\t\tINSERT INTO perform_test VALUES (100, 100);\n\tEND IF;\n\n\tPERFORM perform_simple_func(50);\n\n\tIF FOUND then\n\t\tINSERT INTO perform_test VALUES (100, 100);\n\tEND IF;\n\n\tRETURN;\nEND;'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "perform_test_func"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "perform_test"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_TABLE
    DROP_KW "drop"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "perform_test"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test proper snapshot handling in simple expressions"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TEMP_KW "temp"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "users"
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "login"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "id"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "serial"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "sp_id_user"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a_login"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x int;\nbegin\n  select into x id from users where login = a_login;\n  if found then return x; end if;\n  return 0;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        STABLE_KW "stable"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "users"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      L_PAREN "("
      LITERAL
        STRING "'user1'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "sp_id_user"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'user1'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "sp_id_user"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'userx'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "sp_add_user"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a_login"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare my_id_user int;\nbegin\n  my_id_user = sp_id_user( a_login );\n  IF  my_id_user > 0 THEN\n    RETURN -1;  -- error code for existing user\n  END IF;\n  INSERT INTO users ( login ) VALUES ( a_login );\n  my_id_user = sp_id_user( a_login );\n  IF  my_id_user = 0 THEN\n    RETURN -2;  -- error code for insertion failure\n  END IF;\n  RETURN my_id_user;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "sp_add_user"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'user1'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "sp_add_user"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'user2'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "sp_add_user"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'user2'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "sp_add_user"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'user3'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "sp_add_user"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'user3'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "sp_add_user"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "sp_id_user"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    COMMENT "--"
    WHITESPACE "\n"
    COMMENT "-- tests for refcursors"
    WHITESPACE "\n"
    COMMENT "--"
    WHITESPACE "\n"
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "rc_test"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COPY_STMT
    COPY_KW "copy"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "rc_test"
    WHITESPACE " "
    FROM_KW "from"
    WHITESPACE " "
    STDIN_KW "stdin"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    INT_NUMBER "5"
  WHITESPACE "\t"
  ERROR
    INT_NUMBER "10"
  WHITESPACE "\n"
  ERROR
    INT_NUMBER "50"
  WHITESPACE "\t"
  ERROR
    INT_NUMBER "100"
  WHITESPACE "\n"
  ERROR
    INT_NUMBER "500"
  WHITESPACE "\t"
  ERROR
    INT_NUMBER "1000"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "return_unnamed_refcursor"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "refcursor"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n    rc refcursor;\nbegin\n    open rc for select a from rc_test;\n    return rc;\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "use_refcursor"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "rc"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "refcursor"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n    rc refcursor;\n    x record;\nbegin\n    rc := return_unnamed_refcursor();\n    fetch next from rc into x;\n    return x.a;\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "use_refcursor"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "return_unnamed_refcursor"
                ARG_LIST
                  L_PAREN "("
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "return_refcursor"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "rc"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "refcursor"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "refcursor"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n    open rc for select a from rc_test;\n    return rc;\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "refcursor_test1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "refcursor"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "refcursor"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n    perform return_refcursor($1);\n    return $1;\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "refcursor_test1"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'test1'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  FETCH_STMT
    FETCH_KW "fetch"
    WHITESPACE " "
    NEXT_KW "next"
    WHITESPACE " "
    IN_KW "in"
    WHITESPACE " "
    NAME
      IDENT "test1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "refcursor_test1"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'test2'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  FETCH_STMT
    FETCH_KW "fetch"
    WHITESPACE " "
    ALL_KW "all"
    WHITESPACE " "
    FROM_KW "from"
    WHITESPACE " "
    NAME
      IDENT "test2"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMIT_STMT
    COMMIT_KW "commit"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail"
  WHITESPACE "\n"
  FETCH_STMT
    FETCH_KW "fetch"
    WHITESPACE " "
    NEXT_KW "next"
    WHITESPACE " "
    FROM_KW "from"
    WHITESPACE " "
    NAME
      IDENT "test1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "refcursor_test2"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              BOOLEAN_KW "boolean"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;\n    nonsense record;\nbegin\n    open c1($1, $2);\n    fetch c1 into nonsense;\n    close c1;\n    if found then\n        return true;\n    else\n        return false;\n    end if;\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "refcursor_test2"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "20000"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "20000"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "\"Should be false\""
        COMMA ","
        WHITESPACE "\n       "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "refcursor_test2"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "20"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "20"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "\"Should be true\""
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "constant_refcursor"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "refcursor"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n    rc constant refcursor;\nbegin\n    open rc for select a from rc_test;\n    return rc;\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "constant_refcursor"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- but it's okay like this"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "constant_refcursor"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "refcursor"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n    rc constant refcursor := 'my_cursor_name';\nbegin\n    open rc for select a from rc_test;\n    return rc;\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "constant_refcursor"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- tests for cursors with named parameter arguments"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "namedparmcursor_test1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              BOOLEAN_KW "boolean"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n    c1 cursor (param1 int, param12 int) for select * from rc_test where a > param1 and b > param12;\n    nonsense record;\nbegin\n    open c1(param12 := $2, param1 := $1);\n    fetch c1 into nonsense;\n    close c1;\n    if found then\n        return true;\n    else\n        return false;\n    end if;\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "namedparmcursor_test1"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "20000"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "20000"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "\"Should be false\""
        COMMA ","
        WHITESPACE "\n       "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "namedparmcursor_test1"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "20"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "20"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "\"Should be true\""
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- mixing named and positional argument notations"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "namedparmcursor_test2"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              BOOLEAN_KW "boolean"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;\n    nonsense record;\nbegin\n    open c1(param1 := $1, $2);\n    fetch c1 into nonsense;\n    close c1;\n    if found then\n        return true;\n    else\n        return false;\n    end if;\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "namedparmcursor_test2"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "20"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "20"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- mixing named and positional: param2 is given twice, once in named notation"
  WHITESPACE "\n"
  COMMENT "-- and second time in positional notation. Should throw an error at parse time"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "namedparmcursor_test3"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;\nbegin\n    open c1(param2 := 20, 21);\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- mixing named and positional: same as previous test, but param1 is duplicated"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "namedparmcursor_test4"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;\nbegin\n    open c1(20, param1 := 21);\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- duplicate named parameter, should throw an error at parse time"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "namedparmcursor_test5"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c1 cursor (p1 int, p2 int) for\n    select * from tenk1 where thousand = p1 and tenthous = p2;\nbegin\n  open c1 (p2 := 77, p2 := 42);\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- not enough parameters, should throw an error at parse time"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "namedparmcursor_test6"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c1 cursor (p1 int, p2 int) for\n    select * from tenk1 where thousand = p1 and tenthous = p2;\nbegin\n  open c1 (p2 := 77);\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- division by zero runtime error, the context given in the error message"
  WHITESPACE "\n"
  COMMENT "-- should be sensible"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "namedparmcursor_test7"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c1 cursor (p1 int, p2 int) for\n    select * from tenk1 where thousand = p1 and tenthous = p2;\nbegin\n  open c1 (p2 := 77, p1 := 42/0);\nend $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "namedparmcursor_test7"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- check that line comments work correctly within the argument list"
  WHITESPACE "\n"
  COMMENT "-- (this used to require a special hack in the code; it no longer does,"
  WHITESPACE "\n"
  COMMENT "-- but let's keep the test anyway)"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "namedparmcursor_test8"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "int4"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c1 cursor (p1 int, p2 int) for\n    select count(*) from tenk1 where thousand = p1 and tenthous = p2;\n  n int4;\nbegin\n  open c1 (77 -- test\n  , 42);\n  fetch c1 into n;\n  return n;\nend $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "namedparmcursor_test8"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- cursor parameter name can match plpgsql variable or unreserved keyword"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "namedparmcursor_test9"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "p1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "int4"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c1 cursor (p1 int, p2 int, debug int) for\n    select count(*) from tenk1 where thousand = p1 and tenthous = p2\n      and four = debug;\n  p2 int4 := 1006;\n  n int4;\nbegin\n  -- use both supported syntaxes for named arguments\n  open c1 (p1 := p1, p2 => p2, debug => 2);\n  fetch c1 into n;\n  return n;\nend $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "namedparmcursor_test9"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "6"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- tests for \"raise\" processing"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n    raise notice 'This message has too many parameters!', $1;\n    return $1;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test2"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n    raise notice 'This message has too few parameters: %, %, %', $1, $1;\n    return $1;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test3"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n    raise notice 'This message has no parameters (despite having %% signs in it)!';\n    return $1;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "raise_test3"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test re-RAISE inside a nested exception block.  This case is allowed"
  WHITESPACE "\n"
  COMMENT "-- by Oracle's PL/SQL but was handled differently by PG before 9.1."
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "reraise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nBEGIN\n   BEGIN\n       RAISE syntax_error;\n   EXCEPTION\n       WHEN syntax_error THEN\n           BEGIN\n               raise notice 'exception % thrown in inner block, reraising', sqlerrm;\n               RAISE;\n           EXCEPTION\n               WHEN OTHERS THEN\n                   raise notice 'RIGHT - exception % caught in inner block', sqlerrm;\n           END;\n   END;\nEXCEPTION\n   WHEN OTHERS THEN\n       raise notice 'WRONG - exception % caught in outer block', sqlerrm;\nEND;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "reraise_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- reject function definitions that contain malformed SQL queries at"
  WHITESPACE "\n"
  COMMENT "-- compile-time, where possible"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bad_sql1"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare a int;\nbegin\n    a := 5;\n    Johnny Yuma;\n    a := 10;\n    return a;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bad_sql2"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare r record;\nbegin\n    for r in select I fought the law, the law won LOOP\n        raise notice 'in loop';\n    end loop;\n    return 5;\nend;$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- a RETURN expression is mandatory, except for void-returning"
  WHITESPACE "\n"
  COMMENT "-- functions, where it is not allowed"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "missing_return_expr"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n    return ;\nend;$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "void_return_expr"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n    return 5;\nend;$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- VOID functions are allowed to omit RETURN"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "void_return_expr"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n    perform 2+2;\nend;$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "void_return_expr"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- but ordinary functions are not"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "missing_return_expr"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n    perform 2+2;\nend;$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "missing_return_expr"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "void_return_expr"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "missing_return_expr"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- EXECUTE ... INTO test"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "eifoo"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "i"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "y"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TYPE_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TYPE_KW "type"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "eitype"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE " "
    L_PAREN "("
    NAME_REF
      IDENT "i"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INTEGER_KW "integer"
    COMMA ","
    WHITESPACE " "
    NAME_REF
      IDENT "y"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INTEGER_KW "integer"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "execute_into_test"
    PARAM_LIST
      L_PAREN "("
      PARAM
        CHAR_TYPE
          VARCHAR_KW "varchar"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "record"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n    _r record;\n    _rt eifoo%rowtype;\n    _v eitype;\n    i int;\n    j int;\n    k int;\nbegin\n    execute 'insert into '||$1||' values(10,15)';\n    execute 'select (row).* from (select row(10,1)::eifoo) s' into _r;\n    raise notice '% %', _r.i, _r.y;\n    execute 'select * from '||$1||' limit 1' into _rt;\n    raise notice '% %', _rt.i, _rt.y;\n    execute 'select *, 20 from '||$1||' limit 1' into i, j, k;\n    raise notice '% % %', i, j, k;\n    execute 'select 1,2' into _v;\n    return _v;\nend; $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "execute_into_test"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'eifoo'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_TABLE
    DROP_KW "drop"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "eifoo"
    WHITESPACE " "
    CASCADE_KW "cascade"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_TYPE_STMT
    DROP_KW "drop"
    WHITESPACE " "
    TYPE_KW "type"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "eitype"
    WHITESPACE " "
    CASCADE_KW "cascade"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- SQLSTATE and SQLERRM test"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "excpt_test1"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n    raise notice '% %', sqlstate, sqlerrm;\nend; $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- should fail: SQLSTATE and SQLERRM are only in defined EXCEPTION"
  WHITESPACE "\n"
  COMMENT "-- blocks"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "excpt_test1"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "excpt_test2"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n    begin\n        begin\n            raise notice '% %', sqlstate, sqlerrm;\n        end;\n    end;\nend; $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- should fail"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "excpt_test2"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "excpt_test3"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n    begin\n        raise exception 'user exception';\n    exception when others then\n\t    raise notice 'caught exception % %', sqlstate, sqlerrm;\n\t    begin\n\t        raise notice '% %', sqlstate, sqlerrm;\n\t        perform 10/0;\n        exception\n            when substring_error then\n                -- this exception handler shouldn't be invoked\n                raise notice 'unexpected exception: % %', sqlstate, sqlerrm;\n\t        when division_by_zero then\n\t            raise notice 'caught exception % %', sqlstate, sqlerrm;\n\t    end;\n\t    raise notice '% %', sqlstate, sqlerrm;\n    end;\nend; $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "excpt_test3"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "excpt_test4"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n\tbegin perform 1/0;\n\texception when others then return sqlerrm; end;\nend; $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "excpt_test4"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "excpt_test1"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "excpt_test2"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "excpt_test3"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "excpt_test4"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- parameters of raise stmt can be expressions"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_exprs"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n    a integer[] = '{10,20,30}';\n    c varchar = 'xyz';\n    i integer;\nbegin\n    i := 2;\n    raise notice '%; %; %; %; %; %', a, a[i], c, (select c || 'abc'), row(10,'aaa',NULL,30), NULL;\nend;$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "raise_exprs"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "raise_exprs"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- regression test: verify that multiple uses of same plpgsql datum within"
  WHITESPACE "\n"
  COMMENT "-- a SQL command all get mapped to the same $n parameter.  The return value"
  WHITESPACE "\n"
  COMMENT "-- of the SELECT is not important, we only care that it doesn't fail with"
  WHITESPACE "\n"
  COMMENT "-- a complaint about an ungrouped column reference."
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "multi_datum_use"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "p1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "bool"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  x int;\n  y int;\nbegin\n  select into x,y unique1/p1, unique1/$1 from tenk1 group by unique1/p1;\n  return x = y;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "multi_datum_use"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "42"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test STRICT limiter in both planned and EXECUTE invocations."
  WHITESPACE "\n"
  COMMENT "-- Note that a data-modifying query is quasi strict (disallow multi rows)"
  WHITESPACE "\n"
  COMMENT "-- by default in the planned case, but not in EXECUTE."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TEMP_KW "temp"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "foo"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "f1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "f2"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "foo"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      COMMA ","
      LITERAL
        INT_NUMBER "2"
      R_PAREN ")"
      COMMA ","
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "3"
      COMMA ","
      LITERAL
        INT_NUMBER "4"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x record;\nbegin\n  -- should work\n  insert into foo values(5,6) returning * into x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x record;\nbegin\n  -- should fail due to implicit strict\n  insert into foo values(7,8),(9,10) returning * into x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x record;\nbegin\n  -- should work\n  execute 'insert into foo values(5,6) returning *' into x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x record;\nbegin\n  -- this should work since EXECUTE isn't as picky\n  execute 'insert into foo values(7,8),(9,10) returning *' into x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "foo"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x record;\nbegin\n  -- should work\n  select * from foo where f1 = 3 into strict x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x record;\nbegin\n  -- should fail, no rows\n  select * from foo where f1 = 0 into strict x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x record;\nbegin\n  -- should fail, too many rows\n  select * from foo where f1 > 3 into strict x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x record;\nbegin\n  -- should work\n  execute 'select * from foo where f1 = 3' into strict x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x record;\nbegin\n  -- should fail, no rows\n  execute 'select * from foo where f1 = 0' into strict x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x record;\nbegin\n  -- should fail, too many rows\n  execute 'select * from foo where f1 > 3' into strict x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test printing parameters after failure due to STRICT"
  WHITESPACE "\n\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "print_strict_params"
  WHITESPACE " "
  ERROR
    TO_KW "to"
  WHITESPACE " "
  ERROR
    TRUE_KW "true"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\nx record;\np1 int := 2;\np3 text := 'foo';\nbegin\n  -- no rows\n  select * from foo where f1 = p1 and f1::text = p3 into strict x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\nx record;\np1 int := 2;\np3 text := $a$'Valame Dios!' dijo Sancho; 'no le dije yo a vuestra merced que mirase bien lo que hacia?'$a$;\nbegin\n  -- no rows\n  select * from foo where f1 = p1 and f1::text = p3 into strict x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\nx record;\np1 int := 2;\np3 text := 'foo';\nbegin\n  -- too many rows\n  select * from foo where f1 > p1 or f1::text = p3  into strict x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x record;\nbegin\n  -- too many rows, no params\n  select * from foo where f1 > 3 into strict x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x record;\nbegin\n  -- no rows\n  execute 'select * from foo where f1 = $1 or f1::text = $2' using 0, 'foo' into strict x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x record;\nbegin\n  -- too many rows\n  execute 'select * from foo where f1 > $1' using 1 into strict x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x record;\nbegin\n  -- too many rows, no parameters\n  execute 'select * from foo where f1 > 3' into strict x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n-- override the global\n#print_strict_params off\ndeclare\nx record;\np1 int := 2;\np3 text := 'foo';\nbegin\n  -- too many rows\n  select * from foo where f1 > p1 or f1::text = p3  into strict x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "print_strict_params"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stricttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n-- override the global\n#print_strict_params on\ndeclare\nx record;\np1 int := 2;\np3 text := 'foo';\nbegin\n  -- too many rows\n  select * from foo where f1 > p1 or f1::text = p3  into strict x;\n  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stricttest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test warnings and errors"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_warnings"
  WHITESPACE " "
  ERROR
    TO_KW "to"
  WHITESPACE " "
  ERROR
    STRING "'all'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_warnings"
  WHITESPACE " "
  ERROR
    TO_KW "to"
  WHITESPACE " "
  ERROR
    STRING "'none'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_errors"
  WHITESPACE " "
  ERROR
    TO_KW "to"
  WHITESPACE " "
  ERROR
    STRING "'all'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_errors"
  WHITESPACE " "
  ERROR
    TO_KW "to"
  WHITESPACE " "
  ERROR
    STRING "'none'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test warnings when shadowing a variable"
  WHITESPACE "\n\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_warnings"
  WHITESPACE " "
  ERROR
    TO_KW "to"
  WHITESPACE " "
  ERROR
    STRING "'shadowed_variables'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- simple shadowing of input and output parameters"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "shadowtest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "in1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE "\n\t"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      TABLE_KW "table"
      WHITESPACE " "
      L_PAREN "("
      NAME_REF
        IDENT "out1"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\nin1 int;\nout1 int;\nbegin\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "shadowtest"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_warnings"
  WHITESPACE " "
  ERROR
    TO_KW "to"
  WHITESPACE " "
  ERROR
    STRING "'shadowed_variables'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "shadowtest"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "shadowtest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "in1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE "\n\t"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      TABLE_KW "table"
      WHITESPACE " "
      L_PAREN "("
      NAME_REF
        IDENT "out1"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\nin1 int;\nout1 int;\nbegin\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "shadowtest"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "shadowtest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- shadowing in a second DECLARE block"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "shadowtest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n\t"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\nf1 int;\nbegin\n\tdeclare\n\tf1 int;\n\tbegin\n\tend;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "shadowtest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- several levels of shadowing"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "shadowtest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "in1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE "\n\t"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\nin1 int;\nbegin\n\tdeclare\n\tin1 int;\n\tbegin\n\tend;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "shadowtest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- shadowing in cursor definitions"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "shadowtest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n\t"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\nf1 int;\nc1 cursor (f1 int) for select 1;\nbegin\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "shadowtest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test errors when shadowing a variable"
  WHITESPACE "\n\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_errors"
  WHITESPACE " "
  ERROR
    TO_KW "to"
  WHITESPACE " "
  ERROR
    STRING "'shadowed_variables'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "shadowtest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "f1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE "\n\t"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              BOOLEAN_KW "boolean"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare f1 int; begin return 1; end $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "shadowtest"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_errors"
  SEMICOLON ";"
  WHITESPACE "\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_warnings"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "shadowtest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "f1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE "\n\t"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              BOOLEAN_KW "boolean"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare f1 int; begin return 1; end $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "shadowtest"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- runtime extra checks"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_warnings"
  WHITESPACE " "
  ERROR
    TO_KW "to"
  WHITESPACE " "
  ERROR
    STRING "'too_many_rows'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\ndeclare x int;\nbegin\n  select v from generate_series(1,2) g(v) into x;\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_errors"
  WHITESPACE " "
  ERROR
    TO_KW "to"
  WHITESPACE " "
  ERROR
    STRING "'too_many_rows'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\ndeclare x int;\nbegin\n  select v from generate_series(1,2) g(v) into x;\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_errors"
  SEMICOLON ";"
  WHITESPACE "\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_warnings"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_warnings"
  WHITESPACE " "
  ERROR
    TO_KW "to"
  WHITESPACE " "
  ERROR
    STRING "'strict_multi_assignment'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\ndeclare\n  x int;\n  y int;\nbegin\n  select 1 into x, y;\n  select 1,2 into x, y;\n  select 1,2,3 into x, y;\nend\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_errors"
  WHITESPACE " "
  ERROR
    TO_KW "to"
  WHITESPACE " "
  ERROR
    STRING "'strict_multi_assignment'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\ndeclare\n  x int;\n  y int;\nbegin\n  select 1 into x, y;\n  select 1,2 into x, y;\n  select 1,2,3 into x, y;\nend\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_01"
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ALTER_TABLE
    ALTER_KW "alter"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_01"
    WHITESPACE " "
    DROP_COLUMN
      DROP_KW "drop"
      WHITESPACE " "
      COLUMN_KW "column"
      WHITESPACE " "
      NAME_REF
        IDENT "a"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- the check is active only when source table is not empty"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_01"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      L_PAREN "("
      LITERAL
        INT_NUMBER "10"
      COMMA ","
      LITERAL
        INT_NUMBER "20"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\ndeclare\n  x int;\n  y int;\nbegin\n  select * from test_01 into x, y; -- should be ok\n  raise notice 'ok';\n  select * from test_01 into x;    -- should to fail\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\ndeclare\n  t test_01;\nbegin\n  select 1, 2 into t;  -- should be ok\n  raise notice 'ok';\n  select 1, 2, 3 into t; -- should fail;\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\ndeclare\n  t test_01;\nbegin\n  select 1 into t; -- should fail;\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_TABLE
    DROP_KW "drop"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_01"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_errors"
  SEMICOLON ";"
  WHITESPACE "\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "extra_warnings"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test scrollable cursor support"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "sc_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "integer"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c scroll cursor for select f1 from int4_tbl;\n  x integer;\nbegin\n  open c;\n  fetch last from c into x;\n  while found loop\n    return next x;\n    fetch prior from c into x;\n  end loop;\n  close c;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "sc_test"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "sc_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "integer"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c no scroll cursor for select f1 from int4_tbl;\n  x integer;\nbegin\n  open c;\n  fetch last from c into x;\n  while found loop\n    return next x;\n    fetch prior from c into x;\n  end loop;\n  close c;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "sc_test"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fails because of NO SCROLL specification"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "sc_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "integer"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c refcursor;\n  x integer;\nbegin\n  open c scroll for select f1 from int4_tbl;\n  fetch last from c into x;\n  while found loop\n    return next x;\n    fetch prior from c into x;\n  end loop;\n  close c;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "sc_test"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "sc_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "integer"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c refcursor;\n  x integer;\nbegin\n  open c scroll for execute 'select f1 from int4_tbl';\n  fetch last from c into x;\n  while found loop\n    return next x;\n    fetch relative -2 from c into x;\n  end loop;\n  close c;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "sc_test"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "sc_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "integer"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c refcursor;\n  x integer;\nbegin\n  open c scroll for execute 'select f1 from int4_tbl';\n  fetch last from c into x;\n  while found loop\n    return next x;\n    move backward 2 from c;\n    fetch relative -1 from c into x;\n  end loop;\n  close c;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "sc_test"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "sc_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "integer"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c cursor for select * from generate_series(1, 10);\n  x integer;\nbegin\n  open c;\n  loop\n      move relative 2 in c;\n      if not found then\n          exit;\n      end if;\n      fetch next from c into x;\n      if found then\n          return next x;\n      end if;\n  end loop;\n  close c;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "sc_test"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "sc_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "integer"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c cursor for select * from generate_series(1, 10);\n  x integer;\nbegin\n  open c;\n  move forward all in c;\n  fetch backward from c into x;\n  if found then\n    return next x;\n  end if;\n  close c;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "sc_test"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "sc_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test qualified variable names"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pl_qual_names"
    WHITESPACE " "
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "param1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n<<outerblock>>\ndeclare\n  param1 int := 1;\nbegin\n  <<innerblock>>\n  declare\n    param1 int := 2;\n  begin\n    raise notice 'param1 = %', param1;\n    raise notice 'pl_qual_names.param1 = %', pl_qual_names.param1;\n    raise notice 'outerblock.param1 = %', outerblock.param1;\n    raise notice 'innerblock.param1 = %', innerblock.param1;\n  end;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pl_qual_names"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "42"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pl_qual_names"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- tests for RETURN QUERY"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "ret_query1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "out"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "record"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n    $1 := -1;\n    $2 := -2;\n    return next;\n    return query select x + 1, x * 10 from generate_series(0, 10) s (x);\n    return next;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "ret_query1"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TYPE_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TYPE_KW "type"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "record_type"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE " "
    L_PAREN "("
    NAME_REF
      IDENT "x"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            TEXT_KW "text"
    COMMA ","
    WHITESPACE " "
    NAME_REF
      IDENT "y"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME_REF
      IDENT "z"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            BOOLEAN_KW "boolean"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "ret_query2"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "lim"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "record_type"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n    return query select fipshash(s.x::text), s.x, s.x > 0\n                 from generate_series(-8, lim) s (x) where s.x % 2 = 0;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "ret_query2"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "8"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test EXECUTE USING"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "exc_using"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare i int;\nbegin\n  for i in execute 'select * from generate_series(1,$1)' using $1+1 loop\n    raise notice '%', i;\n  end loop;\n  execute 'select $2 + $2*3 + length($1)' into i using $2,$1;\n  return i;\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "exc_using"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "5"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'foobar'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "exc_using"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "exc_using"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c refcursor;\n  i int;\nbegin\n  open c for execute 'select * from generate_series(1,$1)' using $1+1;\n  loop\n    fetch c into i;\n    exit when not found;\n    raise notice '%', i;\n  end loop;\n  close c;\n  return;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "exc_using"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "5"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "exc_using"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test FOR-over-cursor"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "forc01"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c cursor(r1 integer, r2 integer)\n       for select * from generate_series(r1,r2) i;\n  c2 cursor\n       for select * from generate_series(41,43) i;\nbegin\n  -- assign portal names to cursors to get stable output\n  c := 'c';\n  c2 := 'c2';\n  for r in c(5,7) loop\n    raise notice '% from %', r.i, c;\n  end loop;\n  -- again, to test if cursor was closed properly\n  -- (and while we're at it, test named-parameter notation)\n  for r in c(r2 := 10, r1 => 9) loop\n    raise notice '% from %', r.i, c;\n  end loop;\n  -- and test a parameterless cursor\n  for r in c2 loop\n    raise notice '% from %', r.i, c2;\n  end loop;\n  -- and try it with a hand-assigned name\n  raise notice 'after loop, c2 = %', c2;\n  c2 := 'special_name';\n  for r in c2 loop\n    raise notice '% from %', r.i, c2;\n  end loop;\n  raise notice 'after loop, c2 = %', c2;\n  -- and try it with a generated name\n  -- (which we can't show in the output because it's variable)\n  c2 := null;\n  for r in c2 loop\n    raise notice '%', r.i;\n  end loop;\n  raise notice 'after loop, c2 = %', c2;\n  return;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "forc01"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- try updating the cursor's current row"
  WHITESPACE "\n\n"
  CREATE_TABLE_AS_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TEMP_KW "temp"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "forc_test"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE "\n  "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "select"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            NAME_REF
              IDENT "n"
            WHITESPACE " "
            AS_KW "as"
            WHITESPACE " "
            NAME
              IDENT "i"
          COMMA ","
          WHITESPACE " "
          TARGET
            NAME_REF
              IDENT "n"
            WHITESPACE " "
            AS_KW "as"
            WHITESPACE " "
            NAME
              IDENT "j"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "from"
        WHITESPACE " "
        CALL_EXPR
          NAME_REF
            IDENT "generate_series"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            LITERAL
              INT_NUMBER "10"
            R_PAREN ")"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "n"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "forc01"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c cursor for select * from forc_test;\nbegin\n  for r in c loop\n    raise notice '%, %', r.i, r.j;\n    update forc_test set i = i * 100, j = r.j * 2 where current of c;\n  end loop;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "forc01"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "forc_test"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- same, with a cursor whose portal name doesn't match variable name"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "forc01"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c refcursor := 'fooled_ya';\n  r record;\nbegin\n  open c for select * from forc_test;\n  loop\n    fetch c into r;\n    exit when not found;\n    raise notice '%, %', r.i, r.j;\n    update forc_test set i = i * 100, j = r.j * 2 where current of c;\n  end loop;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "forc01"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "forc_test"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "forc01"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- it's okay to re-use a cursor variable name, even when bound"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\ndeclare cnt int := 0;\n  c1 cursor for select * from forc_test;\nbegin\n  for r1 in c1 loop\n    declare c1 cursor for select * from forc_test;\n    begin\n      for r2 in c1 loop\n        cnt := cnt + 1;\n      end loop;\n    end;\n  end loop;\n  raise notice 'cnt = %', cnt;\nend $$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- fail because cursor has no query bound to it"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "forc_bad"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  c refcursor;\nbegin\n  for r in c loop\n    raise notice '%', r.i;\n  end loop;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test RETURN QUERY EXECUTE"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "return_dquery"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return query execute 'select * from (values(10),(20)) f';\n  return query execute 'select * from (values($1),($2)) f' using 40,50;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "return_dquery"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "return_dquery"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test RETURN QUERY with dropped columns"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tabwithcols"
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "d"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "tabwithcols"
    WHITESPACE " "
    SELECT
      VALUES_KW "values"
      L_PAREN "("
      LITERAL
        INT_NUMBER "10"
      COMMA ","
      LITERAL
        INT_NUMBER "20"
      COMMA ","
      LITERAL
        INT_NUMBER "30"
      COMMA ","
      LITERAL
        INT_NUMBER "40"
      R_PAREN ")"
      COMMA ","
      L_PAREN "("
      LITERAL
        INT_NUMBER "50"
      COMMA ","
      LITERAL
        INT_NUMBER "60"
      COMMA ","
      LITERAL
        INT_NUMBER "70"
      COMMA ","
      LITERAL
        INT_NUMBER "80"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "returnqueryf"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "tabwithcols"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return query select * from tabwithcols;\n  return query execute 'select * from tabwithcols';\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "returnqueryf"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ALTER_TABLE
    ALTER_KW "alter"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "tabwithcols"
    WHITESPACE " "
    DROP_COLUMN
      DROP_KW "drop"
      WHITESPACE " "
      COLUMN_KW "column"
      WHITESPACE " "
      NAME_REF
        IDENT "b"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "returnqueryf"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ALTER_TABLE
    ALTER_KW "alter"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "tabwithcols"
    WHITESPACE " "
    DROP_COLUMN
      DROP_KW "drop"
      WHITESPACE " "
      COLUMN_KW "column"
      WHITESPACE " "
      NAME_REF
        IDENT "d"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "returnqueryf"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ALTER_TABLE
    ALTER_KW "alter"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "tabwithcols"
    WHITESPACE " "
    ADD_COLUMN
      ADD_KW "add"
      WHITESPACE " "
      COLUMN_KW "column"
      WHITESPACE " "
      NAME_REF
        IDENT "d"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "returnqueryf"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "returnqueryf"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_TABLE
    DROP_KW "drop"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "tabwithcols"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Tests for composite-type results"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_TYPE_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TYPE_KW "type"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "compostype"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE " "
    L_PAREN "("
    NAME_REF
      IDENT "x"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME_REF
      IDENT "y"
    WHITESPACE " "
    CHAR_TYPE
      VARCHAR_KW "varchar"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test: use of variable of composite type in return statement"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "compos"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "compostype"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  v compostype;\nbegin\n  v := (1, 'hello');\n  return v;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "compos"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test: use of variable of record type in return statement"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "compos"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "compostype"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  v record;\nbegin\n  v := (1, 'hello'::varchar);\n  return v;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "compos"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test: use of row expr in return statement"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "compos"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "compostype"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return (1, 'hello'::varchar);\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "compos"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- this does not work currently (no implicit casting)"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "compos"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "compostype"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return (1, 'hello');\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "compos"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- ... but this does"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "compos"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "compostype"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return (1, 'hello')::compostype;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "compos"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "compos"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test: return a row expr as record."
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "composrec"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "record"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  v record;\nbegin\n  v := (1, 'hello');\n  return v;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "composrec"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test: return row expr in return statement."
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "composrec"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "record"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return (1, 'hello');\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "composrec"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "composrec"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test: row expr in RETURN NEXT statement."
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "compos"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "compostype"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  for i in 1..3\n  loop\n    return next (1, 'hello'::varchar);\n  end loop;\n  return next null::compostype;\n  return next (2, 'goodbye')::compostype;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "compos"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "compos"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test: use invalid expr in return statement."
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "compos"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "compostype"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return 1 + 1;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "compos"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- RETURN variable is a different code path ..."
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "compos"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "compostype"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare x int := 42;\nbegin\n  return x;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "compos"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "compos"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test: invalid use of composite variable in scalar-returning function"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "compos"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  v compostype;\nbegin\n  v := (1, 'hello');\n  return v;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "compos"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test: invalid use of composite expression in scalar-returning function"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "compos"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return (1, 'hello')::compostype;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "compos"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "compos"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_TYPE_STMT
    DROP_KW "drop"
    WHITESPACE " "
    TYPE_KW "type"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "compostype"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Tests for 8.4's new RAISE features"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise notice '% % %', 1, 2, 3\n     using errcode = '55001', detail = 'some detail info', hint = 'some hint';\n  raise '% % %', 1, 2, 3\n     using errcode = 'division_by_zero', detail = 'some detail info';\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "raise_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Since we can't actually see the thrown SQLSTATE in default psql output,"
  WHITESPACE "\n"
  COMMENT "-- test it like this; this also tests re-RAISE"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise 'check me'\n     using errcode = 'division_by_zero', detail = 'some detail info';\n  exception\n    when others then\n      raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm;\n      raise;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "raise_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise 'check me'\n     using errcode = '1234F', detail = 'some detail info';\n  exception\n    when others then\n      raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm;\n      raise;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "raise_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- SQLSTATE specification in WHEN"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise 'check me'\n     using errcode = '1234F', detail = 'some detail info';\n  exception\n    when sqlstate '1234F' then\n      raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm;\n      raise;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "raise_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise division_by_zero using detail = 'some detail info';\n  exception\n    when others then\n      raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm;\n      raise;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "raise_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise division_by_zero;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "raise_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise sqlstate '1234F';\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "raise_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise division_by_zero using message = 'custom' || ' message';\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "raise_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise using message = 'custom' || ' message', errcode = '22012';\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "raise_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- conflict on message"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise notice 'some message' using message = 'custom' || ' message', errcode = '22012';\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "raise_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- conflict on errcode"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise division_by_zero using message = 'custom' || ' message', errcode = '22012';\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "raise_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- nothing to re-RAISE"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "raise_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test access to exception data"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "zero_divide"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare v int := 0;\nbegin\n  return 10 / v;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      PARALLEL_FUNC_OPTION
        PARALLEL_KW "parallel"
        WHITESPACE " "
        IDENT "safe"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise exception 'custom exception'\n     using detail = 'some detail of custom exception',\n           hint = 'some hint related to custom exception';\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stacked_diagnostics_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare _sqlstate text;\n        _message text;\n        _context text;\nbegin\n  perform zero_divide();\nexception when others then\n  get stacked diagnostics\n        _sqlstate = returned_sqlstate,\n        _message = message_text,\n        _context = pg_exception_context;\n  raise notice 'sqlstate: %, message: %, context: [%]',\n    _sqlstate, _message, replace(_context, E'\\n', ' <- ');\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stacked_diagnostics_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stacked_diagnostics_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare _detail text;\n        _hint text;\n        _message text;\nbegin\n  perform raise_test();\nexception when others then\n  get stacked diagnostics\n        _message = message_text,\n        _detail = pg_exception_detail,\n        _hint = pg_exception_hint;\n  raise notice 'message: %, detail: %, hint: %', _message, _detail, _hint;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stacked_diagnostics_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- fail, cannot use stacked diagnostics statement outside handler"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stacked_diagnostics_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare _detail text;\n        _hint text;\n        _message text;\nbegin\n  get stacked diagnostics\n        _message = message_text,\n        _detail = pg_exception_detail,\n        _hint = pg_exception_hint;\n  raise notice 'message: %, detail: %, hint: %', _message, _detail, _hint;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stacked_diagnostics_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "stacked_diagnostics_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test that an error recovery subtransaction is parallel safe"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "error_trap_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  perform zero_divide();\n  return 'no error detected!';\nexception when division_by_zero then\n  return 'division_by_zero detected';\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      PARALLEL_FUNC_OPTION
        PARALLEL_KW "parallel"
        WHITESPACE " "
        IDENT "safe"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "debug_parallel_query"
    WHITESPACE " "
    TO_KW "to"
  WHITESPACE " "
  ERROR
    ON_KW "on"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    VERBOSE_KW "verbose"
    COMMA ","
    WHITESPACE " "
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE " "
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "error_trap_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "error_trap_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "debug_parallel_query"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "error_trap_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "zero_divide"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- check cases where implicit SQLSTATE variable could be confused with"
  WHITESPACE "\n"
  COMMENT "-- SQLSTATE as a keyword, cf bug #5524"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "raise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  perform 1/0;\nexception\n  when sqlstate '22012' then\n    raise notice using message = sqlstate;\n    raise sqlstate '22012' using message = 'substitute message';\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "raise_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "raise_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test passing column_name, constraint_name, datatype_name, table_name"
  WHITESPACE "\n"
  COMMENT "-- and schema_name error fields"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "stacked_diagnostics_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare _column_name text;\n        _constraint_name text;\n        _datatype_name text;\n        _table_name text;\n        _schema_name text;\nbegin\n  raise exception using\n    column = '>>some column name<<',\n    constraint = '>>some constraint name<<',\n    datatype = '>>some datatype name<<',\n    table = '>>some table name<<',\n    schema = '>>some schema name<<';\nexception when others then\n  get stacked diagnostics\n        _column_name = column_name,\n        _constraint_name = constraint_name,\n        _datatype_name = pg_datatype_name,\n        _table_name = table_name,\n        _schema_name = schema_name;\n  raise notice 'column %, constraint %, type %, table %, schema %',\n    _column_name, _constraint_name, _datatype_name, _table_name, _schema_name;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "stacked_diagnostics_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "stacked_diagnostics_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test variadic functions"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "vari"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_VARIADIC
          VARIADIC_KW "variadic"
        WHITESPACE " "
        ARRAY_TYPE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INT_KW "int"
          L_BRACK "["
          R_BRACK "]"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  for i in array_lower($1,1)..array_upper($1,1) loop\n    raise notice '%', $1[i];\n  end loop; end;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "vari"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              LITERAL
                INT_NUMBER "3"
              COMMA ","
              LITERAL
                INT_NUMBER "4"
              COMMA ","
              LITERAL
                INT_NUMBER "5"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "vari"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "3"
              COMMA ","
              LITERAL
                INT_NUMBER "4"
              COMMA ","
              LITERAL
                INT_NUMBER "5"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "vari"
            ARG_LIST
              L_PAREN "("
              VARIADIC_KW "variadic"
              WHITESPACE " "
              ARRAY_EXPR
                ARRAY_KW "array"
                L_BRACK "["
                LITERAL
                  INT_NUMBER "5"
                COMMA ","
                LITERAL
                  INT_NUMBER "6"
                COMMA ","
                LITERAL
                  INT_NUMBER "7"
                R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "vari"
    PARAM_LIST
      L_PAREN "("
      PARAM
        ARRAY_TYPE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INT_KW "int"
          L_BRACK "["
          R_BRACK "]"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- coercion test"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pleast"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PARAM_VARIADIC
          VARIADIC_KW "variadic"
        WHITESPACE " "
        ARRAY_TYPE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  NUMERIC_KW "numeric"
          L_BRACK "["
          R_BRACK "]"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              NUMERIC_KW "numeric"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare aux numeric = $1[array_lower($1,1)];\nbegin\n  for i in array_lower($1,1)+1..array_upper($1,1) loop\n    if $1[i] < aux then aux := $1[i]; end if;\n  end loop;\n  return aux;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "immutable"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "strict"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pleast"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "10"
              COMMA ","
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              LITERAL
                INT_NUMBER "3"
              COMMA ","
              PREFIX_EXPR
                MINUS "-"
                LITERAL
                  INT_NUMBER "16"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pleast"
            ARG_LIST
              L_PAREN "("
              LITERAL
                FLOAT_NUMBER "10.2"
              COMMA ","
              LITERAL
                FLOAT_NUMBER "2.2"
              COMMA ","
              PREFIX_EXPR
                MINUS "-"
                LITERAL
                  FLOAT_NUMBER "1.1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pleast"
            ARG_LIST
              L_PAREN "("
              LITERAL
                FLOAT_NUMBER "10.2"
              COMMA ","
              LITERAL
                INT_NUMBER "10"
              COMMA ","
              WHITESPACE " "
              PREFIX_EXPR
                MINUS "-"
                LITERAL
                  INT_NUMBER "20"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pleast"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "10"
              COMMA ","
              LITERAL
                INT_NUMBER "20"
              COMMA ","
              WHITESPACE " "
              PREFIX_EXPR
                MINUS "-"
                LITERAL
                  FLOAT_NUMBER "1.0"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- in case of conflict, non-variadic version is preferred"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pleast"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NUMERIC_KW "numeric"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              NUMERIC_KW "numeric"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise notice 'non-variadic function called';\n  return $1;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "immutable"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "strict"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pleast"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "10"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pleast"
    PARAM_LIST
      L_PAREN "("
      PARAM
        ARRAY_TYPE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  NUMERIC_KW "numeric"
          L_BRACK "["
          R_BRACK "]"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pleast"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NUMERIC_KW "numeric"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test table functions"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tftest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      TABLE_KW "table"
      L_PAREN "("
      NAME_REF
        IDENT "a"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "b"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return query select $1, $1+i from generate_series(1,5) g(i);\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "immutable"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "strict"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "tftest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "10"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "tftest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "a1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      TABLE_KW "table"
      L_PAREN "("
      NAME_REF
        IDENT "a"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "b"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  a := a1; b := a1 + 1;\n  return next;\n  a := a1 * 10; b := a1 * 10 + 1;\n  return next;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "immutable"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "strict"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "tftest"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "10"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "tftest"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "rttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare rc int;\nbegin\n  return query values(10),(20);\n  get diagnostics rc = row_count;\n  raise notice '% %', found, rc;\n  return query select * from (values(10),(20)) f(a) where false;\n  get diagnostics rc = row_count;\n  raise notice '% %', found, rc;\n  return query execute 'values(10),(20)';\n  get diagnostics rc = row_count;\n  raise notice '% %', found, rc;\n  return query execute 'select * from (values(10),(20)) f(a) where false';\n  get diagnostics rc = row_count;\n  raise notice '% %', found, rc;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "rttest"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- check some error cases, too"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "rttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return query select 10 into no_such_table;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "rttest"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "rttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return query execute 'select 10 into no_such_table';\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "rttest"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "no_such_table"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "rttest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test for proper cleanup at subtransaction exit.  This example"
  WHITESPACE "\n"
  COMMENT "-- exposed a bug in PG 8.2."
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "leaker_1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "fail"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "BOOL"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "INTEGER"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nDECLARE\n  v_var INTEGER;\nBEGIN\n  BEGIN\n    v_var := (leaker_2(fail)).error_code;\n  EXCEPTION\n    WHEN others THEN RETURN 0;\n  END;\n  RETURN 1;\nEND;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "leaker_2"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "fail"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "BOOL"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "OUT"
        WHITESPACE " "
        NAME
          IDENT "error_code"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "INTEGER"
      COMMA ","
      WHITESPACE " "
      PARAM
        PARAM_OUT
          OUT_KW "OUT"
        WHITESPACE " "
        NAME
          IDENT "new_id"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "INTEGER"
      R_PAREN ")"
    WHITESPACE "\n  "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "RECORD"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nBEGIN\n  IF fail THEN\n    RAISE EXCEPTION 'fail ...';\n  END IF;\n  error_code := 1;\n  new_id := 1;\n  RETURN;\nEND;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "leaker_1"
        ARG_LIST
          L_PAREN "("
          LITERAL
            FALSE_KW "false"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "leaker_1"
        ARG_LIST
          L_PAREN "("
          LITERAL
            TRUE_KW "true"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "leaker_1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "bool"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "leaker_2"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "bool"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test for appropriate cleanup of non-simple expression evaluations"
  WHITESPACE "\n"
  COMMENT "-- (bug in all versions prior to August 2010)"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "nonsimple_expr_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      ARRAY_TYPE
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
        L_BRACK "["
        R_BRACK "]"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nDECLARE\n  arr text[];\n  lr text;\n  i integer;\nBEGIN\n  arr := array[array['foo','bar'], array['baz', 'quux']];\n  lr := 'fool';\n  i := 1;\n  -- use sub-SELECTs to make expressions non-simple\n  arr[(SELECT i)][(SELECT i+1)] := (SELECT lr);\n  RETURN arr;\nEND;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "nonsimple_expr_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "nonsimple_expr_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "nonsimple_expr_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "integer"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n   i integer NOT NULL := 0;\nbegin\n  begin\n    i := (SELECT NULL::integer);  -- should throw error\n  exception\n    WHEN OTHERS THEN\n      i := (SELECT 1::integer);\n  end;\n  return i;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "nonsimple_expr_test"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "nonsimple_expr_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test cases involving recursion and error recovery in simple expressions"
  WHITESPACE "\n"
  COMMENT "-- (bugs in all versions before October 2010).  The problems are most"
  WHITESPACE "\n"
  COMMENT "-- easily exposed by mutual recursion between plpgsql and sql functions."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "recurse"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "float8"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "float8"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE "\n"
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  if ($1 > 0) then\n    return sql_recurse($1 - 1);\n  else\n    return $1;\n  end if;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- \"limit\" is to prevent this from being inlined"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "sql_recurse"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "float8"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "float8"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE "\n"
        LITERAL
          DOLLAR_QUOTED_STRING "$$ select recurse($1) limit 1; $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "recurse"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "10"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "error1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE "\n"
        LITERAL
          DOLLAR_QUOTED_STRING "$$ SELECT relname::text FROM pg_class c WHERE c.oid = $1::regclass $$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "error2"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "p_name_table"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return error1(p_name_table);\nend$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  BEGIN_STMT
    BEGIN_KW "BEGIN"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "public"
      DOT "."
      PATH_SEGMENT
        NAME
          IDENT "stuffs"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "stuff"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SAVEPOINT_STMT
    SAVEPOINT_KW "SAVEPOINT"
    WHITESPACE " "
    NAME_REF
      IDENT "a"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "error2"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'nonexistent.stuffs'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ROLLBACK_STMT
    ROLLBACK_KW "ROLLBACK"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    NAME_REF
      IDENT "a"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "error2"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'public.stuffs'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ROLLBACK_STMT
    ROLLBACK_KW "rollback"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "error2"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "p_name_table"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "error1"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test for proper handling of cast-expression caching"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "sql_to_date"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "date"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nselect $1::text::date\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "immutable"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "strict"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_CAST_STMT
    CREATE_KW "create"
    WHITESPACE " "
    CAST_KW "cast"
    WHITESPACE " "
    L_PAREN "("
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INTEGER_KW "integer"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "date"
    R_PAREN ")"
    WHITESPACE " "
    WITH_KW "with"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "sql_to_date"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE " "
    ASSIGNMENT_KW "assignment"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "cast_invoker"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "date"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return $1;\nend$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cast_invoker"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "20150717"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cast_invoker"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "20150718"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- second call crashed in pre-release 9.5"
  WHITESPACE "\n\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cast_invoker"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "20150717"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cast_invoker"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "20150718"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SAVEPOINT_STMT
    SAVEPOINT_KW "savepoint"
    WHITESPACE " "
    NAME_REF
      IDENT "s1"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cast_invoker"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "20150718"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cast_invoker"
            ARG_LIST
              L_PAREN "("
              PREFIX_EXPR
                MINUS "-"
                LITERAL
                  INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- fails"
  WHITESPACE "\n"
  ROLLBACK_STMT
    ROLLBACK_KW "rollback"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    SAVEPOINT_KW "savepoint"
    WHITESPACE " "
    NAME_REF
      IDENT "s1"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cast_invoker"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "20150719"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "cast_invoker"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "20150720"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMIT_STMT
    COMMIT_KW "commit"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "cast_invoker"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "sql_to_date"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE " "
    CASCADE_KW "cascade"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test handling of cast cache inside DO blocks"
  WHITESPACE "\n"
  COMMENT "-- (to check the original crash case, this must be a cast not previously"
  WHITESPACE "\n"
  COMMENT "-- used in this session)"
  WHITESPACE "\n\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  SEMICOLON ";"
  WHITESPACE "\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$ declare x text[]; begin x := '{1.23, 4.56}'::numeric[]; end $$"
  SEMICOLON ";"
  WHITESPACE "\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$ declare x text[]; begin x := '{1.23, 4.56}'::numeric[]; end $$"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test for consistent reporting of error context"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "fail"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  return 1/0;\nend\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "fail"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "fail"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "fail"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test handling of string literals."
  WHITESPACE "\n\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "standard_conforming_strings"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    OFF_KW "off"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "strtest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise notice 'foo\\\\bar\\041baz';\n  return 'foo\\\\bar\\041baz';\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "strtest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "strtest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise notice E'foo\\\\bar\\041baz';\n  return E'foo\\\\bar\\041baz';\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "strtest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "standard_conforming_strings"
    WHITESPACE " "
    EQ "="
  WHITESPACE " "
  ERROR
    ON_KW "on"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "strtest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise notice 'foo\\\\bar\\041baz\\';\n  return 'foo\\\\bar\\041baz\\';\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "strtest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "strtest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  raise notice E'foo\\\\bar\\041baz';\n  return E'foo\\\\bar\\041baz';\nend\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "strtest"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "strtest"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test anonymous code blocks."
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "DO"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\nDECLARE r record;\nBEGIN\n    FOR r IN SELECT rtrim(roomno) AS roomno, comment FROM Room ORDER BY roomno\n    LOOP\n        RAISE NOTICE '%, %', r.roomno, r.comment;\n    END LOOP;\nEND$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- these are to check syntax error reporting"
  WHITESPACE "\n"
  DO_STMT
    DO_KW "DO"
    WHITESPACE " "
    LANGUAGE_KW "LANGUAGE"
    WHITESPACE " "
    IDENT "plpgsql"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$begin return 1; end$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "DO"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\nDECLARE r record;\nBEGIN\n    FOR r IN SELECT rtrim(roomno) AS roomno, foo FROM Room ORDER BY roomno\n    LOOP\n        RAISE NOTICE '%, %', r.roomno, r.comment;\n    END LOOP;\nEND$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Check handling of errors thrown from/into anonymous code blocks."
  WHITESPACE "\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$outer$\nbegin\n  for i in 1..10 loop\n   begin\n    execute $ex$\n      do $"
  ERROR
    PARAM "$"
  WHITESPACE "\n      "
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "x"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  WHITESPACE " "
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    INT_NUMBER "0"
  SEMICOLON ";"
  WHITESPACE "\n      "
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n        "
  ERROR
    IDENT "x"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  WHITESPACE " "
  ERROR
    SLASH "/"
  WHITESPACE " "
  ERROR
    IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n      "
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n      "
  ERROR
    DOLLAR_QUOTED_STRING "$$;\n    $ex$;\n  exception when division_by_zero then\n    raise notice 'caught division by zero';\n  end;\n  end loop;\nend;\n$outer$;\n\n-- Check variable scoping -- a var is not available in its own or prior\n-- default expressions, but it is available in later ones.\n\ndo $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "x"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    IDENT "x"
  WHITESPACE " "
  ERROR
    PLUS "+"
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- error"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    IDENT "raise"
  WHITESPACE " "
  ERROR
    IDENT "notice"
  WHITESPACE " "
  ERROR
    STRING "'x = %'"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$;\n\ndo $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "y"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    IDENT "x"
  WHITESPACE " "
  ERROR
    PLUS "+"
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- error"
  WHITESPACE "\n        "
  ERROR
    IDENT "x"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    INT_NUMBER "42"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    IDENT "raise"
  WHITESPACE " "
  ERROR
    IDENT "notice"
  WHITESPACE " "
  ERROR
    STRING "'x = %, y = %'"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "x"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "y"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$;\n\ndo $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "x"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    INT_NUMBER "42"
  SEMICOLON ";"
  WHITESPACE "\n        "
  ERROR
    IDENT "y"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    IDENT "x"
  WHITESPACE " "
  ERROR
    PLUS "+"
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    IDENT "raise"
  WHITESPACE " "
  ERROR
    IDENT "notice"
  WHITESPACE " "
  ERROR
    STRING "'x = %, y = %'"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "x"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "y"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$;\n\ndo $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "x"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    INT_NUMBER "42"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "y"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    IDENT "x"
  WHITESPACE " "
  ERROR
    PLUS "+"
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n          "
  ERROR
    IDENT "x"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    IDENT "x"
  WHITESPACE " "
  ERROR
    PLUS "+"
  WHITESPACE " "
  ERROR
    INT_NUMBER "2"
  SEMICOLON ";"
  WHITESPACE "\n          "
  ERROR
    IDENT "z"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    IDENT "x"
  WHITESPACE " "
  ERROR
    STAR "*"
  WHITESPACE " "
  ERROR
    INT_NUMBER "10"
  SEMICOLON ";"
  WHITESPACE "\n  "
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n    "
  ERROR
    IDENT "raise"
  WHITESPACE " "
  ERROR
    IDENT "notice"
  WHITESPACE " "
  ERROR
    STRING "'x = %, y = %, z = %'"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "x"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "y"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "z"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$;\n\n-- Check handling of conflicts between plpgsql vars and table columns.\n\nset plpgsql.variable_conflict = error;\n\ncreate function conflict_test() returns setof int8_tbl as $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "r"
  WHITESPACE " "
  ERROR
    IDENT "record"
  SEMICOLON ";"
  WHITESPACE "\n  "
  ERROR
    IDENT "q1"
  WHITESPACE " "
  ERROR
    BIGINT_KW "bigint"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    INT_NUMBER "42"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    FOR_KW "for"
  WHITESPACE " "
  ERROR
    IDENT "r"
  WHITESPACE " "
  ERROR
    IN_KW "in"
  WHITESPACE " "
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "q1"
        COMMA ","
        TARGET
          NAME_REF
            IDENT "q2"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "int8_tbl"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "loop"
  WHITESPACE "\n    "
  ERROR
    RETURN_KW "return"
  WHITESPACE " "
  ERROR
    NEXT_KW "next"
  WHITESPACE " "
  ERROR
    IDENT "r"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  WHITESPACE " "
  ERROR
    IDENT "loop"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$ language plpgsql;\n\nselect * from conflict_test();\n\ncreate or replace function conflict_test() returns setof int8_tbl as $$"
  WHITESPACE "\n"
  ERROR
    POUND "#"
  ERROR
    IDENT "variable_conflict"
  WHITESPACE " "
  ERROR
    IDENT "use_variable"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "r"
  WHITESPACE " "
  ERROR
    IDENT "record"
  SEMICOLON ";"
  WHITESPACE "\n  "
  ERROR
    IDENT "q1"
  WHITESPACE " "
  ERROR
    BIGINT_KW "bigint"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    INT_NUMBER "42"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    FOR_KW "for"
  WHITESPACE " "
  ERROR
    IDENT "r"
  WHITESPACE " "
  ERROR
    IN_KW "in"
  WHITESPACE " "
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "q1"
        COMMA ","
        TARGET
          NAME_REF
            IDENT "q2"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "int8_tbl"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "loop"
  WHITESPACE "\n    "
  ERROR
    RETURN_KW "return"
  WHITESPACE " "
  ERROR
    NEXT_KW "next"
  WHITESPACE " "
  ERROR
    IDENT "r"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  WHITESPACE " "
  ERROR
    IDENT "loop"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$ language plpgsql;\n\nselect * from conflict_test();\n\ncreate or replace function conflict_test() returns setof int8_tbl as $$"
  WHITESPACE "\n"
  ERROR
    POUND "#"
  ERROR
    IDENT "variable_conflict"
  WHITESPACE " "
  ERROR
    IDENT "use_column"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "r"
  WHITESPACE " "
  ERROR
    IDENT "record"
  SEMICOLON ";"
  WHITESPACE "\n  "
  ERROR
    IDENT "q1"
  WHITESPACE " "
  ERROR
    BIGINT_KW "bigint"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    INT_NUMBER "42"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    FOR_KW "for"
  WHITESPACE " "
  ERROR
    IDENT "r"
  WHITESPACE " "
  ERROR
    IN_KW "in"
  WHITESPACE " "
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "q1"
        COMMA ","
        TARGET
          NAME_REF
            IDENT "q2"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "int8_tbl"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "loop"
  WHITESPACE "\n    "
  ERROR
    RETURN_KW "return"
  WHITESPACE " "
  ERROR
    NEXT_KW "next"
  WHITESPACE " "
  ERROR
    IDENT "r"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  WHITESPACE " "
  ERROR
    IDENT "loop"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$ language plpgsql;\n\nselect * from conflict_test();\n\ndrop function conflict_test();\n\n-- Check that an unreserved keyword can be used as a variable name\n\ncreate function unreserved_test() returns int as $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE "\n  "
    NAME
      FORWARD_KW "forward"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    INT_NUMBER "21"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    FORWARD_KW "forward"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    FORWARD_KW "forward"
  WHITESPACE " "
  ERROR
    STAR "*"
  WHITESPACE " "
  ERROR
    INT_NUMBER "2"
  SEMICOLON ";"
  WHITESPACE "\n  "
  ERROR
    RETURN_KW "return"
  WHITESPACE " "
  ERROR
    FORWARD_KW "forward"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMIT_STMT
    END_KW "end"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$ language plpgsql;\n\nselect unreserved_test();\n\ncreate or replace function unreserved_test() returns int as $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE "\n  "
    NAME
      RETURN_KW "return"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    INT_NUMBER "42"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    RETURN_KW "return"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    RETURN_KW "return"
  WHITESPACE " "
  ERROR
    PLUS "+"
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n  "
  ERROR
    RETURN_KW "return"
  WHITESPACE " "
  ERROR
    RETURN_KW "return"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMIT_STMT
    END_KW "end"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$ language plpgsql;\n\nselect unreserved_test();\n\ncreate or replace function unreserved_test() returns int as $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE "\n  "
    NAME
      COMMENT_KW "comment"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    INT_NUMBER "21"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  COMMENT_STMT
    COMMENT_KW "comment"
    WHITESPACE " "
    ERROR
      COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  COMMENT_STMT
    COMMENT_KW "comment"
    WHITESPACE " "
    ERROR
      STAR "*"
  WHITESPACE " "
  ERROR
    INT_NUMBER "2"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMENT_STMT
    COMMENT_KW "comment"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "unreserved_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    IS_KW "is"
    WHITESPACE " "
    LITERAL
      STRING "'this is a test'"
  SEMICOLON ";"
  WHITESPACE "\n  "
  ERROR
    RETURN_KW "return"
  WHITESPACE " "
  COMMENT_STMT
    COMMENT_KW "comment"
    ERROR
      SEMICOLON ";"
  WHITESPACE "\n"
  COMMIT_STMT
    END_KW "end"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$ language plpgsql;\n\nselect unreserved_test();\n\nselect obj_description('unreserved_test()'::regprocedure, 'pg_proc');\n\ndrop function unreserved_test();\n\n--\n-- Test FOREACH over arrays\n--\n\ncreate function foreach_test(anyarray)\nreturns void as $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "x"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    IDENT "foreach"
  WHITESPACE " "
  ERROR
    IDENT "x"
  WHITESPACE " "
  ERROR
    IN_KW "in"
  WHITESPACE " "
  ERROR
    ARRAY_KW "array"
  WHITESPACE " "
  ERROR
    PARAM "$1"
  WHITESPACE "\n  "
  ERROR
    IDENT "loop"
  WHITESPACE "\n    "
  ERROR
    IDENT "raise"
  WHITESPACE " "
  ERROR
    IDENT "notice"
  WHITESPACE " "
  ERROR
    STRING "'%'"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  WHITESPACE " "
  ERROR
    IDENT "loop"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$ language plpgsql;\n\nselect foreach_test(ARRAY[1,2,3,4]);\nselect foreach_test(ARRAY[[1,2],[3,4]]);\n\ncreate or replace function foreach_test(anyarray)\nreturns void as $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "x"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    IDENT "foreach"
  WHITESPACE " "
  ERROR
    IDENT "x"
  WHITESPACE " "
  ERROR
    IDENT "slice"
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  WHITESPACE " "
  ERROR
    IN_KW "in"
  WHITESPACE " "
  ERROR
    ARRAY_KW "array"
  WHITESPACE " "
  ERROR
    PARAM "$1"
  WHITESPACE "\n  "
  ERROR
    IDENT "loop"
  WHITESPACE "\n    "
  ERROR
    IDENT "raise"
  WHITESPACE " "
  ERROR
    IDENT "notice"
  WHITESPACE " "
  ERROR
    STRING "'%'"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  WHITESPACE " "
  ERROR
    IDENT "loop"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$ language plpgsql;\n\n-- should fail\nselect foreach_test(ARRAY[1,2,3,4]);\nselect foreach_test(ARRAY[[1,2],[3,4]]);\n\ncreate or replace function foreach_test(anyarray)\nreturns void as $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "x"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  ERROR
    L_BRACK "["
  ERROR
    R_BRACK "]"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    IDENT "foreach"
  WHITESPACE " "
  ERROR
    IDENT "x"
  WHITESPACE " "
  ERROR
    IDENT "slice"
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  WHITESPACE " "
  ERROR
    IN_KW "in"
  WHITESPACE " "
  ERROR
    ARRAY_KW "array"
  WHITESPACE " "
  ERROR
    PARAM "$1"
  WHITESPACE "\n  "
  ERROR
    IDENT "loop"
  WHITESPACE "\n    "
  ERROR
    IDENT "raise"
  WHITESPACE " "
  ERROR
    IDENT "notice"
  WHITESPACE " "
  ERROR
    STRING "'%'"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  WHITESPACE " "
  ERROR
    IDENT "loop"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$ language plpgsql;\n\nselect foreach_test(ARRAY[1,2,3,4]);\nselect foreach_test(ARRAY[[1,2],[3,4]]);\n\n-- higher level of slicing\ncreate or replace function foreach_test(anyarray)\nreturns void as $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "x"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  ERROR
    L_BRACK "["
  ERROR
    R_BRACK "]"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    IDENT "foreach"
  WHITESPACE " "
  ERROR
    IDENT "x"
  WHITESPACE " "
  ERROR
    IDENT "slice"
  WHITESPACE " "
  ERROR
    INT_NUMBER "2"
  WHITESPACE " "
  ERROR
    IN_KW "in"
  WHITESPACE " "
  ERROR
    ARRAY_KW "array"
  WHITESPACE " "
  ERROR
    PARAM "$1"
  WHITESPACE "\n  "
  ERROR
    IDENT "loop"
  WHITESPACE "\n    "
  ERROR
    IDENT "raise"
  WHITESPACE " "
  ERROR
    IDENT "notice"
  WHITESPACE " "
  ERROR
    STRING "'%'"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  WHITESPACE " "
  ERROR
    IDENT "loop"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$ language plpgsql;\n\n-- should fail\nselect foreach_test(ARRAY[1,2,3,4]);\n-- ok\nselect foreach_test(ARRAY[[1,2],[3,4]]);\nselect foreach_test(ARRAY[[[1,2]],[[3,4]]]);\n\ncreate type xy_tuple AS (x int, y int);\n\n-- iteration over array of records\ncreate or replace function foreach_test(anyarray)\nreturns void as $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "r"
  WHITESPACE " "
  ERROR
    IDENT "record"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    IDENT "foreach"
  WHITESPACE " "
  ERROR
    IDENT "r"
  WHITESPACE " "
  ERROR
    IN_KW "in"
  WHITESPACE " "
  ERROR
    ARRAY_KW "array"
  WHITESPACE " "
  ERROR
    PARAM "$1"
  WHITESPACE "\n  "
  ERROR
    IDENT "loop"
  WHITESPACE "\n    "
  ERROR
    IDENT "raise"
  WHITESPACE " "
  ERROR
    IDENT "notice"
  WHITESPACE " "
  ERROR
    STRING "'%'"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "r"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  WHITESPACE " "
  ERROR
    IDENT "loop"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$ language plpgsql;\n\nselect foreach_test(ARRAY[(10,20),(40,69),(35,78)]::xy_tuple[]);\nselect foreach_test(ARRAY[[(10,20),(40,69)],[(35,78),(88,76)]]::xy_tuple[]);\n\ncreate or replace function foreach_test(anyarray)\nreturns void as $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "x"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  SEMICOLON ";"
  WHITESPACE " "
  ERROR
    IDENT "y"
  WHITESPACE " "
  ERROR
    INT_KW "int"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    IDENT "foreach"
  WHITESPACE " "
  ERROR
    IDENT "x"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "y"
  WHITESPACE " "
  ERROR
    IN_KW "in"
  WHITESPACE " "
  ERROR
    ARRAY_KW "array"
  WHITESPACE " "
  ERROR
    PARAM "$1"
  WHITESPACE "\n  "
  ERROR
    IDENT "loop"
  WHITESPACE "\n    "
  ERROR
    IDENT "raise"
  WHITESPACE " "
  ERROR
    IDENT "notice"
  WHITESPACE " "
  ERROR
    STRING "'x = %, y = %'"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "x"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "y"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  WHITESPACE " "
  ERROR
    IDENT "loop"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$ language plpgsql;\n\nselect foreach_test(ARRAY[(10,20),(40,69),(35,78)]::xy_tuple[]);\nselect foreach_test(ARRAY[[(10,20),(40,69)],[(35,78),(88,76)]]::xy_tuple[]);\n\n-- slicing over array of composite types\ncreate or replace function foreach_test(anyarray)\nreturns void as $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE " "
    NAME
      IDENT "x"
  WHITESPACE " "
  ERROR
    IDENT "xy_tuple"
  ERROR
    L_BRACK "["
  ERROR
    R_BRACK "]"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    IDENT "foreach"
  WHITESPACE " "
  ERROR
    IDENT "x"
  WHITESPACE " "
  ERROR
    IDENT "slice"
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  WHITESPACE " "
  ERROR
    IN_KW "in"
  WHITESPACE " "
  ERROR
    ARRAY_KW "array"
  WHITESPACE " "
  ERROR
    PARAM "$1"
  WHITESPACE "\n  "
  ERROR
    IDENT "loop"
  WHITESPACE "\n    "
  ERROR
    IDENT "raise"
  WHITESPACE " "
  ERROR
    IDENT "notice"
  WHITESPACE " "
  ERROR
    STRING "'%'"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    IDENT "x"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  WHITESPACE " "
  ERROR
    IDENT "loop"
  SEMICOLON ";"
  WHITESPACE "\n  "
  COMMIT_STMT
    END_KW "end"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    DOLLAR_QUOTED_STRING "$$ language plpgsql;\n\nselect foreach_test(ARRAY[(10,20),(40,69),(35,78)]::xy_tuple[]);\nselect foreach_test(ARRAY[[(10,20),(40,69)],[(35,78),(88,76)]]::xy_tuple[]);\n\ndrop function foreach_test(anyarray);\ndrop type xy_tuple;\n\n--\n-- Assorted tests for array subscript assignment\n--\n\ncreate temp table rtype (id int, ar text[]);\n\ncreate function arrayassign1() returns text[] language plpgsql as $$"
  WHITESPACE "\n"
  DECLARE_STMT
    DECLARE_KW "declare"
    WHITESPACE "\n "
    NAME
      IDENT "r"
  WHITESPACE " "
  ERROR
    IDENT "record"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  WHITESPACE "\n  "
  ERROR
    IDENT "r"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    ROW_KW "row"
  ERROR
    L_PAREN "("
  ERROR
    INT_NUMBER "12"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    STRING "'{foo,bar,baz}'"
  ERROR
    R_PAREN ")"
  ERROR
    COLON ":"
  ERROR
    COLON ":"
  ERROR
    IDENT "rtype"
  SEMICOLON ";"
  WHITESPACE "\n  "
  ERROR
    IDENT "r"
  ERROR
    DOT "."
  ERROR
    IDENT "ar"
  ERROR
    L_BRACK "["
  ERROR
    INT_NUMBER "2"
  ERROR
    R_BRACK "]"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    STRING "'replace'"
  SEMICOLON ";"
  WHITESPACE "\n  "
  ERROR
    RETURN_KW "return"
  WHITESPACE " "
  ERROR
    IDENT "r"
  ERROR
    DOT "."
  ERROR
    IDENT "ar"
  SEMICOLON ";"
  WHITESPACE "\n"
  ERROR
    IDENT "end$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "arrayassign1"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "arrayassign1"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- try again to exercise internal caching"
  WHITESPACE "\n\n"
  CREATE_DOMAIN_STMT
    CREATE_KW "create"
    WHITESPACE " "
    DOMAIN_KW "domain"
    WHITESPACE " "
    NAME
      IDENT "orderedarray"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      LITERAL
        INT_NUMBER "2"
      R_BRACK "]"
    WHITESPACE "\n  "
    CHECK_CONSTRAINT
      CONSTRAINT_KW "constraint"
      WHITESPACE " "
      NAME_REF
        IDENT "sorted"
      WHITESPACE " "
      CHECK_KW "check"
      WHITESPACE " "
      L_PAREN "("
      BIN_EXPR
        INDEX_EXPR
          NAME_REF
            VALUE_KW "value"
          L_BRACK "["
          LITERAL
            INT_NUMBER "1"
          R_BRACK "]"
        WHITESPACE " "
        L_ANGLE "<"
        WHITESPACE " "
        INDEX_EXPR
          NAME_REF
            VALUE_KW "value"
          L_BRACK "["
          LITERAL
            INT_NUMBER "2"
          R_BRACK "]"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CAST_EXPR
            LITERAL
              STRING "'{1,2}'"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    IDENT "orderedarray"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CAST_EXPR
            LITERAL
              STRING "'{2,1}'"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    IDENT "orderedarray"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "testoa"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "x2"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "x3"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "orderedarray"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare res orderedarray;\nbegin\n  res := array[x1, x2];\n  res[2] := x3;\n  return res;\nend$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "testoa"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              LITERAL
                INT_NUMBER "3"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "testoa"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              LITERAL
                INT_NUMBER "3"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- try again to exercise internal caching"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "testoa"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "3"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- fail at initial assign"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "testoa"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              LITERAL
                INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- fail at update"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "arrayassign1"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "testoa"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "x2"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "x3"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test handling of expanded arrays"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "returns_rw_array"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      ARRAY_TYPE
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        L_BRACK "["
        R_BRACK "]"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  declare r int[];\n  begin r := array[$1, $1]; return r; end;\n$$"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        STABLE_KW "stable"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "consumes_rw_array"
    PARAM_LIST
      L_PAREN "("
      PARAM
        ARRAY_TYPE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INT_KW "int"
          L_BRACK "["
          R_BRACK "]"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  begin return $1[1]; end;\n$$"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        STABLE_KW "stable"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "consumes_rw_array"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "returns_rw_array"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "42"
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- bug #14174"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    VERBOSE_KW "verbose"
    COMMA ","
    WHITESPACE " "
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "i"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "a"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE "\n  "
      PAREN_EXPR
        L_PAREN "("
        SELECT
          SELECT_CLAUSE
            SELECT_KW "select"
            WHITESPACE " "
            TARGET_LIST
              TARGET
                CALL_EXPR
                  NAME_REF
                    IDENT "returns_rw_array"
                  ARG_LIST
                    L_PAREN "("
                    LITERAL
                      INT_NUMBER "1"
                    R_PAREN ")"
                WHITESPACE " "
                AS_KW "as"
                WHITESPACE " "
                NAME
                  IDENT "a"
          WHITESPACE " "
          OFFSET_CLAUSE
            OFFSET_KW "offset"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
        R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "ss"
      COMMA ","
      WHITESPACE "\n  "
      LATERAL_KW "lateral"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "consumes_rw_array"
        ARG_LIST
          L_PAREN "("
          NAME_REF
            IDENT "a"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "i"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "i"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "a"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE "\n  "
      PAREN_EXPR
        L_PAREN "("
        SELECT
          SELECT_CLAUSE
            SELECT_KW "select"
            WHITESPACE " "
            TARGET_LIST
              TARGET
                CALL_EXPR
                  NAME_REF
                    IDENT "returns_rw_array"
                  ARG_LIST
                    L_PAREN "("
                    LITERAL
                      INT_NUMBER "1"
                    R_PAREN ")"
                WHITESPACE " "
                AS_KW "as"
                WHITESPACE " "
                NAME
                  IDENT "a"
          WHITESPACE " "
          OFFSET_CLAUSE
            OFFSET_KW "offset"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
        R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "ss"
      COMMA ","
      WHITESPACE "\n  "
      LATERAL_KW "lateral"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "consumes_rw_array"
        ARG_LIST
          L_PAREN "("
          NAME_REF
            IDENT "a"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "i"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    VERBOSE_KW "verbose"
    COMMA ","
    WHITESPACE " "
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "consumes_rw_array"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "a"
              R_PAREN ")"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "a"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "returns_rw_array"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "1"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "a"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "consumes_rw_array"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "a"
              R_PAREN ")"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "a"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "returns_rw_array"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "1"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "a"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    VERBOSE_KW "verbose"
    COMMA ","
    WHITESPACE " "
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "consumes_rw_array"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "a"
              R_PAREN ")"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "a"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE "\n  "
      PAREN_EXPR
        L_PAREN "("
        SELECT
          VALUES_KW "values"
          WHITESPACE " "
          L_PAREN "("
          CALL_EXPR
            NAME_REF
              IDENT "returns_rw_array"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              R_PAREN ")"
          R_PAREN ")"
          COMMA ","
          WHITESPACE " "
          L_PAREN "("
          CALL_EXPR
            NAME_REF
              IDENT "returns_rw_array"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "2"
              R_PAREN ")"
          R_PAREN ")"
        R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "v"
        COLUMN_LIST
          L_PAREN "("
          COLUMN
            NAME
              IDENT "a"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "consumes_rw_array"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "a"
              R_PAREN ")"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "a"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE "\n  "
      PAREN_EXPR
        L_PAREN "("
        SELECT
          VALUES_KW "values"
          WHITESPACE " "
          L_PAREN "("
          CALL_EXPR
            NAME_REF
              IDENT "returns_rw_array"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              R_PAREN ")"
          R_PAREN ")"
          COMMA ","
          WHITESPACE " "
          L_PAREN "("
          CALL_EXPR
            NAME_REF
              IDENT "returns_rw_array"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "2"
              R_PAREN ")"
          R_PAREN ")"
        R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "v"
        COLUMN_LIST
          L_PAREN "("
          COLUMN
            NAME
              IDENT "a"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\ndeclare a int[] := array[1,2];\nbegin\n  a := a || 3;\n  raise notice 'a = %', a;\nend$$"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test access to call stack"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "inner_func"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare _context text;\nbegin\n  get diagnostics _context = pg_context;\n  raise notice '***%***', _context;\n  -- lets do it again, just for fun..\n  get diagnostics _context = pg_context;\n  raise notice '***%***', _context;\n  raise notice 'lets make sure we didnt break anything';\n  return 2 * $1;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "outer_func"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  myresult int;\nbegin\n  raise notice 'calling down into inner_func()';\n  myresult := inner_func($1);\n  raise notice 'inner_func() done';\n  return myresult;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "outer_outer_func"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  myresult int;\nbegin\n  raise notice 'calling down into outer_func()';\n  myresult := outer_func($1);\n  raise notice 'outer_func() done';\n  return myresult;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "outer_outer_func"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "10"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- repeated call should work"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "outer_outer_func"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "20"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "outer_outer_func"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "outer_func"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "inner_func"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- access to call stack from exception"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "inner_func"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  _context text;\n  sx int := 5;\nbegin\n  begin\n    perform sx / 0;\n  exception\n    when division_by_zero then\n      get diagnostics _context = pg_context;\n      raise notice '***%***', _context;\n  end;\n\n  -- lets do it again, just for fun..\n  get diagnostics _context = pg_context;\n  raise notice '***%***', _context;\n  raise notice 'lets make sure we didnt break anything';\n  return 2 * $1;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "outer_func"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  myresult int;\nbegin\n  raise notice 'calling down into inner_func()';\n  myresult := inner_func($1);\n  raise notice 'inner_func() done';\n  return myresult;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "or"
      WHITESPACE " "
      REPLACE_KW "replace"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "outer_outer_func"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  myresult int;\nbegin\n  raise notice 'calling down into outer_func()';\n  myresult := outer_func($1);\n  raise notice 'outer_func() done';\n  return myresult;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "outer_outer_func"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "10"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- repeated call should work"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "outer_outer_func"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "20"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "outer_outer_func"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "outer_func"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "inner_func"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test pg_routine_oid"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "current_function"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "regprocedure"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\ndeclare\n  fn_oid regprocedure;\nbegin\n  get diagnostics fn_oid = pg_routine_oid;\n  return fn_oid;\nend;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "current_function"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'foo'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "current_function"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- shouldn't fail in DO, even though there's no useful data"
  WHITESPACE "\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\ndeclare\n  fn_oid oid;\nbegin\n  get diagnostics fn_oid = pg_routine_oid;\n  raise notice 'pg_routine_oid = %', fn_oid;\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test ASSERT"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\nbegin\n  assert 1=1;  -- should succeed\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\nbegin\n  assert 1=0;  -- should fail\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\nbegin\n  assert NULL;  -- should fail\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- check controlling GUC"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "check_asserts"
  WHITESPACE " "
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    OFF_KW "off"
  SEMICOLON ";"
  WHITESPACE "\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\nbegin\n  assert 1=0;  -- won't be tested\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "plpgsql"
  ERROR
    DOT "."
  ERROR
    IDENT "check_asserts"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test custom message"
  WHITESPACE "\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\ndeclare var text := 'some value';\nbegin\n  assert 1=0, format('assertion failed, var = \"%s\"', var);\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- ensure assertions are not trapped by 'others'"
  WHITESPACE "\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\nbegin\n  assert 1=0, 'unhandled assertion';\nexception when others then\n  null; -- do nothing\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test use of plpgsql in a domain check constraint (cf. bug #14414)"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "plpgsql_domain_check"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "val"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              BOOLEAN_KW "boolean"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin return val > 0; end\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "immutable"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_DOMAIN_STMT
    CREATE_KW "create"
    WHITESPACE " "
    DOMAIN_KW "domain"
    WHITESPACE " "
    NAME
      IDENT "plpgsql_domain"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INTEGER_KW "integer"
    WHITESPACE " "
    CHECK_CONSTRAINT
      CHECK_KW "check"
      L_PAREN "("
      CALL_EXPR
        NAME_REF
          IDENT "plpgsql_domain_check"
        ARG_LIST
          L_PAREN "("
          NAME_REF
            VALUE_KW "value"
          R_PAREN ")"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\ndeclare v_test plpgsql_domain;\nbegin\n  v_test := 1;\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\ndeclare v_test plpgsql_domain := 1;\nbegin\n  v_test := 0;  -- fail\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test handling of expanded array passed to a domain constraint (bug #14472)"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "plpgsql_arr_domain_check"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "val"
        WHITESPACE " "
        ARRAY_TYPE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INT_KW "int"
          L_BRACK "["
          R_BRACK "]"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              BOOLEAN_KW "boolean"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin return val[1] > 0; end\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "immutable"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_DOMAIN_STMT
    CREATE_KW "create"
    WHITESPACE " "
    DOMAIN_KW "domain"
    WHITESPACE " "
    NAME
      IDENT "plpgsql_arr_domain"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
    WHITESPACE " "
    CHECK_CONSTRAINT
      CHECK_KW "check"
      L_PAREN "("
      CALL_EXPR
        NAME_REF
          IDENT "plpgsql_arr_domain_check"
        ARG_LIST
          L_PAREN "("
          NAME_REF
            VALUE_KW "value"
          R_PAREN ")"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\ndeclare v_test plpgsql_arr_domain;\nbegin\n  v_test := array[1];\n  v_test := v_test || 2;\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DO_STMT
    DO_KW "do"
    WHITESPACE " "
    LITERAL
      DOLLAR_QUOTED_STRING "$$\ndeclare v_test plpgsql_arr_domain := array[1];\nbegin\n  v_test := 0 || v_test;  -- fail\nend;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- test usage of transition tables in AFTER triggers"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "transition_table_base"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "id"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PRIMARY_KEY_CONSTRAINT
          PRIMARY_KW "PRIMARY"
          WHITESPACE " "
          KEY_KW "KEY"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "val"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "transition_table_base_ins_func"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n  "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE "\n  "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE "\n"
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nDECLARE\n  t text;\n  l text;\nBEGIN\n  t = '';\n  FOR l IN EXECUTE\n           $q$\n             EXPLAIN (TIMING off, COSTS off, VERBOSE on)\n             SELECT * FROM newtable\n           $q$ LOOP\n    t = t || l || E'\\n';\n  END LOOP;\n\n  RAISE INFO '%', t;\n  RETURN new;\nEND;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "transition_table_base_ins_trig"
    WHITESPACE "\n  "
    AFTER_KW "AFTER"
    WHITESPACE " "
    INSERT_KW "INSERT"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_base"
    WHITESPACE "\n  "
    REFERENCING_KW "REFERENCING"
    WHITESPACE " "
    OLD_KW "OLD"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "oldtable"
    WHITESPACE " "
    NEW_KW "NEW"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "newtable"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    EACH_KW "EACH"
    WHITESPACE " "
    STATEMENT_KW "STATEMENT"
    WHITESPACE "\n  "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "transition_table_base_ins_func"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "transition_table_base_ins_trig"
    WHITESPACE "\n  "
    AFTER_KW "AFTER"
    WHITESPACE " "
    INSERT_KW "INSERT"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_base"
    WHITESPACE "\n  "
    REFERENCING_KW "REFERENCING"
    WHITESPACE " "
    NEW_KW "NEW"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "newtable"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    EACH_KW "EACH"
    WHITESPACE " "
    STATEMENT_KW "STATEMENT"
    WHITESPACE "\n  "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "transition_table_base_ins_func"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_base"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'One'"
      R_PAREN ")"
      COMMA ","
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "2"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Two'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_base"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "3"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Three'"
      R_PAREN ")"
      COMMA ","
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "4"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Four'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "transition_table_base_upd_func"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n  "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE "\n  "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE "\n"
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nDECLARE\n  t text;\n  l text;\nBEGIN\n  t = '';\n  FOR l IN EXECUTE\n           $q$\n             EXPLAIN (TIMING off, COSTS off, VERBOSE on)\n             SELECT * FROM oldtable ot FULL JOIN newtable nt USING (id)\n           $q$ LOOP\n    t = t || l || E'\\n';\n  END LOOP;\n\n  RAISE INFO '%', t;\n  RETURN new;\nEND;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "transition_table_base_upd_trig"
    WHITESPACE "\n  "
    AFTER_KW "AFTER"
    WHITESPACE " "
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_base"
    WHITESPACE "\n  "
    REFERENCING_KW "REFERENCING"
    WHITESPACE " "
    OLD_KW "OLD"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "oldtable"
    WHITESPACE " "
    NEW_KW "NEW"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "newtable"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    EACH_KW "EACH"
    WHITESPACE " "
    STATEMENT_KW "STATEMENT"
    WHITESPACE "\n  "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "transition_table_base_upd_func"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  UPDATE_STMT
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_base"
    WHITESPACE "\n  "
    SET_KW "SET"
    WHITESPACE " "
    NAME_REF
      IDENT "val"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    BIN_EXPR
      LITERAL
        STRING "'*'"
      WHITESPACE " "
      CUSTOM_OP
        PIPE "|"
        PIPE "|"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "val"
        WHITESPACE " "
        CUSTOM_OP
          PIPE "|"
          PIPE "|"
        WHITESPACE " "
        LITERAL
          STRING "'*'"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BETWEEN_EXPR
        NAME_REF
          IDENT "id"
        WHITESPACE " "
        BETWEEN_KW "BETWEEN"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "2"
        WHITESPACE " "
        AND_KW "AND"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "3"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "transition_table_level1"
    WHITESPACE "\n"
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n      "
      COLUMN
        NAME_REF
          IDENT "level1_no"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "serial"
        WHITESPACE " "
        NOT_NULL_CONSTRAINT
          NOT_KW "NOT"
          WHITESPACE " "
          NULL_KW "NULL"
      WHITESPACE " "
      COMMA ","
      WHITESPACE "\n      "
      COLUMN
        NAME_REF
          IDENT "level1_node_name"
        WHITESPACE " "
        CHAR_TYPE
          VARCHAR_KW "varchar"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "255"
            R_PAREN ")"
      COMMA ","
      WHITESPACE "\n       "
      PRIMARY_KEY_CONSTRAINT
        PRIMARY_KW "PRIMARY"
        WHITESPACE " "
        KEY_KW "KEY"
        WHITESPACE " "
        COLUMN_LIST
          L_PAREN "("
          COLUMN
            NAME_REF
              IDENT "level1_no"
          R_PAREN ")"
      WHITESPACE "\n"
      R_PAREN ")"
    WHITESPACE " "
    WITHOUT_KW "WITHOUT"
    WHITESPACE " "
    OIDS_KW "OIDS"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "transition_table_level2"
    WHITESPACE "\n"
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n      "
      COLUMN
        NAME_REF
          IDENT "level2_no"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "serial"
        WHITESPACE " "
        NOT_NULL_CONSTRAINT
          NOT_KW "NOT"
          WHITESPACE " "
          NULL_KW "NULL"
      WHITESPACE " "
      COMMA ","
      WHITESPACE "\n      "
      COLUMN
        NAME_REF
          IDENT "parent_no"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        NOT_NULL_CONSTRAINT
          NOT_KW "NOT"
          WHITESPACE " "
          NULL_KW "NULL"
      COMMA ","
      WHITESPACE "\n      "
      COLUMN
        NAME_REF
          IDENT "level1_node_name"
        WHITESPACE " "
        CHAR_TYPE
          VARCHAR_KW "varchar"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "255"
            R_PAREN ")"
      COMMA ","
      WHITESPACE "\n       "
      PRIMARY_KEY_CONSTRAINT
        PRIMARY_KW "PRIMARY"
        WHITESPACE " "
        KEY_KW "KEY"
        WHITESPACE " "
        COLUMN_LIST
          L_PAREN "("
          COLUMN
            NAME_REF
              IDENT "level2_no"
          R_PAREN ")"
      WHITESPACE "\n"
      R_PAREN ")"
    WHITESPACE " "
    WITHOUT_KW "WITHOUT"
    WHITESPACE " "
    OIDS_KW "OIDS"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "transition_table_status"
    WHITESPACE "\n"
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n      "
      COLUMN
        NAME_REF
          LEVEL_KW "level"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        NOT_NULL_CONSTRAINT
          NOT_KW "NOT"
          WHITESPACE " "
          NULL_KW "NULL"
      COMMA ","
      WHITESPACE "\n      "
      COLUMN
        NAME_REF
          IDENT "node_no"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        NOT_NULL_CONSTRAINT
          NOT_KW "NOT"
          WHITESPACE " "
          NULL_KW "NULL"
      COMMA ","
      WHITESPACE "\n      "
      COLUMN
        NAME_REF
          IDENT "status"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE "\n       "
      PRIMARY_KEY_CONSTRAINT
        PRIMARY_KW "PRIMARY"
        WHITESPACE " "
        KEY_KW "KEY"
        WHITESPACE " "
        COLUMN_LIST
          L_PAREN "("
          COLUMN
            NAME_REF
              LEVEL_KW "level"
          COMMA ","
          WHITESPACE " "
          COLUMN
            NAME_REF
              IDENT "node_no"
          R_PAREN ")"
      WHITESPACE "\n"
      R_PAREN ")"
    WHITESPACE " "
    WITHOUT_KW "WITHOUT"
    WHITESPACE " "
    OIDS_KW "OIDS"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "transition_table_level1_ri_parent_del_func"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n  "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "TRIGGER"
    WHITESPACE "\n  "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE "\n"
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  DECLARE n bigint;\n  BEGIN\n    PERFORM FROM p JOIN transition_table_level2 c ON c.parent_no = p.level1_no;\n    IF FOUND THEN\n      RAISE EXCEPTION 'RI error';\n    END IF;\n    RETURN NULL;\n  END;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "transition_table_level1_ri_parent_del_trigger"
    WHITESPACE "\n  "
    AFTER_KW "AFTER"
    WHITESPACE " "
    DELETE_KW "DELETE"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level1"
    WHITESPACE "\n  "
    REFERENCING_KW "REFERENCING"
    WHITESPACE " "
    OLD_KW "OLD"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "p"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    EACH_KW "EACH"
    WHITESPACE " "
    STATEMENT_KW "STATEMENT"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE "\n    "
    CALL_EXPR
      NAME_REF
        IDENT "transition_table_level1_ri_parent_del_func"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "transition_table_level1_ri_parent_upd_func"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n  "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "TRIGGER"
    WHITESPACE "\n  "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE "\n"
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  DECLARE\n    x int;\n  BEGIN\n    WITH p AS (SELECT level1_no, sum(delta) cnt\n                 FROM (SELECT level1_no, 1 AS delta FROM i\n                       UNION ALL\n                       SELECT level1_no, -1 AS delta FROM d) w\n                 GROUP BY level1_no\n                 HAVING sum(delta) < 0)\n    SELECT level1_no\n      FROM p JOIN transition_table_level2 c ON c.parent_no = p.level1_no\n      INTO x;\n    IF FOUND THEN\n      RAISE EXCEPTION 'RI error';\n    END IF;\n    RETURN NULL;\n  END;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "transition_table_level1_ri_parent_upd_trigger"
    WHITESPACE "\n  "
    AFTER_KW "AFTER"
    WHITESPACE " "
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level1"
    WHITESPACE "\n  "
    REFERENCING_KW "REFERENCING"
    WHITESPACE " "
    OLD_KW "OLD"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "d"
    WHITESPACE " "
    NEW_KW "NEW"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "i"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    EACH_KW "EACH"
    WHITESPACE " "
    STATEMENT_KW "STATEMENT"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE "\n    "
    CALL_EXPR
      NAME_REF
        IDENT "transition_table_level1_ri_parent_upd_func"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "transition_table_level2_ri_child_insupd_func"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n  "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "TRIGGER"
    WHITESPACE "\n  "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE "\n"
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  BEGIN\n    PERFORM FROM i\n      LEFT JOIN transition_table_level1 p\n        ON p.level1_no IS NOT NULL AND p.level1_no = i.parent_no\n      WHERE p.level1_no IS NULL;\n    IF FOUND THEN\n      RAISE EXCEPTION 'RI error';\n    END IF;\n    RETURN NULL;\n  END;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "transition_table_level2_ri_child_ins_trigger"
    WHITESPACE "\n  "
    AFTER_KW "AFTER"
    WHITESPACE " "
    INSERT_KW "INSERT"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level2"
    WHITESPACE "\n  "
    REFERENCING_KW "REFERENCING"
    WHITESPACE " "
    NEW_KW "NEW"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "i"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    EACH_KW "EACH"
    WHITESPACE " "
    STATEMENT_KW "STATEMENT"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE "\n    "
    CALL_EXPR
      NAME_REF
        IDENT "transition_table_level2_ri_child_insupd_func"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "transition_table_level2_ri_child_upd_trigger"
    WHITESPACE "\n  "
    AFTER_KW "AFTER"
    WHITESPACE " "
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level2"
    WHITESPACE "\n  "
    REFERENCING_KW "REFERENCING"
    WHITESPACE " "
    NEW_KW "NEW"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "i"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    EACH_KW "EACH"
    WHITESPACE " "
    STATEMENT_KW "STATEMENT"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE "\n    "
    CALL_EXPR
      NAME_REF
        IDENT "transition_table_level2_ri_child_insupd_func"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- create initial test data"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level1"
    WHITESPACE " "
    COLUMN_LIST
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "level1_no"
      R_PAREN ")"
    WHITESPACE "\n  "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            CALL_EXPR
              NAME_REF
                IDENT "generate_series"
              ARG_LIST
                L_PAREN "("
                LITERAL
                  INT_NUMBER "1"
                COMMA ","
                LITERAL
                  INT_NUMBER "200"
                R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ANALYZE_STMT
    ANALYZE_KW "ANALYZE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level2"
    WHITESPACE " "
    COLUMN_LIST
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "level2_no"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "parent_no"
      R_PAREN ")"
    WHITESPACE "\n  "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            NAME_REF
              IDENT "level2_no"
          COMMA ","
          WHITESPACE " "
          TARGET
            BIN_EXPR
              BIN_EXPR
                NAME_REF
                  IDENT "level2_no"
                WHITESPACE " "
                SLASH "/"
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "50"
              WHITESPACE " "
              PLUS "+"
              WHITESPACE " "
              LITERAL
                INT_NUMBER "1"
            WHITESPACE " "
            AS_KW "AS"
            WHITESPACE " "
            NAME
              IDENT "parent_no"
      WHITESPACE "\n    "
      FROM_CLAUSE
        FROM_KW "FROM"
        WHITESPACE " "
        CALL_EXPR
          NAME_REF
            IDENT "generate_series"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            LITERAL
              INT_NUMBER "9999"
            R_PAREN ")"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "level2_no"
  SEMICOLON ";"
  WHITESPACE "\n"
  ANALYZE_STMT
    ANALYZE_KW "ANALYZE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level2"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_status"
    WHITESPACE " "
    COLUMN_LIST
      L_PAREN "("
      COLUMN
        NAME_REF
          LEVEL_KW "level"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "node_no"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "status"
      R_PAREN ")"
    WHITESPACE "\n  "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            LITERAL
              INT_NUMBER "1"
          COMMA ","
          WHITESPACE " "
          TARGET
            NAME_REF
              IDENT "level1_no"
          COMMA ","
          WHITESPACE " "
          TARGET
            LITERAL
              INT_NUMBER "0"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "FROM"
        WHITESPACE " "
        NAME_REF
          IDENT "transition_table_level1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_status"
    WHITESPACE " "
    COLUMN_LIST
      L_PAREN "("
      COLUMN
        NAME_REF
          LEVEL_KW "level"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "node_no"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "status"
      R_PAREN ")"
    WHITESPACE "\n  "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            LITERAL
              INT_NUMBER "2"
          COMMA ","
          WHITESPACE " "
          TARGET
            NAME_REF
              IDENT "level2_no"
          COMMA ","
          WHITESPACE " "
          TARGET
            LITERAL
              INT_NUMBER "0"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "FROM"
        WHITESPACE " "
        NAME_REF
          IDENT "transition_table_level2"
  SEMICOLON ";"
  WHITESPACE "\n"
  ANALYZE_STMT
    ANALYZE_KW "ANALYZE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_status"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level1"
    COLUMN_LIST
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "level1_no"
      R_PAREN ")"
    WHITESPACE "\n  "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            CALL_EXPR
              NAME_REF
                IDENT "generate_series"
              ARG_LIST
                L_PAREN "("
                LITERAL
                  INT_NUMBER "201"
                COMMA ","
                LITERAL
                  INT_NUMBER "1000"
                R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ANALYZE_STMT
    ANALYZE_KW "ANALYZE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- behave reasonably if someone tries to modify a transition table"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "transition_table_level2_bad_usage_func"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n  "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "TRIGGER"
    WHITESPACE "\n  "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE "\n"
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\n  BEGIN\n    INSERT INTO dx VALUES (1000000, 1000000, 'x');\n    RETURN NULL;\n  END;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "transition_table_level2_bad_usage_trigger"
    WHITESPACE "\n  "
    AFTER_KW "AFTER"
    WHITESPACE " "
    DELETE_KW "DELETE"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level2"
    WHITESPACE "\n  "
    REFERENCING_KW "REFERENCING"
    WHITESPACE " "
    OLD_KW "OLD"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "dx"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    EACH_KW "EACH"
    WHITESPACE " "
    STATEMENT_KW "STATEMENT"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE "\n    "
    CALL_EXPR
      NAME_REF
        IDENT "transition_table_level2_bad_usage_func"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DELETE_STMT
    DELETE_KW "DELETE"
    WHITESPACE " "
    FROM_KW "FROM"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level2"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BETWEEN_EXPR
        NAME_REF
          IDENT "level2_no"
        WHITESPACE " "
        BETWEEN_KW "BETWEEN"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "301"
        WHITESPACE " "
        AND_KW "AND"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "305"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_TRIGGER_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level2_bad_usage_trigger"
    WHITESPACE "\n  "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level2"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- attempt modifications which would break RI (should all fail)"
  WHITESPACE "\n"
  DELETE_STMT
    DELETE_KW "DELETE"
    WHITESPACE " "
    FROM_KW "FROM"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level1"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "level1_no"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "25"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  UPDATE_STMT
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level1"
    WHITESPACE " "
    SET_KW "SET"
    WHITESPACE " "
    NAME_REF
      IDENT "level1_no"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PREFIX_EXPR
      MINUS "-"
      LITERAL
        INT_NUMBER "1"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "level1_no"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "30"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level2"
    WHITESPACE " "
    COLUMN_LIST
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "level2_no"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "parent_no"
      R_PAREN ")"
    WHITESPACE "\n  "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "10000"
      COMMA ","
      WHITESPACE " "
      LITERAL
        INT_NUMBER "10000"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  UPDATE_STMT
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level2"
    WHITESPACE " "
    SET_KW "SET"
    WHITESPACE " "
    NAME_REF
      IDENT "parent_no"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      INT_NUMBER "2000"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "level2_no"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "40"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- attempt modifications which would not break RI (should all succeed)"
  WHITESPACE "\n"
  DELETE_STMT
    DELETE_KW "DELETE"
    WHITESPACE " "
    FROM_KW "FROM"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level1"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BETWEEN_EXPR
        NAME_REF
          IDENT "level1_no"
        WHITESPACE " "
        BETWEEN_KW "BETWEEN"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "201"
        WHITESPACE " "
        AND_KW "AND"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "1000"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DELETE_STMT
    DELETE_KW "DELETE"
    WHITESPACE " "
    FROM_KW "FROM"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level1"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BETWEEN_EXPR
        NAME_REF
          IDENT "level1_no"
        WHITESPACE " "
        BETWEEN_KW "BETWEEN"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "100000000"
        WHITESPACE " "
        AND_KW "AND"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "100000010"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "count"
            ARG_LIST
              L_PAREN "("
              STAR "*"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "transition_table_level1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DELETE_STMT
    DELETE_KW "DELETE"
    WHITESPACE " "
    FROM_KW "FROM"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "transition_table_level2"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BETWEEN_EXPR
        NAME_REF
          IDENT "level2_no"
        WHITESPACE " "
        BETWEEN_KW "BETWEEN"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "211"
        WHITESPACE " "
        AND_KW "AND"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "220"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "count"
            ARG_LIST
              L_PAREN "("
              STAR "*"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "transition_table_level2"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "alter_table_under_transition_tables"
    WHITESPACE "\n"
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n  "
      COLUMN
        NAME_REF
          IDENT "id"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PRIMARY_KEY_CONSTRAINT
          PRIMARY_KW "PRIMARY"
          WHITESPACE " "
          KEY_KW "KEY"
      COMMA ","
      WHITESPACE "\n  "
      COLUMN
        NAME_REF
          NAME_KW "name"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "alter_table_under_transition_tables_upd_func"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n  "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "TRIGGER"
    WHITESPACE "\n  "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE "\n"
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nBEGIN\n  RAISE WARNING 'old table = %, new table = %',\n                  (SELECT string_agg(id || '=' || name, ',') FROM d),\n                  (SELECT string_agg(id || '=' || name, ',') FROM i);\n  RAISE NOTICE 'one = %', (SELECT 1 FROM alter_table_under_transition_tables LIMIT 1);\n  RETURN NULL;\nEND;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, TRUNCATE is not compatible with transition tables"
  WHITESPACE "\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "alter_table_under_transition_tables_upd_trigger"
    WHITESPACE "\n  "
    AFTER_KW "AFTER"
    WHITESPACE " "
    TRUNCATE_KW "TRUNCATE"
    WHITESPACE " "
    OR_KW "OR"
    WHITESPACE " "
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "alter_table_under_transition_tables"
    WHITESPACE "\n  "
    REFERENCING_KW "REFERENCING"
    WHITESPACE " "
    OLD_KW "OLD"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "d"
    WHITESPACE " "
    NEW_KW "NEW"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "i"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    EACH_KW "EACH"
    WHITESPACE " "
    STATEMENT_KW "STATEMENT"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE "\n    "
    CALL_EXPR
      NAME_REF
        IDENT "alter_table_under_transition_tables_upd_func"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should work"
  WHITESPACE "\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "alter_table_under_transition_tables_upd_trigger"
    WHITESPACE "\n  "
    AFTER_KW "AFTER"
    WHITESPACE " "
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "alter_table_under_transition_tables"
    WHITESPACE "\n  "
    REFERENCING_KW "REFERENCING"
    WHITESPACE " "
    OLD_KW "OLD"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "d"
    WHITESPACE " "
    NEW_KW "NEW"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "i"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    EACH_KW "EACH"
    WHITESPACE " "
    STATEMENT_KW "STATEMENT"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE "\n    "
    CALL_EXPR
      NAME_REF
        IDENT "alter_table_under_transition_tables_upd_func"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "alter_table_under_transition_tables"
    WHITESPACE "\n  "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'1'"
      R_PAREN ")"
      COMMA ","
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "2"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'2'"
      R_PAREN ")"
      COMMA ","
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "3"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'3'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "alter_table_under_transition_tables"
    WHITESPACE "\n  "
    SET_KW "SET"
    WHITESPACE " "
    NAME_REF
      NAME_KW "name"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    BIN_EXPR
      NAME_REF
        NAME_KW "name"
      WHITESPACE " "
      CUSTOM_OP
        PIPE "|"
        PIPE "|"
      WHITESPACE " "
      NAME_REF
        NAME_KW "name"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- now change 'name' to an integer to see what happens..."
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "ALTER"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "alter_table_under_transition_tables"
    WHITESPACE "\n  "
    ALTER_COLUMN
      ALTER_KW "ALTER"
      WHITESPACE " "
      COLUMN_KW "COLUMN"
      WHITESPACE " "
      NAME_KW "name"
      WHITESPACE " "
      SET_TYPE
        TYPE_KW "TYPE"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        USING_KW "USING"
        WHITESPACE " "
        CAST_EXPR
          NAME_REF
            NAME_KW "name"
          COLON2 "::"
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  INTEGER_KW "integer"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "alter_table_under_transition_tables"
    WHITESPACE "\n  "
    SET_KW "SET"
    WHITESPACE " "
    NAME_REF
      NAME_KW "name"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    CAST_EXPR
      PAREN_EXPR
        L_PAREN "("
        BIN_EXPR
          CAST_EXPR
            NAME_REF
              NAME_KW "name"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    TEXT_KW "text"
          WHITESPACE " "
          CUSTOM_OP
            PIPE "|"
            PIPE "|"
          WHITESPACE " "
          CAST_EXPR
            NAME_REF
              NAME_KW "name"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    TEXT_KW "text"
        R_PAREN ")"
      COLON2 "::"
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "integer"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- now drop column 'name'"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "ALTER"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "alter_table_under_transition_tables"
    WHITESPACE "\n  "
    DROP_COLUMN
      DROP_KW "DROP"
      WHITESPACE " "
      COLUMN_KW "column"
      WHITESPACE " "
      NAME_REF
        NAME_KW "name"
  SEMICOLON ";"
  WHITESPACE "\n"
  UPDATE_STMT
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "alter_table_under_transition_tables"
    WHITESPACE "\n  "
    SET_KW "SET"
    WHITESPACE " "
    NAME_REF
      IDENT "id"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    NAME_REF
      IDENT "id"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test multiple reference to a transition table"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "multi_test"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "i"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "multi_test"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "multi_test_trig"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TRIGGER_KW "trigger"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nBEGIN\n    RAISE NOTICE 'count = %', (SELECT COUNT(*) FROM new_test);\n    RAISE NOTICE 'count union = %',\n      (SELECT COUNT(*)\n       FROM (SELECT * FROM new_test UNION ALL SELECT * FROM new_test) ss);\n    RETURN NULL;\nEND$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "my_trigger"
    WHITESPACE " "
    AFTER_KW "AFTER"
    WHITESPACE " "
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "multi_test"
    WHITESPACE "\n  "
    REFERENCING_KW "REFERENCING"
    WHITESPACE " "
    NEW_KW "NEW"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    NAME_REF
      IDENT "new_test"
    WHITESPACE " "
    OLD_KW "OLD"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE " "
    NAME_REF
      IDENT "old_test"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    EACH_KW "EACH"
    WHITESPACE " "
    STATEMENT_KW "STATEMENT"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE " "
    CALL_EXPR
      NAME_REF
        IDENT "multi_test_trig"
      ARG_LIST
        L_PAREN "("
        R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  UPDATE_STMT
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "multi_test"
    WHITESPACE " "
    SET_KW "SET"
    WHITESPACE " "
    NAME_REF
      IDENT "i"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    NAME_REF
      IDENT "i"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_TABLE
    DROP_KW "DROP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "multi_test"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "multi_test_trig"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Check type parsing and record fetching from partitioned tables"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "partitioned_table"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
    WHITESPACE " "
    PARTITION_KW "PARTITION"
    WHITESPACE " "
    BY_KW "BY"
    WHITESPACE " "
    IDENT "LIST"
    WHITESPACE " "
    L_PAREN "("
    NAME_REF
      IDENT "a"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pt_part1"
    WHITESPACE " "
    PARTITION_KW "PARTITION"
    WHITESPACE " "
    OF_KW "OF"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "partitioned_table"
    WHITESPACE " "
    FOR_KW "FOR"
    WHITESPACE " "
    VALUES_KW "VALUES"
    WHITESPACE " "
    IN_KW "IN"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      INT_NUMBER "1"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pt_part2"
    WHITESPACE " "
    PARTITION_KW "PARTITION"
    WHITESPACE " "
    OF_KW "OF"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "partitioned_table"
    WHITESPACE " "
    FOR_KW "FOR"
    WHITESPACE " "
    VALUES_KW "VALUES"
    WHITESPACE " "
    IN_KW "IN"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      INT_NUMBER "2"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "partitioned_table"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Row 1'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "partitioned_table"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "2"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'Row 2'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "get_from_partitioned_table"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "partitioned_table"
  ERROR
    DOT "."
  ERROR
    IDENT "a"
  ERROR
    PERCENT "%"
  ERROR
    TYPE_KW "type"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  ERROR
    RETURNS_KW "RETURNS"
  WHITESPACE " "
  ERROR
    IDENT "partitioned_table"
  WHITESPACE " "
  ERROR
    AS_KW "AS"
  WHITESPACE " "
  ERROR
    DOLLAR_QUOTED_STRING "$$\nDECLARE\n    a_val partitioned_table.a%TYPE;\n    result partitioned_table%ROWTYPE;\nBEGIN\n    a_val := $1;\n    SELECT * INTO result FROM partitioned_table WHERE a = a_val;\n    RETURN result;\nEND; $$"
  WHITESPACE " "
  ERROR
    LANGUAGE_KW "LANGUAGE"
  WHITESPACE " "
  ERROR
    IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "get_from_partitioned_table"
        ARG_LIST
          L_PAREN "("
          LITERAL
            INT_NUMBER "1"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        AS_KW "AS"
        WHITESPACE " "
        NAME
          IDENT "t"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "list_partitioned_table"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      SETOF_KW "SETOF"
      WHITESPACE " "
      PERCENT_TYPE
        PATH
          PATH
            PATH
              PATH_SEGMENT
                NAME_REF
                  IDENT "public"
            DOT "."
            PATH_SEGMENT
              NAME_REF
                IDENT "partitioned_table"
          DOT "."
          PATH_SEGMENT
            NAME_REF
              IDENT "a"
        PERCENT_TYPE_CLAUSE
          PERCENT "%"
          TYPE_KW "TYPE"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nDECLARE\n    row public.partitioned_table%ROWTYPE;\n    a_val public.partitioned_table.a%TYPE;\nBEGIN\n    FOR row IN SELECT * FROM public.partitioned_table ORDER BY a LOOP\n        a_val := row.a;\n        RETURN NEXT a_val;\n    END LOOP;\n    RETURN;\nEND; $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "list_partitioned_table"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        AS_KW "AS"
        WHITESPACE " "
        NAME
          IDENT "t"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Check argument name is used instead of $n in error message"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "fx"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "x"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "WSlot"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nBEGIN\n  GET DIAGNOSTICS x = ROW_COUNT;\n  RETURN;\nEND; $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
---
ERROR@55613: expected command, found INT_NUMBER
ERROR@55615: expected command, found INT_NUMBER
ERROR@55618: expected command, found INT_NUMBER
ERROR@55621: expected command, found INT_NUMBER
ERROR@55625: expected command, found INT_NUMBER
ERROR@55629: expected command, found INT_NUMBER
ERROR@69836: expected EQ
ERROR@69836: expected config value, got DOT
ERROR@69836: expected SEMICOLON
ERROR@69836: expected command, found DOT
ERROR@69837: expected command, found IDENT
ERROR@69857: expected command, found TO_KW
ERROR@69860: expected command, found TRUE_KW
ERROR@72267: expected SEMICOLON
ERROR@72267: expected command, found DOT
ERROR@72268: expected command, found IDENT
ERROR@72672: expected EQ
ERROR@72672: expected config value, got DOT
ERROR@72672: expected SEMICOLON
ERROR@72672: expected command, found DOT
ERROR@72673: expected command, found IDENT
ERROR@72688: expected command, found TO_KW
ERROR@72691: expected command, found STRING
ERROR@72709: expected EQ
ERROR@72709: expected config value, got DOT
ERROR@72709: expected SEMICOLON
ERROR@72709: expected command, found DOT
ERROR@72710: expected command, found IDENT
ERROR@72725: expected command, found TO_KW
ERROR@72728: expected command, found STRING
ERROR@72747: expected EQ
ERROR@72747: expected config value, got DOT
ERROR@72747: expected SEMICOLON
ERROR@72747: expected command, found DOT
ERROR@72748: expected command, found IDENT
ERROR@72761: expected command, found TO_KW
ERROR@72764: expected command, found STRING
ERROR@72782: expected EQ
ERROR@72782: expected config value, got DOT
ERROR@72782: expected SEMICOLON
ERROR@72782: expected command, found DOT
ERROR@72783: expected command, found IDENT
ERROR@72796: expected command, found TO_KW
ERROR@72799: expected command, found STRING
ERROR@72863: expected EQ
ERROR@72863: expected config value, got DOT
ERROR@72863: expected SEMICOLON
ERROR@72863: expected command, found DOT
ERROR@72864: expected command, found IDENT
ERROR@72879: expected command, found TO_KW
ERROR@72882: expected command, found STRING
ERROR@73127: expected EQ
ERROR@73127: expected config value, got DOT
ERROR@73127: expected SEMICOLON
ERROR@73127: expected command, found DOT
ERROR@73128: expected command, found IDENT
ERROR@73143: expected command, found TO_KW
ERROR@73146: expected command, found STRING
ERROR@74051: expected EQ
ERROR@74051: expected config value, got DOT
ERROR@74051: expected SEMICOLON
ERROR@74051: expected command, found DOT
ERROR@74052: expected command, found IDENT
ERROR@74065: expected command, found TO_KW
ERROR@74068: expected command, found STRING
ERROR@74254: expected SEMICOLON
ERROR@74254: expected command, found DOT
ERROR@74255: expected command, found IDENT
ERROR@74282: expected SEMICOLON
ERROR@74282: expected command, found DOT
ERROR@74283: expected command, found IDENT
ERROR@74485: expected EQ
ERROR@74485: expected config value, got DOT
ERROR@74485: expected SEMICOLON
ERROR@74485: expected command, found DOT
ERROR@74486: expected command, found IDENT
ERROR@74501: expected command, found TO_KW
ERROR@74504: expected command, found STRING
ERROR@74620: expected EQ
ERROR@74620: expected config value, got DOT
ERROR@74620: expected SEMICOLON
ERROR@74620: expected command, found DOT
ERROR@74621: expected command, found IDENT
ERROR@74634: expected command, found TO_KW
ERROR@74637: expected command, found STRING
ERROR@74755: expected SEMICOLON
ERROR@74755: expected command, found DOT
ERROR@74756: expected command, found IDENT
ERROR@74783: expected SEMICOLON
ERROR@74783: expected command, found DOT
ERROR@74784: expected command, found IDENT
ERROR@74812: expected EQ
ERROR@74812: expected config value, got DOT
ERROR@74812: expected SEMICOLON
ERROR@74812: expected command, found DOT
ERROR@74813: expected command, found IDENT
ERROR@74828: expected command, found TO_KW
ERROR@74831: expected command, found STRING
ERROR@74989: expected EQ
ERROR@74989: expected config value, got DOT
ERROR@74989: expected SEMICOLON
ERROR@74989: expected command, found DOT
ERROR@74990: expected command, found IDENT
ERROR@75003: expected command, found TO_KW
ERROR@75006: expected command, found STRING
ERROR@75757: expected SEMICOLON
ERROR@75757: expected command, found DOT
ERROR@75758: expected command, found IDENT
ERROR@75785: expected SEMICOLON
ERROR@75785: expected command, found DOT
ERROR@75786: expected command, found IDENT
ERROR@91831: expected config value, got ON_KW
ERROR@91831: expected SEMICOLON
ERROR@91832: expected command, found ON_KW
ERROR@91860: expected R_PAREN
ERROR@91861: expected command, found OFF_KW
ERROR@91864: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@91864: expected SEMICOLON
ERROR@91864: expected command, found R_PAREN
ERROR@100395: expected config value, got ON_KW
ERROR@100395: expected SEMICOLON
ERROR@100396: expected command, found ON_KW
ERROR@101411: expected SEMICOLON
ERROR@101411: expected command, found PARAM
ERROR@101428: expected CURSOR_KW
ERROR@101428: expected FOR_KW
ERROR@101428: expected select stmt
ERROR@101428: expected SEMICOLON
ERROR@101429: expected command, found INT_KW
ERROR@101433: expected command, found EQ
ERROR@101435: expected command, found INT_NUMBER
ERROR@101449: expected SEMICOLON
ERROR@101458: expected command, found IDENT
ERROR@101460: expected command, found COLON
ERROR@101461: expected command, found EQ
ERROR@101463: expected command, found INT_NUMBER
ERROR@101465: expected command, found SLASH
ERROR@101467: expected command, found IDENT
ERROR@101487: expected command, found DOLLAR_QUOTED_STRING
ERROR@101765: expected CURSOR_KW
ERROR@101765: expected FOR_KW
ERROR@101765: expected select stmt
ERROR@101765: expected SEMICOLON
ERROR@101766: expected command, found INT_KW
ERROR@101770: expected command, found COLON
ERROR@101771: expected command, found EQ
ERROR@101773: expected command, found IDENT
ERROR@101775: expected command, found PLUS
ERROR@101777: expected command, found INT_NUMBER
ERROR@101795: expected SEMICOLON
ERROR@101798: expected command, found IDENT
ERROR@101804: expected command, found IDENT
ERROR@101811: expected command, found STRING
ERROR@101818: expected command, found COMMA
ERROR@101820: expected command, found IDENT
ERROR@101828: expected command, found DOLLAR_QUOTED_STRING
ERROR@101848: expected CURSOR_KW
ERROR@101848: expected FOR_KW
ERROR@101848: expected select stmt
ERROR@101848: expected SEMICOLON
ERROR@101849: expected command, found INT_KW
ERROR@101853: expected command, found COLON
ERROR@101854: expected command, found EQ
ERROR@101856: expected command, found IDENT
ERROR@101858: expected command, found PLUS
ERROR@101860: expected command, found INT_NUMBER
ERROR@101881: expected command, found IDENT
ERROR@101883: expected command, found INT_KW
ERROR@101887: expected command, found COLON
ERROR@101888: expected command, found EQ
ERROR@101890: expected command, found INT_NUMBER
ERROR@101899: expected SEMICOLON
ERROR@101902: expected command, found IDENT
ERROR@101908: expected command, found IDENT
ERROR@101915: expected command, found STRING
ERROR@101929: expected command, found COMMA
ERROR@101931: expected command, found IDENT
ERROR@101932: expected command, found COMMA
ERROR@101934: expected command, found IDENT
ERROR@101942: expected command, found DOLLAR_QUOTED_STRING
ERROR@101962: expected CURSOR_KW
ERROR@101962: expected FOR_KW
ERROR@101962: expected select stmt
ERROR@101962: expected SEMICOLON
ERROR@101963: expected command, found INT_KW
ERROR@101967: expected command, found COLON
ERROR@101968: expected command, found EQ
ERROR@101970: expected command, found INT_NUMBER
ERROR@101982: expected command, found IDENT
ERROR@101984: expected command, found INT_KW
ERROR@101988: expected command, found COLON
ERROR@101989: expected command, found EQ
ERROR@101991: expected command, found IDENT
ERROR@101993: expected command, found PLUS
ERROR@101995: expected command, found INT_NUMBER
ERROR@102003: expected SEMICOLON
ERROR@102006: expected command, found IDENT
ERROR@102012: expected command, found IDENT
ERROR@102019: expected command, found STRING
ERROR@102033: expected command, found COMMA
ERROR@102035: expected command, found IDENT
ERROR@102036: expected command, found COMMA
ERROR@102038: expected command, found IDENT
ERROR@102046: expected command, found DOLLAR_QUOTED_STRING
ERROR@102066: expected CURSOR_KW
ERROR@102066: expected FOR_KW
ERROR@102066: expected select stmt
ERROR@102066: expected SEMICOLON
ERROR@102067: expected command, found INT_KW
ERROR@102071: expected command, found COLON
ERROR@102072: expected command, found EQ
ERROR@102074: expected command, found INT_NUMBER
ERROR@102083: expected SEMICOLON
ERROR@102095: expected CURSOR_KW
ERROR@102095: expected FOR_KW
ERROR@102095: expected select stmt
ERROR@102095: expected SEMICOLON
ERROR@102096: expected command, found INT_KW
ERROR@102100: expected command, found COLON
ERROR@102101: expected command, found EQ
ERROR@102103: expected command, found IDENT
ERROR@102105: expected command, found PLUS
ERROR@102107: expected command, found INT_NUMBER
ERROR@102120: expected command, found IDENT
ERROR@102122: expected command, found INT_KW
ERROR@102126: expected command, found COLON
ERROR@102127: expected command, found EQ
ERROR@102129: expected command, found IDENT
ERROR@102131: expected command, found PLUS
ERROR@102133: expected command, found INT_NUMBER
ERROR@102146: expected command, found IDENT
ERROR@102148: expected command, found INT_KW
ERROR@102152: expected command, found COLON
ERROR@102153: expected command, found EQ
ERROR@102155: expected command, found IDENT
ERROR@102157: expected command, found STAR
ERROR@102159: expected command, found INT_NUMBER
ERROR@102170: expected SEMICOLON
ERROR@102175: expected command, found IDENT
ERROR@102181: expected command, found IDENT
ERROR@102188: expected command, found STRING
ERROR@102209: expected command, found COMMA
ERROR@102211: expected command, found IDENT
ERROR@102212: expected command, found COMMA
ERROR@102214: expected command, found IDENT
ERROR@102215: expected command, found COMMA
ERROR@102217: expected command, found IDENT
ERROR@102232: expected command, found DOLLAR_QUOTED_STRING
ERROR@102419: expected CURSOR_KW
ERROR@102419: expected FOR_KW
ERROR@102419: expected select stmt
ERROR@102419: expected SEMICOLON
ERROR@102420: expected command, found IDENT
ERROR@102430: expected command, found IDENT
ERROR@102433: expected command, found BIGINT_KW
ERROR@102440: expected command, found COLON
ERROR@102441: expected command, found EQ
ERROR@102443: expected command, found INT_NUMBER
ERROR@102452: expected SEMICOLON
ERROR@102455: expected command, found FOR_KW
ERROR@102459: expected command, found IDENT
ERROR@102461: expected command, found IN_KW
ERROR@102495: expected SEMICOLON
ERROR@102500: expected command, found RETURN_KW
ERROR@102507: expected command, found NEXT_KW
ERROR@102512: expected command, found IDENT
ERROR@102520: expected SEMICOLON
ERROR@102521: expected command, found IDENT
ERROR@102532: expected command, found DOLLAR_QUOTED_STRING
ERROR@102658: expected command, found POUND
ERROR@102659: expected command, found IDENT
ERROR@102677: expected command, found IDENT
ERROR@102699: expected CURSOR_KW
ERROR@102699: expected FOR_KW
ERROR@102699: expected select stmt
ERROR@102699: expected SEMICOLON
ERROR@102700: expected command, found IDENT
ERROR@102710: expected command, found IDENT
ERROR@102713: expected command, found BIGINT_KW
ERROR@102720: expected command, found COLON
ERROR@102721: expected command, found EQ
ERROR@102723: expected command, found INT_NUMBER
ERROR@102732: expected SEMICOLON
ERROR@102735: expected command, found FOR_KW
ERROR@102739: expected command, found IDENT
ERROR@102741: expected command, found IN_KW
ERROR@102775: expected SEMICOLON
ERROR@102780: expected command, found RETURN_KW
ERROR@102787: expected command, found NEXT_KW
ERROR@102792: expected command, found IDENT
ERROR@102800: expected SEMICOLON
ERROR@102801: expected command, found IDENT
ERROR@102812: expected command, found DOLLAR_QUOTED_STRING
ERROR@102938: expected command, found POUND
ERROR@102939: expected command, found IDENT
ERROR@102957: expected command, found IDENT
ERROR@102977: expected CURSOR_KW
ERROR@102977: expected FOR_KW
ERROR@102977: expected select stmt
ERROR@102977: expected SEMICOLON
ERROR@102978: expected command, found IDENT
ERROR@102988: expected command, found IDENT
ERROR@102991: expected command, found BIGINT_KW
ERROR@102998: expected command, found COLON
ERROR@102999: expected command, found EQ
ERROR@103001: expected command, found INT_NUMBER
ERROR@103010: expected SEMICOLON
ERROR@103013: expected command, found FOR_KW
ERROR@103017: expected command, found IDENT
ERROR@103019: expected command, found IN_KW
ERROR@103053: expected SEMICOLON
ERROR@103058: expected command, found RETURN_KW
ERROR@103065: expected command, found NEXT_KW
ERROR@103070: expected command, found IDENT
ERROR@103078: expected SEMICOLON
ERROR@103079: expected command, found IDENT
ERROR@103090: expected command, found DOLLAR_QUOTED_STRING
ERROR@103313: expected CURSOR_KW
ERROR@103313: expected FOR_KW
ERROR@103313: expected select stmt
ERROR@103313: expected SEMICOLON
ERROR@103314: expected command, found INT_KW
ERROR@103318: expected command, found COLON
ERROR@103319: expected command, found EQ
ERROR@103321: expected command, found INT_NUMBER
ERROR@103330: expected SEMICOLON
ERROR@103333: expected command, found FORWARD_KW
ERROR@103341: expected command, found COLON
ERROR@103342: expected command, found EQ
ERROR@103344: expected command, found FORWARD_KW
ERROR@103352: expected command, found STAR
ERROR@103354: expected command, found INT_NUMBER
ERROR@103359: expected command, found RETURN_KW
ERROR@103366: expected command, found FORWARD_KW
ERROR@103378: expected SEMICOLON
ERROR@103379: expected command, found DOLLAR_QUOTED_STRING
ERROR@103507: expected CURSOR_KW
ERROR@103507: expected FOR_KW
ERROR@103507: expected select stmt
ERROR@103507: expected SEMICOLON
ERROR@103508: expected command, found INT_KW
ERROR@103512: expected command, found COLON
ERROR@103513: expected command, found EQ
ERROR@103515: expected command, found INT_NUMBER
ERROR@103524: expected SEMICOLON
ERROR@103527: expected command, found RETURN_KW
ERROR@103534: expected command, found COLON
ERROR@103535: expected command, found EQ
ERROR@103537: expected command, found RETURN_KW
ERROR@103544: expected command, found PLUS
ERROR@103546: expected command, found INT_NUMBER
ERROR@103551: expected command, found RETURN_KW
ERROR@103558: expected command, found RETURN_KW
ERROR@103569: expected SEMICOLON
ERROR@103570: expected command, found DOLLAR_QUOTED_STRING
ERROR@103699: expected CURSOR_KW
ERROR@103699: expected FOR_KW
ERROR@103699: expected select stmt
ERROR@103699: expected SEMICOLON
ERROR@103700: expected command, found INT_KW
ERROR@103704: expected command, found COLON
ERROR@103705: expected command, found EQ
ERROR@103707: expected command, found INT_NUMBER
ERROR@103716: expected SEMICOLON
ERROR@103726: expected ON_KW
ERROR@103727: unexpected token
ERROR@103728: expected IS_KW
ERROR@103728: expected string literal or NULL
ERROR@103728: expected SEMICOLON
ERROR@103728: expected command, found EQ
ERROR@103737: expected ON_KW
ERROR@103738: unexpected token
ERROR@103739: expected IS_KW
ERROR@103739: expected string literal or NULL
ERROR@103739: expected SEMICOLON
ERROR@103740: expected command, found INT_NUMBER
ERROR@103806: expected command, found RETURN_KW
ERROR@103820: expected ON_KW
ERROR@103820: unexpected token
ERROR@103821: expected IS_KW
ERROR@103821: expected string literal or NULL
ERROR@103821: expected SEMICOLON
ERROR@103825: expected SEMICOLON
ERROR@103826: expected command, found DOLLAR_QUOTED_STRING
ERROR@104082: expected CURSOR_KW
ERROR@104082: expected FOR_KW
ERROR@104082: expected select stmt
ERROR@104082: expected SEMICOLON
ERROR@104083: expected command, found INT_KW
ERROR@104093: expected SEMICOLON
ERROR@104096: expected command, found IDENT
ERROR@104104: expected command, found IDENT
ERROR@104106: expected command, found IN_KW
ERROR@104109: expected command, found ARRAY_KW
ERROR@104115: expected command, found PARAM
ERROR@104120: expected command, found IDENT
ERROR@104129: expected command, found IDENT
ERROR@104135: expected command, found IDENT
ERROR@104142: expected command, found STRING
ERROR@104145: expected command, found COMMA
ERROR@104147: expected command, found IDENT
ERROR@104155: expected SEMICOLON
ERROR@104156: expected command, found IDENT
ERROR@104169: expected command, found DOLLAR_QUOTED_STRING
ERROR@104348: expected CURSOR_KW
ERROR@104348: expected FOR_KW
ERROR@104348: expected select stmt
ERROR@104348: expected SEMICOLON
ERROR@104349: expected command, found INT_KW
ERROR@104359: expected SEMICOLON
ERROR@104362: expected command, found IDENT
ERROR@104370: expected command, found IDENT
ERROR@104372: expected command, found IDENT
ERROR@104378: expected command, found INT_NUMBER
ERROR@104380: expected command, found IN_KW
ERROR@104383: expected command, found ARRAY_KW
ERROR@104389: expected command, found PARAM
ERROR@104394: expected command, found IDENT
ERROR@104403: expected command, found IDENT
ERROR@104409: expected command, found IDENT
ERROR@104416: expected command, found STRING
ERROR@104419: expected command, found COMMA
ERROR@104421: expected command, found IDENT
ERROR@104429: expected SEMICOLON
ERROR@104430: expected command, found IDENT
ERROR@104443: expected command, found DOLLAR_QUOTED_STRING
ERROR@104637: expected CURSOR_KW
ERROR@104637: expected FOR_KW
ERROR@104637: expected select stmt
ERROR@104637: expected SEMICOLON
ERROR@104638: expected command, found INT_KW
ERROR@104641: expected command, found L_BRACK
ERROR@104642: expected command, found R_BRACK
ERROR@104650: expected SEMICOLON
ERROR@104653: expected command, found IDENT
ERROR@104661: expected command, found IDENT
ERROR@104663: expected command, found IDENT
ERROR@104669: expected command, found INT_NUMBER
ERROR@104671: expected command, found IN_KW
ERROR@104674: expected command, found ARRAY_KW
ERROR@104680: expected command, found PARAM
ERROR@104685: expected command, found IDENT
ERROR@104694: expected command, found IDENT
ERROR@104700: expected command, found IDENT
ERROR@104707: expected command, found STRING
ERROR@104710: expected command, found COMMA
ERROR@104712: expected command, found IDENT
ERROR@104720: expected SEMICOLON
ERROR@104721: expected command, found IDENT
ERROR@104734: expected command, found DOLLAR_QUOTED_STRING
ERROR@104940: expected CURSOR_KW
ERROR@104940: expected FOR_KW
ERROR@104940: expected select stmt
ERROR@104940: expected SEMICOLON
ERROR@104941: expected command, found INT_KW
ERROR@104944: expected command, found L_BRACK
ERROR@104945: expected command, found R_BRACK
ERROR@104953: expected SEMICOLON
ERROR@104956: expected command, found IDENT
ERROR@104964: expected command, found IDENT
ERROR@104966: expected command, found IDENT
ERROR@104972: expected command, found INT_NUMBER
ERROR@104974: expected command, found IN_KW
ERROR@104977: expected command, found ARRAY_KW
ERROR@104983: expected command, found PARAM
ERROR@104988: expected command, found IDENT
ERROR@104997: expected command, found IDENT
ERROR@105003: expected command, found IDENT
ERROR@105010: expected command, found STRING
ERROR@105013: expected command, found COMMA
ERROR@105015: expected command, found IDENT
ERROR@105023: expected SEMICOLON
ERROR@105024: expected command, found IDENT
ERROR@105037: expected command, found DOLLAR_QUOTED_STRING
ERROR@105358: expected CURSOR_KW
ERROR@105358: expected FOR_KW
ERROR@105358: expected select stmt
ERROR@105358: expected SEMICOLON
ERROR@105359: expected command, found IDENT
ERROR@105372: expected SEMICOLON
ERROR@105375: expected command, found IDENT
ERROR@105383: expected command, found IDENT
ERROR@105385: expected command, found IN_KW
ERROR@105388: expected command, found ARRAY_KW
ERROR@105394: expected command, found PARAM
ERROR@105399: expected command, found IDENT
ERROR@105408: expected command, found IDENT
ERROR@105414: expected command, found IDENT
ERROR@105421: expected command, found STRING
ERROR@105424: expected command, found COMMA
ERROR@105426: expected command, found IDENT
ERROR@105434: expected SEMICOLON
ERROR@105435: expected command, found IDENT
ERROR@105448: expected command, found DOLLAR_QUOTED_STRING
ERROR@105691: expected CURSOR_KW
ERROR@105691: expected FOR_KW
ERROR@105691: expected select stmt
ERROR@105691: expected SEMICOLON
ERROR@105692: expected command, found INT_KW
ERROR@105697: expected command, found IDENT
ERROR@105699: expected command, found INT_KW
ERROR@105709: expected SEMICOLON
ERROR@105712: expected command, found IDENT
ERROR@105720: expected command, found IDENT
ERROR@105721: expected command, found COMMA
ERROR@105723: expected command, found IDENT
ERROR@105725: expected command, found IN_KW
ERROR@105728: expected command, found ARRAY_KW
ERROR@105734: expected command, found PARAM
ERROR@105739: expected command, found IDENT
ERROR@105748: expected command, found IDENT
ERROR@105754: expected command, found IDENT
ERROR@105761: expected command, found STRING
ERROR@105775: expected command, found COMMA
ERROR@105777: expected command, found IDENT
ERROR@105778: expected command, found COMMA
ERROR@105780: expected command, found IDENT
ERROR@105788: expected SEMICOLON
ERROR@105789: expected command, found IDENT
ERROR@105802: expected command, found DOLLAR_QUOTED_STRING
ERROR@106086: expected CURSOR_KW
ERROR@106086: expected FOR_KW
ERROR@106086: expected select stmt
ERROR@106086: expected SEMICOLON
ERROR@106087: expected command, found IDENT
ERROR@106095: expected command, found L_BRACK
ERROR@106096: expected command, found R_BRACK
ERROR@106104: expected SEMICOLON
ERROR@106107: expected command, found IDENT
ERROR@106115: expected command, found IDENT
ERROR@106117: expected command, found IDENT
ERROR@106123: expected command, found INT_NUMBER
ERROR@106125: expected command, found IN_KW
ERROR@106128: expected command, found ARRAY_KW
ERROR@106134: expected command, found PARAM
ERROR@106139: expected command, found IDENT
ERROR@106148: expected command, found IDENT
ERROR@106154: expected command, found IDENT
ERROR@106161: expected command, found STRING
ERROR@106164: expected command, found COMMA
ERROR@106166: expected command, found IDENT
ERROR@106174: expected SEMICOLON
ERROR@106175: expected command, found IDENT
ERROR@106188: expected command, found DOLLAR_QUOTED_STRING
ERROR@106593: expected CURSOR_KW
ERROR@106593: expected FOR_KW
ERROR@106593: expected select stmt
ERROR@106593: expected SEMICOLON
ERROR@106594: expected command, found IDENT
ERROR@106607: expected SEMICOLON
ERROR@106610: expected command, found IDENT
ERROR@106612: expected command, found COLON
ERROR@106613: expected command, found EQ
ERROR@106615: expected command, found ROW_KW
ERROR@106618: expected command, found L_PAREN
ERROR@106619: expected command, found INT_NUMBER
ERROR@106621: expected command, found COMMA
ERROR@106623: expected command, found STRING
ERROR@106638: expected command, found R_PAREN
ERROR@106639: expected command, found COLON
ERROR@106640: expected command, found COLON
ERROR@106641: expected command, found IDENT
ERROR@106650: expected command, found IDENT
ERROR@106651: expected command, found DOT
ERROR@106652: expected command, found IDENT
ERROR@106654: expected command, found L_BRACK
ERROR@106655: expected command, found INT_NUMBER
ERROR@106656: expected command, found R_BRACK
ERROR@106658: expected command, found COLON
ERROR@106659: expected command, found EQ
ERROR@106661: expected command, found STRING
ERROR@106674: expected command, found RETURN_KW
ERROR@106681: expected command, found IDENT
ERROR@106682: expected command, found DOT
ERROR@106683: expected command, found IDENT
ERROR@106687: expected command, found IDENT
ERROR@107772: expected R_PAREN
ERROR@107773: expected command, found OFF_KW
ERROR@107776: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@107776: expected SEMICOLON
ERROR@107776: expected command, found R_PAREN
ERROR@108003: expected R_PAREN
ERROR@108004: expected command, found OFF_KW
ERROR@108007: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@108007: expected SEMICOLON
ERROR@108007: expected command, found R_PAREN
ERROR@108152: expected R_PAREN
ERROR@108153: expected command, found OFF_KW
ERROR@108156: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@108156: expected SEMICOLON
ERROR@108156: expected command, found R_PAREN
ERROR@111464: expected EQ
ERROR@111464: expected config value, got DOT
ERROR@111464: expected SEMICOLON
ERROR@111464: expected command, found DOT
ERROR@111465: expected command, found IDENT
ERROR@111479: expected command, found EQ
ERROR@111481: expected command, found OFF_KW
ERROR@111554: expected SEMICOLON
ERROR@111554: expected command, found DOT
ERROR@111555: expected command, found IDENT
ERROR@122193: expected R_PAREN
ERROR@122193: expected function option
ERROR@122193: expected SEMICOLON
ERROR@122193: expected command, found DOT
ERROR@122194: expected command, found IDENT
ERROR@122195: expected command, found PERCENT
ERROR@122196: expected command, found TYPE_KW
ERROR@122200: expected command, found R_PAREN
ERROR@122202: expected command, found RETURNS_KW
ERROR@122210: expected command, found IDENT
ERROR@122228: expected command, found AS_KW
ERROR@122231: expected command, found DOLLAR_QUOTED_STRING
ERROR@122431: expected command, found LANGUAGE_KW
ERROR@122440: expected command, found IDENT
ERROR@101339: Unterminated dollar quoted string literal
