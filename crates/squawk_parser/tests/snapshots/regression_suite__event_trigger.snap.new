---
source: crates/squawk_parser/tests/regression_suite.rs
assertion_line: 87
input_file: crates/squawk_parser/tests/data/regression_suite/event_trigger.sql
---
SOURCE_FILE
  COMMENT "-- should fail, return type mismatch"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger"
    WHITESPACE "\n   "
    ON_KW "on"
    WHITESPACE " "
    IDENT "ddl_command_start"
    WHITESPACE "\n   "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pg_backend_pid"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- OK"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_event_trigger"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nBEGIN\n    RAISE NOTICE 'test_event_trigger: % %', tg_event, tg_tag;\nEND\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, can't call it as a plain function"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_event_trigger"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, event triggers cannot have declared arguments"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_event_trigger_arg"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          NAME_KW "name"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$ BEGIN RETURN 1; END $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, SQL functions cannot be event triggers"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_event_trigger_sql"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nSELECT 1 $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, no elephant_bootstrap entry point"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    IDENT "elephant_bootstrap"
    WHITESPACE "\n   "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_event_trigger"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- OK"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    IDENT "ddl_command_start"
    WHITESPACE "\n   "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_event_trigger"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- OK"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger_end"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    IDENT "ddl_command_end"
    WHITESPACE "\n   "
    EXECUTE_KW "execute"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_event_trigger"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, food is not a valid filter variable"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger2"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    IDENT "ddl_command_start"
    WHITESPACE "\n   "
    WHEN_KW "when"
    WHITESPACE " "
    NAME_REF
      IDENT "food"
    WHITESPACE " "
    IN_KW "in"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'sandwich'"
    R_PAREN ")"
    WHITESPACE "\n   "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_event_trigger"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, sandwich is not a valid command tag"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger2"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    IDENT "ddl_command_start"
    WHITESPACE "\n   "
    WHEN_KW "when"
    WHITESPACE " "
    NAME_REF
      IDENT "tag"
    WHITESPACE " "
    IN_KW "in"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'sandwich'"
    R_PAREN ")"
    WHITESPACE "\n   "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_event_trigger"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, create skunkcabbage is not a valid command tag"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger2"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    IDENT "ddl_command_start"
    WHITESPACE "\n   "
    WHEN_KW "when"
    WHITESPACE " "
    NAME_REF
      IDENT "tag"
    WHITESPACE " "
    IN_KW "in"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'create table'"
    COMMA ","
    WHITESPACE " "
    LITERAL
      STRING "'create skunkcabbage'"
    R_PAREN ")"
    WHITESPACE "\n   "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_event_trigger"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, can't have event triggers on event triggers"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger2"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    IDENT "ddl_command_start"
    WHITESPACE "\n   "
    WHEN_KW "when"
    WHITESPACE " "
    NAME_REF
      IDENT "tag"
    WHITESPACE " "
    IN_KW "in"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'DROP EVENT TRIGGER'"
    R_PAREN ")"
    WHITESPACE "\n   "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_event_trigger"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, can't have event triggers on global objects"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger2"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    IDENT "ddl_command_start"
    WHITESPACE "\n   "
    WHEN_KW "when"
    WHITESPACE " "
    NAME_REF
      IDENT "tag"
    WHITESPACE " "
    IN_KW "in"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'CREATE ROLE'"
    R_PAREN ")"
    WHITESPACE "\n   "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_event_trigger"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, can't have event triggers on global objects"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger2"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    IDENT "ddl_command_start"
    WHITESPACE "\n   "
    WHEN_KW "when"
    WHITESPACE " "
    NAME_REF
      IDENT "tag"
    WHITESPACE " "
    IN_KW "in"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'CREATE DATABASE'"
    R_PAREN ")"
    WHITESPACE "\n   "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_event_trigger"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, can't have event triggers on global objects"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger2"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    IDENT "ddl_command_start"
    WHITESPACE "\n   "
    WHEN_KW "when"
    WHITESPACE " "
    NAME_REF
      IDENT "tag"
    WHITESPACE " "
    IN_KW "in"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'CREATE TABLESPACE'"
    R_PAREN ")"
    WHITESPACE "\n   "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_event_trigger"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, can't have same filter variable twice"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger2"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    IDENT "ddl_command_start"
    WHITESPACE "\n   "
    WHEN_KW "when"
    WHITESPACE " "
    NAME_REF
      IDENT "tag"
    WHITESPACE " "
    IN_KW "in"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'create table'"
    R_PAREN ")"
    WHITESPACE " "
    AND_KW "and"
    WHITESPACE " "
    NAME_REF
      IDENT "tag"
    WHITESPACE " "
    IN_KW "in"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'CREATE FUNCTION'"
    R_PAREN ")"
    WHITESPACE "\n   "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_event_trigger"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, can't have arguments"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger2"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    IDENT "ddl_command_start"
    WHITESPACE "\n   "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_event_trigger"
    L_PAREN "("
  ERROR
    STRING "'argument not allowed'"
  ERROR
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- OK"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger2"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    IDENT "ddl_command_start"
    WHITESPACE "\n   "
    WHEN_KW "when"
    WHITESPACE " "
    NAME_REF
      IDENT "tag"
    WHITESPACE " "
    IN_KW "in"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'create table'"
    COMMA ","
    WHITESPACE " "
    LITERAL
      STRING "'CREATE FUNCTION'"
    R_PAREN ")"
    WHITESPACE "\n   "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_event_trigger"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- OK"
  WHITESPACE "\n"
  COMMENT_STMT
    COMMENT_KW "comment"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "regress_event_trigger"
    WHITESPACE " "
    IS_KW "is"
    WHITESPACE " "
    LITERAL
      STRING "'test comment'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- drop as non-superuser should fail"
  WHITESPACE "\n"
  CREATE_ROLE_STMT
    CREATE_KW "create"
    WHITESPACE " "
    ROLE_KW "role"
    WHITESPACE " "
    NAME
      IDENT "regress_evt_user"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_ROLE_STMT
    SET_KW "set"
    WHITESPACE " "
    ROLE_KW "role"
    WHITESPACE " "
    IDENT "regress_evt_user"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger_noperms"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    IDENT "ddl_command_start"
    WHITESPACE "\n   "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_event_trigger"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_ROLE_STMT
    RESET_KW "reset"
    WHITESPACE " "
    ROLE_KW "role"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test enabling and disabling"
  WHITESPACE "\n"
  ALTER_EVENT_TRIGGER_STMT
    ALTER_KW "alter"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger"
    WHITESPACE " "
    DISABLE_KW "disable"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    COMMENT "-- fires _trigger2 and _trigger_end should fire, but not _trigger"
    WHITESPACE "\n"
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "event_trigger_fire1"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_EVENT_TRIGGER_STMT
    ALTER_KW "alter"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger"
    WHITESPACE " "
    ENABLE_KW "enable"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "session_replication_role"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    REPLICA_KW "replica"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    COMMENT "-- fires nothing"
    WHITESPACE "\n"
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "event_trigger_fire2"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_EVENT_TRIGGER_STMT
    ALTER_KW "alter"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger"
    WHITESPACE " "
    ENABLE_KW "enable"
    WHITESPACE " "
    REPLICA_KW "replica"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    COMMENT "-- fires only _trigger"
    WHITESPACE "\n"
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "event_trigger_fire3"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_EVENT_TRIGGER_STMT
    ALTER_KW "alter"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger"
    WHITESPACE " "
    ENABLE_KW "enable"
    WHITESPACE " "
    ALWAYS_KW "always"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    COMMENT "-- fires only _trigger"
    WHITESPACE "\n"
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "event_trigger_fire4"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  RESET_STMT
    RESET_KW "reset"
    WHITESPACE " "
    NAME_REF
      IDENT "session_replication_role"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    COMMENT "-- fires all three"
    WHITESPACE "\n"
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "event_trigger_fire5"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- non-top-level command"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE "\n"
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  create table event_trigger_fire6 (a int);\n  return 0;\nend $$"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "f1"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- non-top-level command"
  WHITESPACE "\n"
  CREATE_PROCEDURE_STMT
    CREATE_KW "create"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "p1"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE "\n"
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nbegin\n  create table event_trigger_fire7 (a int);\nend $$"
  SEMICOLON ";"
  WHITESPACE "\n"
  CALL_STMT
    CALL_KW "call"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "p1"
    ARG_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- clean up"
  WHITESPACE "\n"
  ALTER_EVENT_TRIGGER_STMT
    ALTER_KW "alter"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger"
    WHITESPACE " "
    DISABLE_KW "disable"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_TABLE
    DROP_KW "drop"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_fire2"
    COMMA ","
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_fire3"
    COMMA ","
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_fire4"
    COMMA ","
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_fire5"
    COMMA ","
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_fire6"
    COMMA ","
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_fire7"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_ROUTINE_STMT
    DROP_KW "drop"
    WHITESPACE " "
    ROUTINE_KW "routine"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    COMMA ","
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "p1"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- regress_event_trigger_end should fire on these commands"
  WHITESPACE "\n"
  GRANT_STMT
    GRANT_KW "grant"
    WHITESPACE " "
    ALL_KW "all"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_fire1"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    IDENT "public"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT_STMT
    COMMENT_KW "comment"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_fire1"
    WHITESPACE " "
    IS_KW "is"
    WHITESPACE " "
    LITERAL
      STRING "'here is a comment'"
  SEMICOLON ";"
  WHITESPACE "\n"
  REVOKE_STMT
    REVOKE_KW "revoke"
    WHITESPACE " "
    ALL_KW "all"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_fire1"
    WHITESPACE " "
    FROM_KW "from"
    WHITESPACE " "
    IDENT "public"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_TABLE
    DROP_KW "drop"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_fire1"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_FOREIGN_DATA_WRAPPER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    FOREIGN_KW "foreign"
    WHITESPACE " "
    DATA_KW "data"
    WHITESPACE " "
    WRAPPER_KW "wrapper"
    WHITESPACE " "
    NAME
      IDENT "useless"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_SERVER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    SERVER_KW "server"
    WHITESPACE " "
    NAME
      IDENT "useless_server"
    WHITESPACE " "
    FOREIGN_KW "foreign"
    WHITESPACE " "
    DATA_KW "data"
    WHITESPACE " "
    WRAPPER_KW "wrapper"
    WHITESPACE " "
    NAME_REF
      IDENT "useless"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_USER_MAPPING_STMT
    CREATE_KW "create"
    WHITESPACE " "
    USER_KW "user"
    WHITESPACE " "
    MAPPING_KW "mapping"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    IDENT "regress_evt_user"
    WHITESPACE " "
    SERVER_KW "server"
    WHITESPACE " "
    NAME_REF
      IDENT "useless_server"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_DEFAULT_PRIVILEGES_STMT
    ALTER_KW "alter"
    WHITESPACE " "
    DEFAULT_KW "default"
    WHITESPACE " "
    PRIVILEGES_KW "privileges"
    WHITESPACE " "
    FOR_KW "for"
    WHITESPACE " "
    ROLE_KW "role"
    WHITESPACE " "
    IDENT "regress_evt_user"
    WHITESPACE "\n "
    REVOKE_KW "revoke"
    WHITESPACE " "
    DELETE_KW "delete"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    TABLES_KW "tables"
    WHITESPACE " "
    FROM_KW "from"
    WHITESPACE " "
    IDENT "regress_evt_user"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- alter owner to non-superuser should fail"
  WHITESPACE "\n"
  ALTER_EVENT_TRIGGER_STMT
    ALTER_KW "alter"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger"
    WHITESPACE " "
    OWNER_KW "owner"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    IDENT "regress_evt_user"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- alter owner to superuser should work"
  WHITESPACE "\n"
  ALTER_ROLE_STMT
    ALTER_KW "alter"
    WHITESPACE " "
    ROLE_KW "role"
    WHITESPACE " "
    IDENT "regress_evt_user"
    WHITESPACE " "
    IDENT "superuser"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_EVENT_TRIGGER_STMT
    ALTER_KW "alter"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger"
    WHITESPACE " "
    OWNER_KW "owner"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    IDENT "regress_evt_user"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, name collision"
  WHITESPACE "\n"
  ALTER_EVENT_TRIGGER_STMT
    ALTER_KW "alter"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger"
    WHITESPACE " "
    RENAME_KW "rename"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger2"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- OK"
  WHITESPACE "\n"
  ALTER_EVENT_TRIGGER_STMT
    ALTER_KW "alter"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger"
    WHITESPACE " "
    RENAME_KW "rename"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger3"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, doesn't exist any more"
  WHITESPACE "\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "drop"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, regress_evt_user owns some objects"
  WHITESPACE "\n"
  DROP_ROLE_STMT
    DROP_KW "drop"
    WHITESPACE " "
    ROLE_KW "role"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_evt_user"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- cleanup before next test"
  WHITESPACE "\n"
  COMMENT "-- these are all OK; the second one should emit a NOTICE"
  WHITESPACE "\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "drop"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    IF_EXISTS
      IF_KW "if"
      WHITESPACE " "
      EXISTS_KW "exists"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger2"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "drop"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    IF_EXISTS
      IF_KW "if"
      WHITESPACE " "
      EXISTS_KW "exists"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger2"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "drop"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger3"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "drop"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger_end"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test support for dropped objects"
  WHITESPACE "\n"
  CREATE_SCHEMA_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    NAME
      IDENT "schema_one"
    WHITESPACE " "
    AUTHORIZATION_KW "authorization"
    WHITESPACE " "
    IDENT "regress_evt_user"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_SCHEMA_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    NAME
      IDENT "schema_two"
    WHITESPACE " "
    AUTHORIZATION_KW "authorization"
    WHITESPACE " "
    IDENT "regress_evt_user"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_SCHEMA_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    NAME
      IDENT "audit_tbls"
    WHITESPACE " "
    AUTHORIZATION_KW "authorization"
    WHITESPACE " "
    IDENT "regress_evt_user"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TEMP_KW "TEMP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "a_temp_tbl"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_SESSION_AUTH_STMT
    SET_KW "SET"
    WHITESPACE " "
    SESSION_KW "SESSION"
    WHITESPACE " "
    AUTHORIZATION_KW "AUTHORIZATION"
    WHITESPACE " "
    IDENT "regress_evt_user"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "schema_one"
      DOT "."
      PATH_SEGMENT
        NAME
          IDENT "table_one"
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "schema_one"
      DOT "."
      PATH_SEGMENT
        NAME
          IDENT "\"table two\""
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "schema_one"
      DOT "."
      PATH_SEGMENT
        NAME
          IDENT "table_three"
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "audit_tbls"
      DOT "."
      PATH_SEGMENT
        NAME
          IDENT "schema_one_table_two"
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "the_value"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "schema_two"
      DOT "."
      PATH_SEGMENT
        NAME
          IDENT "table_two"
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "schema_two"
      DOT "."
      PATH_SEGMENT
        NAME
          IDENT "table_three"
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "audit_tbls"
      DOT "."
      PATH_SEGMENT
        NAME
          IDENT "schema_two_table_three"
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "the_value"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "schema_two"
      DOT "."
      PATH_SEGMENT
        NAME
          ADD_KW "add"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
    WHITESPACE " "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE "\n  "
      STRICT_FUNC_OPTION
        CALLED_KW "CALLED"
        WHITESPACE " "
        ON_KW "ON"
        WHITESPACE " "
        NULL_KW "NULL"
        WHITESPACE " "
        INPUT_KW "INPUT"
      WHITESPACE "\n  "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$ BEGIN RETURN coalesce($1,0) + coalesce($2,0); END; $$"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_AGGREGATE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    AGGREGATE_KW "AGGREGATE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "schema_two"
      DOT "."
      PATH_SEGMENT
        NAME
          IDENT "newton"
    WHITESPACE "\n  "
    L_PAREN "("
    NAME
      IDENT "BASETYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "SFUNC"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "schema_two"
        DOT "."
        PATH_SEGMENT
          NAME_REF
            ADD_KW "add"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "STYPE"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SET_SESSION_AUTH_STMT
    RESET_KW "RESET"
    WHITESPACE " "
    SESSION_KW "SESSION"
    WHITESPACE " "
    AUTHORIZATION_KW "AUTHORIZATION"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "undroppable_objs"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "object_type"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "object_identity"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "undroppable_objs"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE "\n"
      L_PAREN "("
      LITERAL
        STRING "'table'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'schema_one.table_three'"
      R_PAREN ")"
      COMMA ","
      WHITESPACE "\n"
      L_PAREN "("
      LITERAL
        STRING "'table'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'audit_tbls.schema_two_table_three'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "dropped_objects"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          TYPE_KW "type"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          SCHEMA_KW "schema"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          OBJECT_KW "object"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- This tests errors raised within event triggers; the one in audit_tbls"
  WHITESPACE "\n"
  COMMENT "-- uses 2nd-level recursive invocation via test_evtrig_dropped_objects()."
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "undroppable"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nDECLARE\n\tobj record;\nBEGIN\n\tPERFORM 1 FROM pg_tables WHERE tablename = 'undroppable_objs';\n\tIF NOT FOUND THEN\n\t\tRAISE NOTICE 'table undroppable_objs not found, skipping';\n\t\tRETURN;\n\tEND IF;\n\tFOR obj IN\n\t\tSELECT * FROM pg_event_trigger_dropped_objects() JOIN\n\t\t\tundroppable_objs USING (object_type, object_identity)\n\tLOOP\n\t\tRAISE EXCEPTION 'object % of type % cannot be dropped',\n\t\t\tobj.object_identity, obj.object_type;\n\tEND LOOP;\nEND;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "undroppable"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    IDENT "sql_drop"
    WHITESPACE "\n\t"
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "undroppable"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_evtrig_dropped_objects"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nDECLARE\n    obj record;\nBEGIN\n    FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()\n    LOOP\n        IF obj.object_type = 'table' THEN\n                EXECUTE format('DROP TABLE IF EXISTS audit_tbls.%I',\n\t\t\t\t\tformat('%s_%s', obj.schema_name, obj.object_name));\n        END IF;\n\n\tINSERT INTO dropped_objects\n\t\t(type, schema, object) VALUES\n\t\t(obj.object_type, obj.schema_name, obj.object_identity);\n    END LOOP;\nEND\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger_drop_objects"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    IDENT "sql_drop"
    WHITESPACE "\n\t"
    WHEN_KW "WHEN"
    WHITESPACE " "
    NAME_REF
      IDENT "TAG"
    WHITESPACE " "
    IN_KW "IN"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'drop table'"
    COMMA ","
    WHITESPACE " "
    LITERAL
      STRING "'drop function'"
    COMMA ","
    WHITESPACE " "
    LITERAL
      STRING "'drop view'"
    COMMA ","
    WHITESPACE "\n\t\t"
    LITERAL
      STRING "'drop owned'"
    COMMA ","
    WHITESPACE " "
    LITERAL
      STRING "'drop schema'"
    COMMA ","
    WHITESPACE " "
    LITERAL
      STRING "'alter table'"
    R_PAREN ")"
    WHITESPACE "\n\t"
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_evtrig_dropped_objects"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ALTER_TABLE
    ALTER_KW "ALTER"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "schema_one"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "table_one"
    WHITESPACE " "
    DROP_COLUMN
      DROP_KW "DROP"
      WHITESPACE " "
      COLUMN_KW "COLUMN"
      WHITESPACE " "
      NAME_REF
        IDENT "a"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_SCHEMA_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    NAME
      IDENT "schema_one"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "schema_two"
    WHITESPACE " "
    CASCADE_KW "CASCADE"
  SEMICOLON ";"
  WHITESPACE "\n"
  DELETE_STMT
    DELETE_KW "DELETE"
    WHITESPACE " "
    FROM_KW "FROM"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "undroppable_objs"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "object_identity"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'audit_tbls.schema_two_table_three'"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_SCHEMA_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    NAME
      IDENT "schema_one"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "schema_two"
    WHITESPACE " "
    CASCADE_KW "CASCADE"
  SEMICOLON ";"
  WHITESPACE "\n"
  DELETE_STMT
    DELETE_KW "DELETE"
    WHITESPACE " "
    FROM_KW "FROM"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "undroppable_objs"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "object_identity"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'schema_one.table_three'"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_SCHEMA_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    NAME
      IDENT "schema_one"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "schema_two"
    WHITESPACE " "
    CASCADE_KW "CASCADE"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "dropped_objects"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          NAME_REF
            SCHEMA_KW "schema"
          WHITESPACE " "
          IS_KW "IS"
          WHITESPACE " "
          LITERAL
            NULL_KW "NULL"
        WHITESPACE " "
        OR_KW "OR"
        WHITESPACE " "
        BIN_EXPR
          NAME_REF
            SCHEMA_KW "schema"
          WHITESPACE " "
          NEQB "<>"
          WHITESPACE " "
          LITERAL
            STRING "'pg_toast'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_OWNED_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    OWNED_KW "OWNED"
    WHITESPACE " "
    BY_KW "BY"
    WHITESPACE " "
    IDENT "regress_evt_user"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "dropped_objects"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          TYPE_KW "type"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'schema'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_ROLE_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    ROLE_KW "ROLE"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_evt_user"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger_drop_objects"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME_REF
      IDENT "undroppable"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Event triggers on relations."
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "event_trigger_report_dropped"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE "\n "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE "\n"
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nDECLARE r record;\nBEGIN\n    FOR r IN SELECT * from pg_event_trigger_dropped_objects()\n    LOOP\n    IF NOT r.normal AND NOT r.original THEN\n        CONTINUE;\n    END IF;\n    RAISE NOTICE 'NORMAL: orig=% normal=% istemp=% type=% identity=% name=% args=%',\n        r.original, r.normal, r.is_temporary, r.object_type,\n        r.object_identity, r.address_names, r.address_args;\n    END LOOP;\nEND; $$"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger_report_dropped"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    IDENT "sql_drop"
    WHITESPACE "\n    "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_report_dropped"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "event_trigger_report_end"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE "\n "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE "\n"
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nDECLARE r RECORD;\nBEGIN\n    FOR r IN SELECT * FROM pg_event_trigger_ddl_commands()\n    LOOP\n        RAISE NOTICE 'END: command_tag=% type=% identity=%',\n            r.command_tag, r.object_type, r.object_identity;\n    END LOOP;\nEND; $$"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "regress_event_trigger_report_end"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    IDENT "ddl_command_end"
    WHITESPACE "\n  "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_report_end"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_SCHEMA_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    NAME
      IDENT "evttrig"
    WHITESPACE "\n\t"
    CREATE_TABLE
      CREATE_KW "CREATE"
      WHITESPACE " "
      TABLE_KW "TABLE"
      WHITESPACE " "
      PATH
        PATH_SEGMENT
          NAME
            IDENT "one"
      WHITESPACE " "
      TABLE_ARGS
        L_PAREN "("
        COLUMN
          NAME_REF
            IDENT "col_a"
          WHITESPACE " "
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  IDENT "SERIAL"
          WHITESPACE " "
          PRIMARY_KEY_CONSTRAINT
            PRIMARY_KW "PRIMARY"
            WHITESPACE " "
            KEY_KW "KEY"
        COMMA ","
        WHITESPACE " "
        COLUMN
          NAME_REF
            IDENT "col_b"
          WHITESPACE " "
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  TEXT_KW "text"
          WHITESPACE " "
          DEFAULT_CONSTRAINT
            DEFAULT_KW "DEFAULT"
            WHITESPACE " "
            LITERAL
              STRING "'forty two'"
        COMMA ","
        WHITESPACE " "
        COLUMN
          NAME_REF
            IDENT "col_c"
          WHITESPACE " "
          PATH_TYPE
            PATH
              PATH_SEGMENT
                NAME_REF
                  IDENT "SERIAL"
        R_PAREN ")"
  WHITESPACE "\n\t"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "one_idx"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "one"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "col_b"
      R_PAREN ")"
  WHITESPACE "\n\t"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "two"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "col_c"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "INTEGER"
        WHITESPACE " "
        CHECK_CONSTRAINT
          CHECK_KW "CHECK"
          WHITESPACE " "
          L_PAREN "("
          BIN_EXPR
            NAME_REF
              IDENT "col_c"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          R_PAREN ")"
        WHITESPACE " "
        REFERENCES_CONSTRAINT
          REFERENCES_KW "REFERENCES"
          WHITESPACE " "
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "one"
        WHITESPACE " "
        DEFAULT_CONSTRAINT
          DEFAULT_KW "DEFAULT"
          WHITESPACE " "
          LITERAL
            INT_NUMBER "42"
      R_PAREN ")"
  WHITESPACE "\n\t"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "id"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "col_d"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        NOT_NULL_CONSTRAINT
          NOT_KW "NOT"
          WHITESPACE " "
          NULL_KW "NULL"
        WHITESPACE " "
        GENERATED_CONSTRAINT
          GENERATED_KW "GENERATED"
          WHITESPACE " "
          ALWAYS_KW "ALWAYS"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          IDENTITY_KW "IDENTITY"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    COMMENT "-- Partitioned tables with a partitioned index"
    WHITESPACE "\n"
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME
          IDENT "parted"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n    "
      COLUMN
        NAME_REF
          IDENT "id"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
        WHITESPACE " "
        PRIMARY_KEY_CONSTRAINT
          PRIMARY_KW "PRIMARY"
          WHITESPACE " "
          KEY_KW "KEY"
      R_PAREN ")"
    WHITESPACE "\n    "
    PARTITION_KW "PARTITION"
    WHITESPACE " "
    BY_KW "BY"
    WHITESPACE " "
    RANGE_KW "RANGE"
    WHITESPACE " "
    L_PAREN "("
    NAME_REF
      IDENT "id"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME
          IDENT "part_1_10"
    WHITESPACE " "
    PARTITION_KW "PARTITION"
    WHITESPACE " "
    OF_KW "OF"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "parted"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "id"
      R_PAREN ")"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    VALUES_KW "VALUES"
    WHITESPACE " "
    FROM_KW "FROM"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      INT_NUMBER "1"
    R_PAREN ")"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      INT_NUMBER "10"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME
          IDENT "part_10_20"
    WHITESPACE " "
    PARTITION_KW "PARTITION"
    WHITESPACE " "
    OF_KW "OF"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "parted"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "id"
      R_PAREN ")"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    VALUES_KW "VALUES"
    WHITESPACE " "
    FROM_KW "FROM"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      INT_NUMBER "10"
    R_PAREN ")"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      INT_NUMBER "20"
    R_PAREN ")"
    WHITESPACE " "
    PARTITION_KW "PARTITION"
    WHITESPACE " "
    BY_KW "BY"
    WHITESPACE " "
    RANGE_KW "RANGE"
    WHITESPACE " "
    L_PAREN "("
    NAME_REF
      IDENT "id"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME
          IDENT "part_10_15"
    WHITESPACE " "
    PARTITION_KW "PARTITION"
    WHITESPACE " "
    OF_KW "OF"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "part_10_20"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "id"
      R_PAREN ")"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    VALUES_KW "VALUES"
    WHITESPACE " "
    FROM_KW "FROM"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      INT_NUMBER "10"
    R_PAREN ")"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      INT_NUMBER "15"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME
          IDENT "part_15_20"
    WHITESPACE " "
    PARTITION_KW "PARTITION"
    WHITESPACE " "
    OF_KW "OF"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "part_10_20"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "id"
      R_PAREN ")"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    VALUES_KW "VALUES"
    WHITESPACE " "
    FROM_KW "FROM"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      INT_NUMBER "15"
    R_PAREN ")"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      INT_NUMBER "20"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ALTER_TABLE
    ALTER_KW "ALTER"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "two"
    WHITESPACE " "
    DROP_COLUMN
      DROP_KW "DROP"
      WHITESPACE " "
      COLUMN_KW "COLUMN"
      WHITESPACE " "
      NAME_REF
        IDENT "col_c"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "ALTER"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "one"
    WHITESPACE " "
    ALTER_COLUMN
      ALTER_KW "ALTER"
      WHITESPACE " "
      COLUMN_KW "COLUMN"
      WHITESPACE " "
      IDENT "col_b"
      WHITESPACE " "
      DROP_DEFAULT
        DROP_KW "DROP"
        WHITESPACE " "
        DEFAULT_KW "DEFAULT"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "ALTER"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "one"
    WHITESPACE " "
    DROP_CONSTRAINT
      DROP_KW "DROP"
      WHITESPACE " "
      CONSTRAINT_KW "CONSTRAINT"
      WHITESPACE " "
      NAME_REF
        IDENT "one_pkey"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "ALTER"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "one"
    WHITESPACE " "
    DROP_COLUMN
      DROP_KW "DROP"
      WHITESPACE " "
      COLUMN_KW "COLUMN"
      WHITESPACE " "
      NAME_REF
        IDENT "col_c"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "ALTER"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "id"
    WHITESPACE " "
    ALTER_COLUMN
      ALTER_KW "ALTER"
      WHITESPACE " "
      COLUMN_KW "COLUMN"
      WHITESPACE " "
      IDENT "col_d"
      WHITESPACE " "
      SET_TYPE
        SET_KW "SET"
        WHITESPACE " "
        DATA_KW "DATA"
        WHITESPACE " "
        TYPE_KW "TYPE"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                BIGINT_KW "bigint"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "ALTER"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "id"
    WHITESPACE " "
    ALTER_COLUMN
      ALTER_KW "ALTER"
      WHITESPACE " "
      COLUMN_KW "COLUMN"
      WHITESPACE " "
      IDENT "col_d"
      WHITESPACE " "
      DROP_IDENTITY
        DROP_KW "DROP"
        WHITESPACE " "
        IDENTITY_KW "IDENTITY"
    COMMA ","
    WHITESPACE "\n  "
    ALTER_COLUMN
      ALTER_KW "ALTER"
      WHITESPACE " "
      COLUMN_KW "COLUMN"
      WHITESPACE " "
      IDENT "col_d"
      WHITESPACE " "
      SET_TYPE
        SET_KW "SET"
        WHITESPACE " "
        DATA_KW "DATA"
        WHITESPACE " "
        TYPE_KW "TYPE"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_INDEX_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "evttrig"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "one_idx"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_SCHEMA_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    NAME
      IDENT "evttrig"
    WHITESPACE " "
    CASCADE_KW "CASCADE"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_TABLE
    DROP_KW "DROP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "a_temp_tbl"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- CREATE OPERATOR CLASS without FAMILY clause should report"
  WHITESPACE "\n"
  COMMENT "-- both CREATE OPERATOR FAMILY and CREATE OPERATOR CLASS"
  WHITESPACE "\n"
  CREATE_OPERATOR_CLASS_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OPERATOR_KW "OPERATOR"
    WHITESPACE " "
    CLASS_KW "CLASS"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "evttrigopclass"
    WHITESPACE " "
    FOR_KW "FOR"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    WHITESPACE " "
    USING_KW "USING"
    WHITESPACE " "
    NAME_REF
      IDENT "btree"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    STORAGE_KW "STORAGE"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger_report_dropped"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_event_trigger_report_end"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- only allowed from within an event trigger function, should fail"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_event_trigger_table_rewrite_oid"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test Table Rewrite Event Trigger"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_evtrig_no_rewrite"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nBEGIN\n  RAISE EXCEPTION 'rewrites not allowed';\nEND;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "create"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME
      IDENT "no_rewrite_allowed"
    WHITESPACE " "
    ON_KW "on"
    WHITESPACE " "
    IDENT "table_rewrite"
    WHITESPACE "\n  "
    EXECUTE_KW "execute"
    WHITESPACE " "
    PROCEDURE_KW "procedure"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_evtrig_no_rewrite"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "rewriteme"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "id"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "serial"
        WHITESPACE " "
        PRIMARY_KEY_CONSTRAINT
          PRIMARY_KW "primary"
          WHITESPACE " "
          KEY_KW "key"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "foo"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                FLOAT_KW "float"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "bar"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "timestamptz"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "insert"
    WHITESPACE " "
    INTO_KW "into"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "rewriteme"
    WHITESPACE "\n     "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "select"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            BIN_EXPR
              NAME_REF
                IDENT "x"
              WHITESPACE " "
              STAR "*"
              WHITESPACE " "
              LITERAL
                FLOAT_NUMBER "1.001"
      WHITESPACE " "
      FROM_CLAUSE
        FROM_KW "from"
        WHITESPACE " "
        CALL_EXPR
          NAME_REF
            IDENT "generate_series"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "500"
            R_PAREN ")"
        WHITESPACE " "
        ALIAS
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "t"
          COLUMN_LIST
            L_PAREN "("
            COLUMN
              NAME
                IDENT "x"
            R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "alter"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "rewriteme"
    WHITESPACE " "
    ALTER_COLUMN
      ALTER_KW "alter"
      WHITESPACE " "
      COLUMN_KW "column"
      WHITESPACE " "
      IDENT "foo"
      WHITESPACE " "
      SET_TYPE
        TYPE_KW "type"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NUMERIC_KW "numeric"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "alter"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "rewriteme"
    WHITESPACE " "
    ADD_COLUMN
      ADD_KW "add"
      WHITESPACE " "
      COLUMN_KW "column"
      WHITESPACE " "
      NAME_REF
        IDENT "baz"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      WHITESPACE " "
      DEFAULT_CONSTRAINT
        DEFAULT_KW "default"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "0"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test with more than one reason to rewrite a single table"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_evtrig_no_rewrite"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nBEGIN\n  RAISE NOTICE 'Table ''%'' is being rewritten (reason = %)',\n               pg_event_trigger_table_rewrite_oid()::regclass,\n               pg_event_trigger_table_rewrite_reason();\nEND;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ALTER_TABLE
    ALTER_KW "alter"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "rewriteme"
    WHITESPACE "\n "
    ADD_COLUMN
      ADD_KW "add"
      WHITESPACE " "
      COLUMN_KW "column"
      WHITESPACE " "
      NAME_REF
        IDENT "onemore"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      WHITESPACE " "
      DEFAULT_CONSTRAINT
        DEFAULT_KW "default"
        WHITESPACE " "
        LITERAL
          INT_NUMBER "0"
    COMMA ","
    WHITESPACE "\n "
    ADD_COLUMN
      ADD_KW "add"
      WHITESPACE " "
      COLUMN_KW "column"
      WHITESPACE " "
      NAME_REF
        IDENT "another"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      WHITESPACE " "
      DEFAULT_CONSTRAINT
        DEFAULT_KW "default"
        WHITESPACE " "
        PREFIX_EXPR
          MINUS "-"
          LITERAL
            INT_NUMBER "1"
    COMMA ","
    WHITESPACE "\n "
    ALTER_COLUMN
      ALTER_KW "alter"
      WHITESPACE " "
      COLUMN_KW "column"
      WHITESPACE " "
      IDENT "foo"
      WHITESPACE " "
      SET_TYPE
        TYPE_KW "type"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NUMERIC_KW "numeric"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "10"
            COMMA ","
            ARG
              LITERAL
                INT_NUMBER "4"
            R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- matview rewrite when changing access method"
  WHITESPACE "\n"
  CREATE_MATERIALIZED_VIEW_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    MATERIALIZED_KW "MATERIALIZED"
    WHITESPACE " "
    VIEW_KW "VIEW"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "heapmv"
    WHITESPACE " "
    USING_KW "USING"
    WHITESPACE " "
    NAME_REF
      IDENT "heap"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    SELECT
      SELECT_CLAUSE
        SELECT_KW "SELECT"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            LITERAL
              INT_NUMBER "1"
            WHITESPACE " "
            AS_KW "AS"
            WHITESPACE " "
            NAME
              IDENT "a"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_MATERIALIZED_VIEW_STMT
    ALTER_KW "ALTER"
    WHITESPACE " "
    MATERIALIZED_KW "MATERIALIZED"
    WHITESPACE " "
    VIEW_KW "VIEW"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "heapmv"
    WHITESPACE " "
    SET_ACCESS_METHOD
      SET_KW "SET"
      WHITESPACE " "
      ACCESS_KW "ACCESS"
      WHITESPACE " "
      METHOD_KW "METHOD"
      WHITESPACE " "
      NAME_REF
        IDENT "heap2"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_MATERIALIZED_VIEW_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    MATERIALIZED_KW "MATERIALIZED"
    WHITESPACE " "
    VIEW_KW "VIEW"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "heapmv"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- shouldn't trigger a table_rewrite event"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "alter"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "rewriteme"
    WHITESPACE " "
    ALTER_COLUMN
      ALTER_KW "alter"
      WHITESPACE " "
      COLUMN_KW "column"
      WHITESPACE " "
      IDENT "foo"
      WHITESPACE " "
      SET_TYPE
        TYPE_KW "type"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NUMERIC_KW "numeric"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "12"
            COMMA ","
            ARG
              LITERAL
                INT_NUMBER "4"
            R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "begin"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "timezone"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    LITERAL
      STRING "'UTC'"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "alter"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "rewriteme"
    WHITESPACE " "
    ALTER_COLUMN
      ALTER_KW "alter"
      WHITESPACE " "
      COLUMN_KW "column"
      WHITESPACE " "
      IDENT "bar"
      WHITESPACE " "
      SET_TYPE
        TYPE_KW "type"
        WHITESPACE " "
        TIME_TYPE
          NAME_REF
            TIMESTAMP_KW "timestamp"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "timezone"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    LITERAL
      STRING "'0'"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "alter"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "rewriteme"
    WHITESPACE " "
    ALTER_COLUMN
      ALTER_KW "alter"
      WHITESPACE " "
      COLUMN_KW "column"
      WHITESPACE " "
      IDENT "bar"
      WHITESPACE " "
      SET_TYPE
        TYPE_KW "type"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "timestamptz"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "set"
    WHITESPACE " "
    NAME_REF
      IDENT "timezone"
    WHITESPACE " "
    TO_KW "to"
    WHITESPACE " "
    LITERAL
      STRING "'Europe/London'"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_TABLE
    ALTER_KW "alter"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "rewriteme"
    WHITESPACE " "
    ALTER_COLUMN
      ALTER_KW "alter"
      WHITESPACE " "
      COLUMN_KW "column"
      WHITESPACE " "
      IDENT "bar"
      WHITESPACE " "
      SET_TYPE
        TYPE_KW "type"
        WHITESPACE " "
        TIME_TYPE
          NAME_REF
            TIMESTAMP_KW "timestamp"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- does rewrite"
  WHITESPACE "\n"
  ROLLBACK_STMT
    ROLLBACK_KW "rollback"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- typed tables are rewritten when their type changes.  Don't emit table"
  WHITESPACE "\n"
  COMMENT "-- name, because firing order is not stable."
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_evtrig_no_rewrite"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nBEGIN\n  RAISE NOTICE 'Table is being rewritten (reason = %)',\n               pg_event_trigger_table_rewrite_reason();\nEND;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TYPE_STMT
    CREATE_KW "create"
    WHITESPACE " "
    TYPE_KW "type"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "rewritetype"
    WHITESPACE " "
    AS_KW "as"
    WHITESPACE " "
    L_PAREN "("
    NAME_REF
      IDENT "a"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "rewritemetoo1"
    WHITESPACE " "
    OF_KW "of"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "rewritetype"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "rewritemetoo2"
    WHITESPACE " "
    OF_KW "of"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "rewritetype"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_TYPE_STMT
    ALTER_KW "alter"
    WHITESPACE " "
    TYPE_KW "type"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "rewritetype"
    WHITESPACE " "
    ALTER_KW "alter"
    WHITESPACE " "
    ATTRIBUTE_KW "attribute"
    WHITESPACE " "
    NAME_REF
      IDENT "a"
    WHITESPACE " "
    TYPE_KW "type"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            TEXT_KW "text"
    WHITESPACE " "
    CASCADE_KW "cascade"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    COMMENT "-- but this doesn't work"
    WHITESPACE "\n"
    CREATE_KW "create"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "rewritemetoo3"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "rewritetype"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_TYPE_STMT
    ALTER_KW "alter"
    WHITESPACE " "
    TYPE_KW "type"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "rewritetype"
    WHITESPACE " "
    ALTER_KW "alter"
    WHITESPACE " "
    ATTRIBUTE_KW "attribute"
    WHITESPACE " "
    NAME_REF
      IDENT "a"
    WHITESPACE " "
    TYPE_KW "type"
    WHITESPACE " "
    CHAR_TYPE
      VARCHAR_KW "varchar"
    WHITESPACE " "
    CASCADE_KW "cascade"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_TABLE
    DROP_KW "drop"
    WHITESPACE " "
    TABLE_KW "table"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "rewriteme"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "drop"
    WHITESPACE " "
    EVENT_KW "event"
    WHITESPACE " "
    TRIGGER_KW "trigger"
    WHITESPACE " "
    NAME_REF
      IDENT "no_rewrite_allowed"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "drop"
    WHITESPACE " "
    FUNCTION_KW "function"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_evtrig_no_rewrite"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Tests for REINDEX"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "reindex_start_command"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nBEGIN\n    RAISE NOTICE 'REINDEX START: % %', tg_event, tg_tag;\nEND;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "regress_reindex_start"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    IDENT "ddl_command_start"
    WHITESPACE "\n    "
    WHEN_KW "WHEN"
    WHITESPACE " "
    NAME_REF
      IDENT "TAG"
    WHITESPACE " "
    IN_KW "IN"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'REINDEX'"
    R_PAREN ")"
    WHITESPACE "\n    "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "reindex_start_command"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "reindex_end_command"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nDECLARE\n    obj record;\nBEGIN\n    FOR obj IN SELECT * FROM pg_event_trigger_ddl_commands()\n    LOOP\n        RAISE NOTICE 'REINDEX END: command_tag=% type=% identity=%',\n\t    obj.command_tag, obj.object_type, obj.object_identity;\n    END LOOP;\nEND;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "regress_reindex_end"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    IDENT "ddl_command_end"
    WHITESPACE "\n    "
    WHEN_KW "WHEN"
    WHITESPACE " "
    NAME_REF
      IDENT "TAG"
    WHITESPACE " "
    IN_KW "IN"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'REINDEX'"
    R_PAREN ")"
    WHITESPACE "\n    "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "reindex_end_command"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- Extra event to force the use of a snapshot."
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "reindex_end_command_snap"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "EVENT_TRIGGER"
    WHITESPACE "\n    "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$ BEGIN PERFORM 1; END $$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "regress_reindex_end_snap"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    IDENT "ddl_command_end"
    WHITESPACE "\n    "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "reindex_end_command_snap"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    COMMENT "-- With simple relation"
    WHITESPACE "\n"
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "concur_reindex_tab"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "c1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_ind"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "concur_reindex_tab"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "c1"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- Both start and end triggers enabled."
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_ind"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_tab"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    CONCURRENTLY_KW "CONCURRENTLY"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_ind"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    CONCURRENTLY_KW "CONCURRENTLY"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_tab"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- with start trigger disabled."
  WHITESPACE "\n"
  ALTER_EVENT_TRIGGER_STMT
    ALTER_KW "ALTER"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_reindex_start"
    WHITESPACE " "
    DISABLE_KW "DISABLE"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_ind"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    CONCURRENTLY_KW "CONCURRENTLY"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_ind"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- without an index"
  WHITESPACE "\n"
  DROP_INDEX_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "concur_reindex_ind"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_tab"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    CONCURRENTLY_KW "CONCURRENTLY"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_tab"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- With a Schema"
  WHITESPACE "\n"
  CREATE_SCHEMA_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_schema"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- No indexes"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_schema"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    CONCURRENTLY_KW "CONCURRENTLY"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_schema"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "concur_reindex_schema"
      DOT "."
      PATH_SEGMENT
        NAME
          IDENT "tab"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "ind"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "concur_reindex_schema"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "tab"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "a"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- One index reported"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_schema"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    CONCURRENTLY_KW "CONCURRENTLY"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_schema"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- One table on schema but no indexes"
  WHITESPACE "\n"
  DROP_INDEX_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "concur_reindex_schema"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "ind"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_schema"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    CONCURRENTLY_KW "CONCURRENTLY"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_schema"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_SCHEMA_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    SCHEMA_KW "SCHEMA"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_schema"
    WHITESPACE " "
    CASCADE_KW "CASCADE"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    COMMENT "-- With a partitioned table, and nothing else."
    WHITESPACE "\n"
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "concur_reindex_part"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "id"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    PARTITION_KW "PARTITION"
    WHITESPACE " "
    BY_KW "BY"
    WHITESPACE " "
    RANGE_KW "RANGE"
    WHITESPACE " "
    L_PAREN "("
    NAME_REF
      IDENT "id"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_part"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    CONCURRENTLY_KW "CONCURRENTLY"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_part"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    COMMENT "-- Partition that would be reindexed, still nothing."
    WHITESPACE "\n"
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "concur_reindex_child"
    WHITESPACE " "
    PARTITION_KW "PARTITION"
    WHITESPACE " "
    OF_KW "OF"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "concur_reindex_part"
    WHITESPACE "\n  "
    FOR_KW "FOR"
    WHITESPACE " "
    VALUES_KW "VALUES"
    WHITESPACE " "
    FROM_KW "FROM"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      INT_NUMBER "0"
    R_PAREN ")"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      INT_NUMBER "10"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_part"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    CONCURRENTLY_KW "CONCURRENTLY"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_part"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- Now add some indexes."
  WHITESPACE "\n"
  CREATE_INDEX_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_partidx"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "concur_reindex_part"
    WHITESPACE " "
    INDEX_PARAMS
      L_PAREN "("
      NAME_REF
        IDENT "id"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_partidx"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    INDEX_KW "INDEX"
    WHITESPACE " "
    CONCURRENTLY_KW "CONCURRENTLY"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_partidx"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_part"
  SEMICOLON ";"
  WHITESPACE "\n"
  REINDEX_STMT
    REINDEX_KW "REINDEX"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    CONCURRENTLY_KW "CONCURRENTLY"
    WHITESPACE " "
    NAME
      IDENT "concur_reindex_part"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_TABLE
    DROP_KW "DROP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "concur_reindex_part"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Clean up"
  WHITESPACE "\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_reindex_start"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_reindex_end"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_reindex_end_snap"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "reindex_end_command"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "reindex_end_command_snap"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "reindex_start_command"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_TABLE
    DROP_KW "DROP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "concur_reindex_tab"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test Row Security Event Trigger"
  WHITESPACE "\n"
  SET_SESSION_AUTH_STMT
    RESET_KW "RESET"
    WHITESPACE " "
    SESSION_KW "SESSION"
    WHITESPACE " "
    AUTHORIZATION_KW "AUTHORIZATION"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "event_trigger_test"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "start_command"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nBEGIN\nRAISE NOTICE '% - ddl_command_start', tg_tag;\nEND;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "end_command"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nBEGIN\nRAISE NOTICE '% - ddl_command_end', tg_tag;\nEND;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OR_REPLACE
      OR_KW "OR"
      WHITESPACE " "
      REPLACE_KW "REPLACE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "drop_sql_command"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n"
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nBEGIN\nRAISE NOTICE '% - sql_drop', tg_tag;\nEND;\n$$"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "start_rls_command"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    IDENT "ddl_command_start"
    WHITESPACE "\n    "
    WHEN_KW "WHEN"
    WHITESPACE " "
    NAME_REF
      IDENT "TAG"
    WHITESPACE " "
    IN_KW "IN"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'CREATE POLICY'"
    COMMA ","
    WHITESPACE " "
    LITERAL
      STRING "'ALTER POLICY'"
    COMMA ","
    WHITESPACE " "
    LITERAL
      STRING "'DROP POLICY'"
    R_PAREN ")"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "start_command"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "end_rls_command"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    IDENT "ddl_command_end"
    WHITESPACE "\n    "
    WHEN_KW "WHEN"
    WHITESPACE " "
    NAME_REF
      IDENT "TAG"
    WHITESPACE " "
    IN_KW "IN"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'CREATE POLICY'"
    COMMA ","
    WHITESPACE " "
    LITERAL
      STRING "'ALTER POLICY'"
    COMMA ","
    WHITESPACE " "
    LITERAL
      STRING "'DROP POLICY'"
    R_PAREN ")"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "end_command"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "sql_drop_command"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    IDENT "sql_drop"
    WHITESPACE "\n    "
    WHEN_KW "WHEN"
    WHITESPACE " "
    NAME_REF
      IDENT "TAG"
    WHITESPACE " "
    IN_KW "IN"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'DROP POLICY'"
    R_PAREN ")"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    PROCEDURE_KW "PROCEDURE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "drop_sql_command"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_POLICY_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    POLICY_KW "POLICY"
    WHITESPACE " "
    NAME
      IDENT "p1"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_test"
    WHITESPACE " "
    USING_KW "USING"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      FALSE_KW "FALSE"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_POLICY_STMT
    ALTER_KW "ALTER"
    WHITESPACE " "
    POLICY_KW "POLICY"
    WHITESPACE " "
    NAME_REF
      IDENT "p1"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    NAME_REF
      IDENT "event_trigger_test"
    WHITESPACE " "
    USING_KW "USING"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      TRUE_KW "TRUE"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  ALTER_POLICY_STMT
    ALTER_KW "ALTER"
    WHITESPACE " "
    POLICY_KW "POLICY"
    WHITESPACE " "
    NAME_REF
      IDENT "p1"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    NAME_REF
      IDENT "event_trigger_test"
    WHITESPACE " "
    RENAME_KW "RENAME"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    NAME
      IDENT "p2"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_POLICY_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    POLICY_KW "POLICY"
    WHITESPACE " "
    NAME_REF
      IDENT "p2"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_test"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Check the object addresses of all the event triggers."
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE "\n    "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "e"
            DOT "."
            NAME_REF
              IDENT "evtname"
        COMMA ","
        WHITESPACE "\n    "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_describe_object"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'pg_event_trigger'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "regclass"
              COMMA ","
              WHITESPACE " "
              FIELD_EXPR
                NAME_REF
                  IDENT "e"
                DOT "."
                NAME_REF
                  IDENT "oid"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "0"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "descr"
        COMMA ","
        WHITESPACE "\n    "
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            NAME_REF
              TYPE_KW "type"
        COMMA ","
        WHITESPACE " "
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            NAME_REF
              IDENT "object_names"
        COMMA ","
        WHITESPACE " "
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            NAME_REF
              IDENT "object_args"
        COMMA ","
        WHITESPACE "\n    "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_identify_object"
            ARG_LIST
              L_PAREN "("
              FIELD_EXPR
                NAME_REF
                  IDENT "a"
                DOT "."
                NAME_REF
                  IDENT "classid"
              COMMA ","
              WHITESPACE " "
              FIELD_EXPR
                NAME_REF
                  IDENT "a"
                DOT "."
                NAME_REF
                  IDENT "objid"
              COMMA ","
              WHITESPACE " "
              FIELD_EXPR
                NAME_REF
                  IDENT "a"
                DOT "."
                NAME_REF
                  IDENT "objsubid"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ident"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_event_trigger"
      WHITESPACE " "
      ALIAS
        AS_KW "as"
        WHITESPACE " "
        NAME
          IDENT "e"
      COMMA ","
      WHITESPACE "\n    "
      LATERAL_KW "LATERAL"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_identify_object_as_address"
        ARG_LIST
          L_PAREN "("
          CAST_EXPR
            LITERAL
              STRING "'pg_event_trigger'"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    IDENT "regclass"
          COMMA ","
          WHITESPACE " "
          FIELD_EXPR
            NAME_REF
              IDENT "e"
            DOT "."
            NAME_REF
              IDENT "oid"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "0"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        AS_KW "as"
        WHITESPACE " "
        NAME
          IDENT "b"
      COMMA ","
      WHITESPACE "\n    "
      LATERAL_KW "LATERAL"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_get_object_address"
        ARG_LIST
          L_PAREN "("
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            NAME_REF
              TYPE_KW "type"
          COMMA ","
          WHITESPACE " "
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            NAME_REF
              IDENT "object_names"
          COMMA ","
          WHITESPACE " "
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            NAME_REF
              IDENT "object_args"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        AS_KW "as"
        WHITESPACE " "
        NAME
          IDENT "a"
    WHITESPACE "\n  "
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      FIELD_EXPR
        NAME_REF
          IDENT "e"
        DOT "."
        NAME_REF
          IDENT "evtname"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME_REF
      IDENT "start_rls_command"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME_REF
      IDENT "end_rls_command"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_EVENT_TRIGGER_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME_REF
      IDENT "sql_drop_command"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Check the GUC for disabling event triggers"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_event_trigger_guc"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "event_trigger"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nDECLARE\n\tobj record;\nBEGIN\n\tFOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()\n\tLOOP\n\t\tRAISE NOTICE '% dropped %', tg_tag, obj.object_type;\n\tEND LOOP;\nEND;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_EVENT_TRIGGER_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    EVENT_KW "EVENT"
    WHITESPACE " "
    TRIGGER_KW "TRIGGER"
    WHITESPACE " "
    NAME
      IDENT "test_event_trigger_guc"
    WHITESPACE "\n\t"
    ON_KW "ON"
    WHITESPACE " "
    IDENT "sql_drop"
    WHITESPACE "\n\t"
    WHEN_KW "WHEN"
    WHITESPACE " "
    NAME_REF
      IDENT "TAG"
    WHITESPACE " "
    IN_KW "IN"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'DROP POLICY'"
    R_PAREN ")"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_event_trigger_guc"
    L_PAREN "("
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SET_STMT
    SET_KW "SET"
    WHITESPACE " "
    NAME_REF
      IDENT "event_triggers"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'on'"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_POLICY_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    POLICY_KW "POLICY"
    WHITESPACE " "
    NAME
      IDENT "pguc"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_test"
    WHITESPACE " "
    USING_KW "USING"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      FALSE_KW "FALSE"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_POLICY_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    POLICY_KW "POLICY"
    WHITESPACE " "
    NAME_REF
      IDENT "pguc"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_test"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_POLICY_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    POLICY_KW "POLICY"
    WHITESPACE " "
    NAME
      IDENT "pguc"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_test"
    WHITESPACE " "
    USING_KW "USING"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      FALSE_KW "FALSE"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_STMT
    SET_KW "SET"
    WHITESPACE " "
    NAME_REF
      IDENT "event_triggers"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'off'"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_POLICY_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    POLICY_KW "POLICY"
    WHITESPACE " "
    NAME_REF
      IDENT "pguc"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "event_trigger_test"
  SEMICOLON ";"
  WHITESPACE "\n"
---
ERROR@2901: expected R_PAREN
ERROR@2901: expected SEMICOLON
ERROR@2901: expected command, found STRING
ERROR@2923: expected command, found R_PAREN
ERROR@10577: expected SEMICOLON
ERROR@10614: expected SEMICOLON
ERROR@10692: expected SEMICOLON
