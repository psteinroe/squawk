---
source: crates/squawk_parser/tests/regression_suite.rs
assertion_line: 87
input_file: crates/squawk_parser/tests/data/regression_suite/create_cast.sql
---
SOURCE_FILE
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- CREATE_CAST"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  COMMENT "-- Create some types to test with"
  WHITESPACE "\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "casttesttype"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "casttesttype_in"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "cstring"
      R_PAREN ")"
    WHITESPACE "\n   "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "casttesttype"
    WHITESPACE "\n   "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'textin'"
      WHITESPACE "\n   "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "internal"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "STRICT"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "IMMUTABLE"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "casttesttype_out"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "casttesttype"
      R_PAREN ")"
    WHITESPACE "\n   "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "cstring"
    WHITESPACE "\n   "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'textout'"
      WHITESPACE "\n   "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "internal"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "STRICT"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "IMMUTABLE"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "casttesttype"
    WHITESPACE " "
    L_PAREN "("
    WHITESPACE "\n   "
    NAME
      IDENT "internallength"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "variable"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      INPUT_KW "input"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "casttesttype_in"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "output"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "casttesttype_out"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "alignment"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int4"
    WHITESPACE "\n"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- a dummy function to test with"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "casttestfunc"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "casttesttype"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "int4"
    WHITESPACE " "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        SQL_KW "SQL"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE "\n"
        LITERAL
          DOLLAR_QUOTED_STRING "$$ SELECT 1; $$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "casttestfunc"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'foo'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- fails, as there's no cast"
  WHITESPACE "\n\n"
  COMMENT "-- Try binary coercion cast"
  WHITESPACE "\n"
  CREATE_CAST_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    CAST_KW "CAST"
    WHITESPACE " "
    L_PAREN "("
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            TEXT_KW "text"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "casttesttype"
    R_PAREN ")"
    WHITESPACE " "
    WITHOUT_KW "WITHOUT"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "casttestfunc"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'foo'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- doesn't work, as the cast is explicit"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "casttestfunc"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                CAST_EXPR
                  LITERAL
                    STRING "'foo'"
                  COLON2 "::"
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "casttesttype"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- should work"
  WHITESPACE "\n"
  DROP_CAST_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    CAST_KW "CAST"
    WHITESPACE " "
    L_PAREN "("
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            TEXT_KW "text"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "casttesttype"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- cleanup"
  WHITESPACE "\n\n"
  COMMENT "-- Try IMPLICIT binary coercion cast"
  WHITESPACE "\n"
  CREATE_CAST_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    CAST_KW "CAST"
    WHITESPACE " "
    L_PAREN "("
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            TEXT_KW "text"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "casttesttype"
    R_PAREN ")"
    WHITESPACE " "
    WITHOUT_KW "WITHOUT"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    IMPLICIT_KW "IMPLICIT"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "casttestfunc"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'foo'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- Should work now"
  WHITESPACE "\n\n"
  COMMENT "-- Try I/O conversion cast."
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CAST_EXPR
            CAST_EXPR
              LITERAL
                INT_NUMBER "1234"
              COLON2 "::"
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      IDENT "int4"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    IDENT "casttesttype"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- No cast yet, should fail"
  WHITESPACE "\n\n"
  CREATE_CAST_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    CAST_KW "CAST"
    WHITESPACE " "
    L_PAREN "("
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int4"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "casttesttype"
    R_PAREN ")"
    WHITESPACE " "
    WITH_KW "WITH"
    WHITESPACE " "
    INOUT_KW "INOUT"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CAST_EXPR
            CAST_EXPR
              LITERAL
                INT_NUMBER "1234"
              COLON2 "::"
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      IDENT "int4"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    IDENT "casttesttype"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- Should work now"
  WHITESPACE "\n\n"
  DROP_CAST_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    CAST_KW "CAST"
    WHITESPACE " "
    L_PAREN "("
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int4"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "casttesttype"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Try cast with a function"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "int4_casttesttype"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "int4"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "casttesttype"
    WHITESPACE " "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        SQL_KW "SQL"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE "\n"
        LITERAL
          DOLLAR_QUOTED_STRING "$$ SELECT ('foo'::text || $1::text)::casttesttype; $$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_CAST_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    CAST_KW "CAST"
    WHITESPACE " "
    L_PAREN "("
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int4"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "casttesttype"
    R_PAREN ")"
    WHITESPACE " "
    WITH_KW "WITH"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "int4_casttesttype"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "int4"
      R_PAREN ")"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    IMPLICIT_KW "IMPLICIT"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CAST_EXPR
            CAST_EXPR
              LITERAL
                INT_NUMBER "1234"
              COLON2 "::"
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      IDENT "int4"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    IDENT "casttesttype"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- Should work now"
  WHITESPACE "\n\n"
  DROP_FUNCTION_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "int4_casttesttype"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "int4"
      R_PAREN ")"
    WHITESPACE " "
    CASCADE_KW "CASCADE"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Try it with a function that requires an implicit cast"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bar_int4_text"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "int4"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        SQL_KW "SQL"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE "\n"
        LITERAL
          DOLLAR_QUOTED_STRING "$$ SELECT ('bar'::text || $1::text); $$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_CAST_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    CAST_KW "CAST"
    WHITESPACE " "
    L_PAREN "("
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int4"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "casttesttype"
    R_PAREN ")"
    WHITESPACE " "
    WITH_KW "WITH"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "bar_int4_text"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "int4"
      R_PAREN ")"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    IMPLICIT_KW "IMPLICIT"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CAST_EXPR
            CAST_EXPR
              LITERAL
                INT_NUMBER "1234"
              COLON2 "::"
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      IDENT "int4"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    IDENT "casttesttype"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- Should work now"
  WHITESPACE "\n\n"
  COMMENT "-- check dependencies generated for that"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_describe_object"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "classid"
              COMMA ","
              WHITESPACE " "
              NAME_REF
                IDENT "objid"
              COMMA ","
              WHITESPACE " "
              NAME_REF
                IDENT "objsubid"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "obj"
        COMMA ","
        WHITESPACE "\n       "
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_describe_object"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "refclassid"
              COMMA ","
              WHITESPACE " "
              NAME_REF
                IDENT "refobjid"
              COMMA ","
              WHITESPACE " "
              NAME_REF
                IDENT "refobjsubid"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "objref"
        COMMA ","
        WHITESPACE "\n       "
        TARGET
          NAME_REF
            IDENT "deptype"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_depend"
    WHITESPACE "\n"
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          NAME_REF
            IDENT "classid"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          CAST_EXPR
            LITERAL
              STRING "'pg_cast'"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    IDENT "regclass"
        WHITESPACE " "
        AND_KW "AND"
        WHITESPACE "\n      "
        BIN_EXPR
          NAME_REF
            IDENT "objid"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          PAREN_EXPR
            L_PAREN "("
            SELECT
              SELECT_CLAUSE
                SELECT_KW "SELECT"
                WHITESPACE " "
                TARGET_LIST
                  TARGET
                    NAME_REF
                      IDENT "oid"
              WHITESPACE " "
              FROM_CLAUSE
                FROM_KW "FROM"
                WHITESPACE " "
                NAME_REF
                  IDENT "pg_cast"
              WHITESPACE "\n               "
              WHERE_CLAUSE
                WHERE_KW "WHERE"
                WHITESPACE " "
                BIN_EXPR
                  BIN_EXPR
                    NAME_REF
                      IDENT "castsource"
                    WHITESPACE " "
                    EQ "="
                    WHITESPACE " "
                    CAST_EXPR
                      LITERAL
                        STRING "'int4'"
                      COLON2 "::"
                      PATH_TYPE
                        PATH
                          PATH_SEGMENT
                            NAME_REF
                              IDENT "regtype"
                  WHITESPACE "\n                 "
                  AND_KW "AND"
                  WHITESPACE " "
                  BIN_EXPR
                    NAME_REF
                      IDENT "casttarget"
                    WHITESPACE " "
                    EQ "="
                    WHITESPACE " "
                    CAST_EXPR
                      LITERAL
                        STRING "'casttesttype'"
                      COLON2 "::"
                      PATH_TYPE
                        PATH
                          PATH_SEGMENT
                            NAME_REF
                              IDENT "regtype"
            R_PAREN ")"
    WHITESPACE "\n"
    ORDER_BY_CLAUSE
      ORDER_KW "ORDER"
      WHITESPACE " "
      BY_KW "BY"
      WHITESPACE " "
      NAME_REF
        IDENT "refclassid"
  SEMICOLON ";"
  WHITESPACE "\n"
