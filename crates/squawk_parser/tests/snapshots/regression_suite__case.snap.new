---
source: crates/squawk_parser/tests/regression_suite.rs
assertion_line: 87
input_file: crates/squawk_parser/tests/data/regression_suite/case.sql
---
SOURCE_FILE
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- CASE"
  WHITESPACE "\n"
  COMMENT "-- Test the case statement"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "CASE_TBL"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n  "
      COLUMN
        NAME_REF
          IDENT "i"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      COMMA ","
      WHITESPACE "\n  "
      COLUMN
        NAME_REF
          IDENT "f"
        WHITESPACE " "
        DOUBLE_TYPE
          DOUBLE_KW "double"
          WHITESPACE " "
          PRECISION_KW "precision"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "CASE2_TBL"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n  "
      COLUMN
        NAME_REF
          IDENT "i"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      COMMA ","
      WHITESPACE "\n  "
      COLUMN
        NAME_REF
          IDENT "j"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "CASE_TBL"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      COMMA ","
      WHITESPACE " "
      LITERAL
        FLOAT_NUMBER "10.1"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "CASE_TBL"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "2"
      COMMA ","
      WHITESPACE " "
      LITERAL
        FLOAT_NUMBER "20.2"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "CASE_TBL"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "3"
      COMMA ","
      WHITESPACE " "
      PREFIX_EXPR
        MINUS "-"
        LITERAL
          FLOAT_NUMBER "30.3"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "CASE_TBL"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "4"
      COMMA ","
      WHITESPACE " "
      LITERAL
        NULL_KW "NULL"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "CASE2_TBL"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      COMMA ","
      WHITESPACE " "
      PREFIX_EXPR
        MINUS "-"
        LITERAL
          INT_NUMBER "1"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "CASE2_TBL"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "2"
      COMMA ","
      WHITESPACE " "
      PREFIX_EXPR
        MINUS "-"
        LITERAL
          INT_NUMBER "2"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "CASE2_TBL"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "3"
      COMMA ","
      WHITESPACE " "
      PREFIX_EXPR
        MINUS "-"
        LITERAL
          INT_NUMBER "3"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "CASE2_TBL"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "2"
      COMMA ","
      WHITESPACE " "
      PREFIX_EXPR
        MINUS "-"
        LITERAL
          INT_NUMBER "4"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "CASE2_TBL"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        INT_NUMBER "1"
      COMMA ","
      WHITESPACE " "
      LITERAL
        NULL_KW "NULL"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "CASE2_TBL"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        NULL_KW "NULL"
      COMMA ","
      WHITESPACE " "
      PREFIX_EXPR
        MINUS "-"
        LITERAL
          INT_NUMBER "6"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Simplest examples without tables"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          LITERAL
            STRING "'3'"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"One\""
        COMMA ","
        WHITESPACE "\n  "
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE "\n    "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              BIN_EXPR
                LITERAL
                  INT_NUMBER "1"
                WHITESPACE " "
                L_ANGLE "<"
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "2"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                INT_NUMBER "3"
            WHITESPACE "\n  "
            END_KW "END"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"Simple WHEN\""
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          LITERAL
            STRING "'<NULL>'"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"One\""
        COMMA ","
        WHITESPACE "\n  "
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE "\n    "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              BIN_EXPR
                LITERAL
                  INT_NUMBER "1"
                WHITESPACE " "
                R_ANGLE ">"
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "2"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                INT_NUMBER "3"
            WHITESPACE "\n  "
            END_KW "END"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"Simple default\""
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          LITERAL
            STRING "'3'"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"One\""
        COMMA ","
        WHITESPACE "\n  "
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE "\n    "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              BIN_EXPR
                LITERAL
                  INT_NUMBER "1"
                WHITESPACE " "
                L_ANGLE "<"
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "2"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                INT_NUMBER "3"
            WHITESPACE "\n    "
            ELSE_KW "ELSE"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "4"
            WHITESPACE "\n  "
            END_KW "END"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"Simple ELSE\""
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          LITERAL
            STRING "'4'"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"One\""
        COMMA ","
        WHITESPACE "\n  "
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE "\n    "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              BIN_EXPR
                LITERAL
                  INT_NUMBER "1"
                WHITESPACE " "
                R_ANGLE ">"
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "2"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                INT_NUMBER "3"
            WHITESPACE "\n    "
            ELSE_KW "ELSE"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "4"
            WHITESPACE "\n  "
            END_KW "END"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"ELSE default\""
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          LITERAL
            STRING "'6'"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"One\""
        COMMA ","
        WHITESPACE "\n  "
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE "\n    "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              BIN_EXPR
                LITERAL
                  INT_NUMBER "1"
                WHITESPACE " "
                R_ANGLE ">"
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "2"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                INT_NUMBER "3"
            WHITESPACE "\n    "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              BIN_EXPR
                LITERAL
                  INT_NUMBER "4"
                WHITESPACE " "
                L_ANGLE "<"
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "5"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                INT_NUMBER "6"
            WHITESPACE "\n    "
            ELSE_KW "ELSE"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "7"
            WHITESPACE "\n  "
            END_KW "END"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"Two WHEN with default\""
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          LITERAL
            STRING "'7'"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"None\""
        COMMA ","
        WHITESPACE "\n   "
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE " "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              BIN_EXPR
                CALL_EXPR
                  NAME_REF
                    IDENT "random"
                  ARG_LIST
                    L_PAREN "("
                    R_PAREN ")"
                WHITESPACE " "
                L_ANGLE "<"
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "0"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                INT_NUMBER "1"
            WHITESPACE "\n   "
            END_KW "END"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"NULL on no matches\""
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Constant-expression folding shouldn't evaluate unreachable subexpressions"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE " "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              BIN_EXPR
                LITERAL
                  INT_NUMBER "1"
                EQ "="
                LITERAL
                  INT_NUMBER "0"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              BIN_EXPR
                LITERAL
                  INT_NUMBER "1"
                SLASH "/"
                LITERAL
                  INT_NUMBER "0"
            WHITESPACE " "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              BIN_EXPR
                LITERAL
                  INT_NUMBER "1"
                EQ "="
                LITERAL
                  INT_NUMBER "1"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                INT_NUMBER "1"
            WHITESPACE " "
            ELSE_KW "ELSE"
            WHITESPACE " "
            BIN_EXPR
              LITERAL
                INT_NUMBER "2"
              SLASH "/"
              LITERAL
                INT_NUMBER "0"
            WHITESPACE " "
            END_KW "END"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "1"
            WHITESPACE " "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              LITERAL
                INT_NUMBER "0"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              BIN_EXPR
                LITERAL
                  INT_NUMBER "1"
                SLASH "/"
                LITERAL
                  INT_NUMBER "0"
            WHITESPACE " "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              LITERAL
                INT_NUMBER "1"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                INT_NUMBER "1"
            WHITESPACE " "
            ELSE_KW "ELSE"
            WHITESPACE " "
            BIN_EXPR
              LITERAL
                INT_NUMBER "2"
              SLASH "/"
              LITERAL
                INT_NUMBER "0"
            WHITESPACE " "
            END_KW "END"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- However we do not currently suppress folding of potentially"
  WHITESPACE "\n"
  COMMENT "-- reachable subexpressions"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE " "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              BIN_EXPR
                NAME_REF
                  IDENT "i"
                WHITESPACE " "
                R_ANGLE ">"
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "100"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              BIN_EXPR
                LITERAL
                  INT_NUMBER "1"
                SLASH "/"
                LITERAL
                  INT_NUMBER "0"
            WHITESPACE " "
            ELSE_KW "ELSE"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
            WHITESPACE " "
            END_KW "END"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "case_tbl"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test for cases involving untyped literals in test expression"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE " "
            LITERAL
              STRING "'a'"
            WHITESPACE " "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              LITERAL
                STRING "'a'"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                INT_NUMBER "1"
            WHITESPACE " "
            ELSE_KW "ELSE"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "2"
            WHITESPACE " "
            END_KW "END"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Examples of targets involving tables"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE "\n  "
      TARGET_LIST
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE "\n    "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              BIN_EXPR
                NAME_REF
                  IDENT "i"
                WHITESPACE " "
                GTEQ ">="
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "3"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              NAME_REF
                IDENT "i"
            WHITESPACE "\n  "
            END_KW "END"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\">= 3 or Null\""
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE "\n  "
      TARGET_LIST
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE " "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              BIN_EXPR
                NAME_REF
                  IDENT "i"
                WHITESPACE " "
                GTEQ ">="
                WHITESPACE " "
                LITERAL
                  INT_NUMBER "3"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              PAREN_EXPR
                L_PAREN "("
                BIN_EXPR
                  NAME_REF
                    IDENT "i"
                  WHITESPACE " "
                  PLUS "+"
                  WHITESPACE " "
                  NAME_REF
                    IDENT "i"
                R_PAREN ")"
            WHITESPACE "\n       "
            ELSE_KW "ELSE"
            WHITESPACE " "
            NAME_REF
              IDENT "i"
            WHITESPACE "\n  "
            END_KW "END"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"Simplest Math\""
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "i"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"Value\""
        COMMA ","
        WHITESPACE "\n  "
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE " "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              PAREN_EXPR
                L_PAREN "("
                BIN_EXPR
                  NAME_REF
                    IDENT "i"
                  WHITESPACE " "
                  L_ANGLE "<"
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "0"
                R_PAREN ")"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                STRING "'small'"
            WHITESPACE "\n       "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              PAREN_EXPR
                L_PAREN "("
                BIN_EXPR
                  NAME_REF
                    IDENT "i"
                  WHITESPACE " "
                  EQ "="
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "0"
                R_PAREN ")"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                STRING "'zero'"
            WHITESPACE "\n       "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              PAREN_EXPR
                L_PAREN "("
                BIN_EXPR
                  NAME_REF
                    IDENT "i"
                  WHITESPACE " "
                  EQ "="
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "1"
                R_PAREN ")"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                STRING "'one'"
            WHITESPACE "\n       "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              PAREN_EXPR
                L_PAREN "("
                BIN_EXPR
                  NAME_REF
                    IDENT "i"
                  WHITESPACE " "
                  EQ "="
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "2"
                R_PAREN ")"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                STRING "'two'"
            WHITESPACE "\n       "
            ELSE_KW "ELSE"
            WHITESPACE " "
            LITERAL
              STRING "'big'"
            WHITESPACE "\n  "
            END_KW "END"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"Category\""
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE "\n  "
      TARGET_LIST
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE " "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              PAREN_EXPR
                L_PAREN "("
                BIN_EXPR
                  PAREN_EXPR
                    L_PAREN "("
                    BIN_EXPR
                      NAME_REF
                        IDENT "i"
                      WHITESPACE " "
                      L_ANGLE "<"
                      WHITESPACE " "
                      LITERAL
                        INT_NUMBER "0"
                    R_PAREN ")"
                  WHITESPACE " "
                  OR_KW "or"
                  WHITESPACE " "
                  PAREN_EXPR
                    L_PAREN "("
                    BIN_EXPR
                      NAME_REF
                        IDENT "i"
                      WHITESPACE " "
                      L_ANGLE "<"
                      WHITESPACE " "
                      LITERAL
                        INT_NUMBER "0"
                    R_PAREN ")"
                R_PAREN ")"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                STRING "'small'"
            WHITESPACE "\n       "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              PAREN_EXPR
                L_PAREN "("
                BIN_EXPR
                  PAREN_EXPR
                    L_PAREN "("
                    BIN_EXPR
                      NAME_REF
                        IDENT "i"
                      WHITESPACE " "
                      EQ "="
                      WHITESPACE " "
                      LITERAL
                        INT_NUMBER "0"
                    R_PAREN ")"
                  WHITESPACE " "
                  OR_KW "or"
                  WHITESPACE " "
                  PAREN_EXPR
                    L_PAREN "("
                    BIN_EXPR
                      NAME_REF
                        IDENT "i"
                      WHITESPACE " "
                      EQ "="
                      WHITESPACE " "
                      LITERAL
                        INT_NUMBER "0"
                    R_PAREN ")"
                R_PAREN ")"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                STRING "'zero'"
            WHITESPACE "\n       "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              PAREN_EXPR
                L_PAREN "("
                BIN_EXPR
                  PAREN_EXPR
                    L_PAREN "("
                    BIN_EXPR
                      NAME_REF
                        IDENT "i"
                      WHITESPACE " "
                      EQ "="
                      WHITESPACE " "
                      LITERAL
                        INT_NUMBER "1"
                    R_PAREN ")"
                  WHITESPACE " "
                  OR_KW "or"
                  WHITESPACE " "
                  PAREN_EXPR
                    L_PAREN "("
                    BIN_EXPR
                      NAME_REF
                        IDENT "i"
                      WHITESPACE " "
                      EQ "="
                      WHITESPACE " "
                      LITERAL
                        INT_NUMBER "1"
                    R_PAREN ")"
                R_PAREN ")"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                STRING "'one'"
            WHITESPACE "\n       "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              PAREN_EXPR
                L_PAREN "("
                BIN_EXPR
                  PAREN_EXPR
                    L_PAREN "("
                    BIN_EXPR
                      NAME_REF
                        IDENT "i"
                      WHITESPACE " "
                      EQ "="
                      WHITESPACE " "
                      LITERAL
                        INT_NUMBER "2"
                    R_PAREN ")"
                  WHITESPACE " "
                  OR_KW "or"
                  WHITESPACE " "
                  PAREN_EXPR
                    L_PAREN "("
                    BIN_EXPR
                      NAME_REF
                        IDENT "i"
                      WHITESPACE " "
                      EQ "="
                      WHITESPACE " "
                      LITERAL
                        INT_NUMBER "2"
                    R_PAREN ")"
                R_PAREN ")"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                STRING "'two'"
            WHITESPACE "\n       "
            ELSE_KW "ELSE"
            WHITESPACE " "
            LITERAL
              STRING "'big'"
            WHITESPACE "\n  "
            END_KW "END"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"Category\""
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Examples of qualifications involving tables"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- NULLIF() and COALESCE()"
  WHITESPACE "\n"
  COMMENT "-- Shorthand forms for typical CASE constructs"
  WHITESPACE "\n"
  COMMENT "--  defined in the SQL standard."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        CALL_EXPR
          NAME_REF
            COALESCE_KW "COALESCE"
          ARG_LIST
            L_PAREN "("
            NAME_REF
              IDENT "f"
            COMMA ","
            NAME_REF
              IDENT "i"
            R_PAREN ")"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "4"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        CALL_EXPR
          NAME_REF
            NULLIF_KW "NULLIF"
          ARG_LIST
            L_PAREN "("
            NAME_REF
              IDENT "f"
            COMMA ","
            NAME_REF
              IDENT "i"
            R_PAREN ")"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "2"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              COALESCE_KW "COALESCE"
            ARG_LIST
              L_PAREN "("
              FIELD_EXPR
                NAME_REF
                  IDENT "a"
                DOT "."
                NAME_REF
                  IDENT "f"
              COMMA ","
              WHITESPACE " "
              FIELD_EXPR
                NAME_REF
                  IDENT "b"
                DOT "."
                NAME_REF
                  IDENT "i"
              COMMA ","
              WHITESPACE " "
              FIELD_EXPR
                NAME_REF
                  IDENT "b"
                DOT "."
                NAME_REF
                  IDENT "j"
              R_PAREN ")"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "a"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "CASE2_TBL"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "a"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "CASE2_TBL"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        CALL_EXPR
          NAME_REF
            COALESCE_KW "COALESCE"
          ARG_LIST
            L_PAREN "("
            FIELD_EXPR
              NAME_REF
                IDENT "a"
              DOT "."
              NAME_REF
                IDENT "f"
            COMMA ","
            WHITESPACE " "
            FIELD_EXPR
              NAME_REF
                IDENT "b"
              DOT "."
              NAME_REF
                IDENT "i"
            COMMA ","
            WHITESPACE " "
            FIELD_EXPR
              NAME_REF
                IDENT "b"
              DOT "."
              NAME_REF
                IDENT "j"
            R_PAREN ")"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "2"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              NULLIF_KW "NULLIF"
            ARG_LIST
              L_PAREN "("
              FIELD_EXPR
                NAME_REF
                  IDENT "a"
                DOT "."
                NAME_REF
                  IDENT "i"
              COMMA ","
              FIELD_EXPR
                NAME_REF
                  IDENT "b"
                DOT "."
                NAME_REF
                  IDENT "i"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"NULLIF(a.i,b.i)\""
        COMMA ","
        WHITESPACE "\n  "
        TARGET
          CALL_EXPR
            NAME_REF
              NULLIF_KW "NULLIF"
            ARG_LIST
              L_PAREN "("
              FIELD_EXPR
                NAME_REF
                  IDENT "b"
                DOT "."
                NAME_REF
                  IDENT "i"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "4"
              R_PAREN ")"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "\"NULLIF(b.i,4)\""
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "a"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "CASE2_TBL"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "a"
      COMMA ","
      WHITESPACE " "
      NAME_REF
        IDENT "CASE2_TBL"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        CALL_EXPR
          NAME_REF
            COALESCE_KW "COALESCE"
          ARG_LIST
            L_PAREN "("
            NAME_REF
              IDENT "f"
            COMMA ","
            FIELD_EXPR
              NAME_REF
                IDENT "b"
              DOT "."
              NAME_REF
                IDENT "i"
            R_PAREN ")"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "2"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Tests for constant subexpression simplification"
  WHITESPACE "\n\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        CALL_EXPR
          NAME_REF
            NULLIF_KW "NULLIF"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "2"
            R_PAREN ")"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "2"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        CALL_EXPR
          NAME_REF
            NULLIF_KW "NULLIF"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              INT_NUMBER "1"
            R_PAREN ")"
        WHITESPACE " "
        IS_NOT
          IS_KW "IS"
          WHITESPACE " "
          NOT_KW "NOT"
        WHITESPACE " "
        LITERAL
          NULL_KW "NULL"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXPLAIN_STMT
    EXPLAIN_KW "explain"
    WHITESPACE " "
    L_PAREN "("
    IDENT "costs"
    WHITESPACE " "
    ERROR
      OFF_KW "off"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        CALL_EXPR
          NAME_REF
            NULLIF_KW "NULLIF"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            WHITESPACE " "
            LITERAL
              NULL_KW "null"
            R_PAREN ")"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          INT_NUMBER "2"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Examples of updates involving tables"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  UPDATE_STMT
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "CASE_TBL"
    WHITESPACE "\n  "
    SET_KW "SET"
    WHITESPACE " "
    NAME_REF
      IDENT "i"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    CASE_EXPR
      CASE_KW "CASE"
      WHITESPACE " "
      WHEN_CLAUSE
        WHEN_KW "WHEN"
        WHITESPACE " "
        BIN_EXPR
          NAME_REF
            IDENT "i"
          WHITESPACE " "
          GTEQ ">="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "3"
        WHITESPACE " "
        THEN_KW "THEN"
        WHITESPACE " "
        PAREN_EXPR
          L_PAREN "("
          PREFIX_EXPR
            MINUS "-"
            WHITESPACE " "
            NAME_REF
              IDENT "i"
          R_PAREN ")"
      WHITESPACE "\n                "
      ELSE_KW "ELSE"
      WHITESPACE " "
      PAREN_EXPR
        L_PAREN "("
        BIN_EXPR
          LITERAL
            INT_NUMBER "2"
          WHITESPACE " "
          STAR "*"
          WHITESPACE " "
          NAME_REF
            IDENT "i"
        R_PAREN ")"
      WHITESPACE " "
      END_KW "END"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  UPDATE_STMT
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "CASE_TBL"
    WHITESPACE "\n  "
    SET_KW "SET"
    WHITESPACE " "
    NAME_REF
      IDENT "i"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    CASE_EXPR
      CASE_KW "CASE"
      WHITESPACE " "
      WHEN_CLAUSE
        WHEN_KW "WHEN"
        WHITESPACE " "
        BIN_EXPR
          NAME_REF
            IDENT "i"
          WHITESPACE " "
          GTEQ ">="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "2"
        WHITESPACE " "
        THEN_KW "THEN"
        WHITESPACE " "
        PAREN_EXPR
          L_PAREN "("
          BIN_EXPR
            LITERAL
              INT_NUMBER "2"
            WHITESPACE " "
            STAR "*"
            WHITESPACE " "
            NAME_REF
              IDENT "i"
          R_PAREN ")"
      WHITESPACE "\n                "
      ELSE_KW "ELSE"
      WHITESPACE " "
      PAREN_EXPR
        L_PAREN "("
        BIN_EXPR
          LITERAL
            INT_NUMBER "3"
          WHITESPACE " "
          STAR "*"
          WHITESPACE " "
          NAME_REF
            IDENT "i"
        R_PAREN ")"
      WHITESPACE " "
      END_KW "END"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  UPDATE_STMT
    UPDATE_KW "UPDATE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "CASE_TBL"
    WHITESPACE "\n  "
    SET_KW "SET"
    WHITESPACE " "
    NAME_REF
      IDENT "i"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    CASE_EXPR
      CASE_KW "CASE"
      WHITESPACE " "
      WHEN_CLAUSE
        WHEN_KW "WHEN"
        WHITESPACE " "
        BIN_EXPR
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            NAME_REF
              IDENT "i"
          WHITESPACE " "
          GTEQ ">="
          WHITESPACE " "
          LITERAL
            INT_NUMBER "2"
        WHITESPACE " "
        THEN_KW "THEN"
        WHITESPACE " "
        PAREN_EXPR
          L_PAREN "("
          BIN_EXPR
            LITERAL
              INT_NUMBER "2"
            WHITESPACE " "
            STAR "*"
            WHITESPACE " "
            NAME_REF
              IDENT "j"
          R_PAREN ")"
      WHITESPACE "\n                "
      ELSE_KW "ELSE"
      WHITESPACE " "
      PAREN_EXPR
        L_PAREN "("
        BIN_EXPR
          LITERAL
            INT_NUMBER "3"
          WHITESPACE " "
          STAR "*"
          WHITESPACE " "
          NAME_REF
            IDENT "j"
        R_PAREN ")"
      WHITESPACE " "
      END_KW "END"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE2_TBL"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "b"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "j"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        PREFIX_EXPR
          MINUS "-"
          FIELD_EXPR
            NAME_REF
              IDENT "CASE_TBL"
            DOT "."
            NAME_REF
              IDENT "i"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "CASE_TBL"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Nested CASE expressions"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  COMMENT "-- This test exercises a bug caused by aliasing econtext->caseValue_isNull"
  WHITESPACE "\n"
  COMMENT "-- with the isNull argument of the inner CASE's CaseExpr evaluation.  After"
  WHITESPACE "\n"
  COMMENT "-- evaluating the vol(null) expression in the inner CASE's second WHEN-clause,"
  WHITESPACE "\n"
  COMMENT "-- the isNull flag for the case test value incorrectly became true, causing"
  WHITESPACE "\n"
  COMMENT "-- the third WHEN-clause not to match.  The volatile function calls are needed"
  WHITESPACE "\n"
  COMMENT "-- to prevent constant-folding in the planner, which would hide the bug."
  WHITESPACE "\n\n"
  COMMENT "-- Wrap this in a single transaction so the transient '=' operator doesn't"
  WHITESPACE "\n"
  COMMENT "-- cause problems in concurrent sessions"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "BEGIN"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "vol"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE "\n  "
        LITERAL
          STRING "'begin return $1; end'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        VOLATILE_KW "volatile"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE "\n  "
            PAREN_EXPR
              L_PAREN "("
              CASE_EXPR
                CASE_KW "CASE"
                WHITESPACE " "
                CALL_EXPR
                  NAME_REF
                    IDENT "vol"
                  ARG_LIST
                    L_PAREN "("
                    LITERAL
                      STRING "'bar'"
                    R_PAREN ")"
                WHITESPACE "\n    "
                WHEN_CLAUSE
                  WHEN_KW "WHEN"
                  WHITESPACE " "
                  LITERAL
                    STRING "'foo'"
                  WHITESPACE " "
                  THEN_KW "THEN"
                  WHITESPACE " "
                  LITERAL
                    STRING "'it was foo!'"
                WHITESPACE "\n    "
                WHEN_CLAUSE
                  WHEN_KW "WHEN"
                  WHITESPACE " "
                  CALL_EXPR
                    NAME_REF
                      IDENT "vol"
                    ARG_LIST
                      L_PAREN "("
                      LITERAL
                        NULL_KW "null"
                      R_PAREN ")"
                  WHITESPACE " "
                  THEN_KW "THEN"
                  WHITESPACE " "
                  LITERAL
                    STRING "'null input'"
                WHITESPACE "\n    "
                WHEN_CLAUSE
                  WHEN_KW "WHEN"
                  WHITESPACE " "
                  LITERAL
                    STRING "'bar'"
                  WHITESPACE " "
                  THEN_KW "THEN"
                  WHITESPACE " "
                  LITERAL
                    STRING "'it was bar!'"
                WHITESPACE " "
                END_KW "END"
              WHITESPACE "\n  "
              R_PAREN ")"
            WHITESPACE "\n  "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              LITERAL
                STRING "'it was foo!'"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                STRING "'foo recognized'"
            WHITESPACE "\n  "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              LITERAL
                STRING "'it was bar!'"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                STRING "'bar recognized'"
            WHITESPACE "\n  "
            ELSE_KW "ELSE"
            WHITESPACE " "
            LITERAL
              STRING "'unrecognized'"
            WHITESPACE " "
            END_KW "END"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- In this case, we can't inline the SQL function without confusing things."
  WHITESPACE "\n"
  CREATE_DOMAIN_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    DOMAIN_KW "DOMAIN"
    WHITESPACE " "
    NAME
      IDENT "foodomain"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            TEXT_KW "text"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "volfoo"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "foodomain"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE "\n  "
        LITERAL
          STRING "'begin return $1::foodomain; end'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        VOLATILE_KW "volatile"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "inline_eq"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "foodomain"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "foodomain"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              BOOLEAN_KW "boolean"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE "\n  "
        LITERAL
          STRING "'SELECT CASE $2::text WHEN $1::text THEN true ELSE false END'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        SQL_KW "sql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_OPERATOR_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OPERATOR_KW "OPERATOR"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    L_PAREN "("
    NAME
      PROCEDURE_KW "procedure"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "inline_eq"
    COMMA ","
    WHITESPACE "\n                   "
    NAME
      IDENT "leftarg"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "foodomain"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "rightarg"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "foodomain"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE " "
            CALL_EXPR
              NAME_REF
                IDENT "volfoo"
              ARG_LIST
                L_PAREN "("
                LITERAL
                  STRING "'bar'"
                R_PAREN ")"
            WHITESPACE " "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  STRING "'foo'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "foodomain"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                STRING "'is foo'"
            WHITESPACE " "
            ELSE_KW "ELSE"
            WHITESPACE " "
            LITERAL
              STRING "'is not foo'"
            WHITESPACE " "
            END_KW "END"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ROLLBACK_STMT
    ROLLBACK_KW "ROLLBACK"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test multiple evaluation of a CASE arg that is a read/write object (#14472)"
  WHITESPACE "\n"
  COMMENT "-- Wrap this in a single transaction so the transient '=' operator doesn't"
  WHITESPACE "\n"
  COMMENT "-- cause problems in concurrent sessions"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "BEGIN"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_DOMAIN_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    DOMAIN_KW "DOMAIN"
    WHITESPACE " "
    NAME
      IDENT "arrdomain"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    ARRAY_TYPE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INT_KW "int"
      L_BRACK "["
      R_BRACK "]"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "make_ad"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "arrdomain"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE "\n  "
        LITERAL
          STRING "'declare x arrdomain;\n   begin\n     x := array[$1,$2];\n     return x;\n   end'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        VOLATILE_KW "volatile"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "ad_eq"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "arrdomain"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "arrdomain"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "returns"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              BOOLEAN_KW "boolean"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "as"
        WHITESPACE "\n  "
        LITERAL
          STRING "'begin return array_eq($1, $2); end'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "language"
        WHITESPACE " "
        IDENT "plpgsql"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_OPERATOR_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OPERATOR_KW "OPERATOR"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    L_PAREN "("
    NAME
      PROCEDURE_KW "procedure"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ad_eq"
    COMMA ","
    WHITESPACE "\n                   "
    NAME
      IDENT "leftarg"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "arrdomain"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "rightarg"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "arrdomain"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE " "
            CALL_EXPR
              NAME_REF
                IDENT "make_ad"
              ARG_LIST
                L_PAREN "("
                LITERAL
                  INT_NUMBER "1"
                COMMA ","
                LITERAL
                  INT_NUMBER "2"
                R_PAREN ")"
            WHITESPACE "\n  "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              CAST_EXPR
                ARRAY_EXPR
                  ARRAY_KW "array"
                  L_BRACK "["
                  LITERAL
                    INT_NUMBER "2"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "4"
                  R_BRACK "]"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "arrdomain"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                STRING "'wrong'"
            WHITESPACE "\n  "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              CAST_EXPR
                ARRAY_EXPR
                  ARRAY_KW "array"
                  L_BRACK "["
                  LITERAL
                    INT_NUMBER "2"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "5"
                  R_BRACK "]"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "arrdomain"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                STRING "'still wrong'"
            WHITESPACE "\n  "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              CAST_EXPR
                ARRAY_EXPR
                  ARRAY_KW "array"
                  L_BRACK "["
                  LITERAL
                    INT_NUMBER "1"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "2"
                  R_BRACK "]"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "arrdomain"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              LITERAL
                STRING "'right'"
            WHITESPACE "\n  "
            END_KW "END"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- While we're here, also test handling of a NULLIF arg that is a read/write"
  WHITESPACE "\n"
  COMMENT "-- object (bug #18722)"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              NULLIF_KW "NULLIF"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "make_ad"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    INT_NUMBER "1"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "2"
                  R_PAREN ")"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                ARRAY_EXPR
                  ARRAY_KW "array"
                  L_BRACK "["
                  LITERAL
                    INT_NUMBER "2"
                  COMMA ","
                  LITERAL
                    INT_NUMBER "3"
                  R_BRACK "]"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "arrdomain"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ROLLBACK_STMT
    ROLLBACK_KW "ROLLBACK"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test interaction of CASE with ArrayCoerceExpr (bug #15471)"
  WHITESPACE "\n"
  BEGIN_STMT
    BEGIN_KW "BEGIN"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "casetestenum"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    ENUM_KW "ENUM"
    WHITESPACE " "
    L_PAREN "("
    LITERAL
      STRING "'e'"
    COMMA ","
    WHITESPACE " "
    LITERAL
      STRING "'f'"
    COMMA ","
    WHITESPACE " "
    LITERAL
      STRING "'g'"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE "\n  "
      TARGET_LIST
        TARGET
          CASE_EXPR
            CASE_KW "CASE"
            WHITESPACE " "
            CAST_EXPR
              LITERAL
                STRING "'foo'"
              COLON2 "::"
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      TEXT_KW "text"
            WHITESPACE "\n    "
            WHEN_CLAUSE
              WHEN_KW "WHEN"
              WHITESPACE " "
              LITERAL
                STRING "'foo'"
              WHITESPACE " "
              THEN_KW "THEN"
              WHITESPACE " "
              BIN_EXPR
                ARRAY_EXPR
                  ARRAY_KW "ARRAY"
                  L_BRACK "["
                  LITERAL
                    STRING "'a'"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    STRING "'b'"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    STRING "'c'"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    STRING "'d'"
                  R_BRACK "]"
                WHITESPACE " "
                CUSTOM_OP
                  PIPE "|"
                  PIPE "|"
                WHITESPACE " "
                CAST_EXPR
                  CALL_EXPR
                    NAME_REF
                      IDENT "enum_range"
                    ARG_LIST
                      L_PAREN "("
                      CAST_EXPR
                        LITERAL
                          NULL_KW "NULL"
                        COLON2 "::"
                        PATH_TYPE
                          PATH
                            PATH_SEGMENT
                              NAME_REF
                                IDENT "casetestenum"
                      R_PAREN ")"
                  COLON2 "::"
                  ARRAY_TYPE
                    PATH_TYPE
                      PATH
                        PATH_SEGMENT
                          NAME_REF
                            TEXT_KW "text"
                    L_BRACK "["
                    R_BRACK "]"
            WHITESPACE "\n    "
            ELSE_KW "ELSE"
            WHITESPACE " "
            ARRAY_EXPR
              ARRAY_KW "ARRAY"
              L_BRACK "["
              LITERAL
                STRING "'x'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'y'"
              R_BRACK "]"
            WHITESPACE "\n    "
            END_KW "END"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ROLLBACK_STMT
    ROLLBACK_KW "ROLLBACK"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Clean up"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  DROP_TABLE
    DROP_KW "DROP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "CASE_TBL"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_TABLE
    DROP_KW "DROP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "CASE2_TBL"
  SEMICOLON ";"
  WHITESPACE "\n"
---
ERROR@2912: expected R_PAREN
ERROR@2913: expected command, found OFF_KW
ERROR@2916: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@2916: expected SEMICOLON
ERROR@2916: expected command, found R_PAREN
ERROR@2980: expected R_PAREN
ERROR@2981: expected command, found OFF_KW
ERROR@2984: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@2984: expected SEMICOLON
ERROR@2984: expected command, found R_PAREN
ERROR@3056: expected R_PAREN
ERROR@3057: expected command, found OFF_KW
ERROR@3060: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@3060: expected SEMICOLON
ERROR@3060: expected command, found R_PAREN
