---
source: crates/squawk_parser/tests/regression_suite.rs
assertion_line: 87
input_file: crates/squawk_parser/tests/data/regression_suite/create_type.sql
---
SOURCE_FILE
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- CREATE_TYPE"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  COMMENT "-- directory path and dlsuffix are passed to us in environment variables"
  WHITESPACE "\n\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test the \"old style\" approach of making the I/O functions first,"
  WHITESPACE "\n"
  COMMENT "-- with no explicit shell type creation."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "widget_in"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "cstring"
      R_PAREN ")"
    WHITESPACE "\n   "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "widget"
    WHITESPACE "\n   "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    STRING "'regresslib'"
  WHITESPACE "\n   "
  ERROR
    LANGUAGE_KW "LANGUAGE"
  WHITESPACE " "
  ERROR
    IDENT "C"
  WHITESPACE " "
  ERROR
    STRICT_KW "STRICT"
  WHITESPACE " "
  ERROR
    IMMUTABLE_KW "IMMUTABLE"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "widget_out"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "widget"
      R_PAREN ")"
    WHITESPACE "\n   "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "cstring"
    WHITESPACE "\n   "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    STRING "'regresslib'"
  WHITESPACE "\n   "
  ERROR
    LANGUAGE_KW "LANGUAGE"
  WHITESPACE " "
  ERROR
    IDENT "C"
  WHITESPACE " "
  ERROR
    STRICT_KW "STRICT"
  WHITESPACE " "
  ERROR
    IMMUTABLE_KW "IMMUTABLE"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "int44in"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "cstring"
      R_PAREN ")"
    WHITESPACE "\n   "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "city_budget"
    WHITESPACE "\n   "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    STRING "'regresslib'"
  WHITESPACE "\n   "
  ERROR
    LANGUAGE_KW "LANGUAGE"
  WHITESPACE " "
  ERROR
    IDENT "C"
  WHITESPACE " "
  ERROR
    STRICT_KW "STRICT"
  WHITESPACE " "
  ERROR
    IMMUTABLE_KW "IMMUTABLE"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "int44out"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "city_budget"
      R_PAREN ")"
    WHITESPACE "\n   "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "cstring"
    WHITESPACE "\n   "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    STRING "'regresslib'"
  WHITESPACE "\n   "
  ERROR
    LANGUAGE_KW "LANGUAGE"
  WHITESPACE " "
  ERROR
    IDENT "C"
  WHITESPACE " "
  ERROR
    STRICT_KW "STRICT"
  WHITESPACE " "
  ERROR
    IMMUTABLE_KW "IMMUTABLE"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "widget"
    WHITESPACE " "
    L_PAREN "("
    WHITESPACE "\n   "
    NAME
      IDENT "internallength"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      INT_NUMBER "24"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      INPUT_KW "input"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "widget_in"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "output"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "widget_out"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "typmod_in"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "numerictypmodin"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "typmod_out"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "numerictypmodout"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "alignment"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    DOUBLE_TYPE
      DOUBLE_KW "double"
    WHITESPACE "\n"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "city_budget"
    WHITESPACE " "
    L_PAREN "("
    WHITESPACE "\n   "
    NAME
      IDENT "internallength"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      INT_NUMBER "16"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      INPUT_KW "input"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int44in"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "output"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int44out"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "element"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int4"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "category"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'x'"
    COMMA ","
    WHITESPACE "   "
    COMMENT "-- just to verify the system will take it"
    WHITESPACE "\n   "
    NAME
      IDENT "preferred"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      TRUE_KW "true"
    WHITESPACE "  "
    COMMENT "-- ditto"
    WHITESPACE "\n"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test creation and destruction of shell types"
  WHITESPACE "\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "shell"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "shell"
  SEMICOLON ";"
  WHITESPACE "   "
  COMMENT "-- fail, type already present"
  WHITESPACE "\n"
  DROP_TYPE_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "shell"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_TYPE_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "shell"
  SEMICOLON ";"
  WHITESPACE "     "
  COMMENT "-- fail, type not exist"
  WHITESPACE "\n\n"
  COMMENT "-- also, let's leave one around for purposes of pg_dump testing"
  WHITESPACE "\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myshell"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test type-related default values (broken in releases before PG 7.2)"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- This part of the test also exercises the \"new style\" approach of making"
  WHITESPACE "\n"
  COMMENT "-- a shell type and then filling it in."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "int42"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "text_w_default"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Make dummy I/O routines using the existing internal support for int4, text"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "int42_in"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "cstring"
      R_PAREN ")"
    WHITESPACE "\n   "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "int42"
    WHITESPACE "\n   "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'int4in'"
      WHITESPACE "\n   "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "internal"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "STRICT"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "IMMUTABLE"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "int42_out"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "int42"
      R_PAREN ")"
    WHITESPACE "\n   "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "cstring"
    WHITESPACE "\n   "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'int4out'"
      WHITESPACE "\n   "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "internal"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "STRICT"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "IMMUTABLE"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "text_w_default_in"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "cstring"
      R_PAREN ")"
    WHITESPACE "\n   "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "text_w_default"
    WHITESPACE "\n   "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'textin'"
      WHITESPACE "\n   "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "internal"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "STRICT"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "IMMUTABLE"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "text_w_default_out"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "text_w_default"
      R_PAREN ")"
    WHITESPACE "\n   "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "cstring"
    WHITESPACE "\n   "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'textout'"
      WHITESPACE "\n   "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "internal"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "STRICT"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "IMMUTABLE"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "int42"
    WHITESPACE " "
    L_PAREN "("
    WHITESPACE "\n   "
    NAME
      IDENT "internallength"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      INT_NUMBER "4"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      INPUT_KW "input"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int42_in"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "output"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int42_out"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "alignment"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int4"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      DEFAULT_KW "default"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      INT_NUMBER "42"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "passedbyvalue"
    WHITESPACE "\n"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "text_w_default"
    WHITESPACE " "
    L_PAREN "("
    WHITESPACE "\n   "
    NAME
      IDENT "internallength"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "variable"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      INPUT_KW "input"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "text_w_default_in"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "output"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "text_w_default_out"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "alignment"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int4"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      DEFAULT_KW "default"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      STRING "'zippo'"
    WHITESPACE "\n"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "default_test"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "f1"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "text_w_default"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "f2"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "int42"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "default_test"
    WHITESPACE " "
    DEFAULT_KW "DEFAULT"
    WHITESPACE " "
    VALUES_KW "VALUES"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "default_test"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- We need a shell type to test some CREATE TYPE failure cases with"
  WHITESPACE "\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bogus_type"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- invalid: non-lowercase quoted identifiers"
  WHITESPACE "\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bogus_type"
    WHITESPACE " "
    L_PAREN "("
    WHITESPACE "\n\t"
    NAME
      IDENT "\"Internallength\""
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      INT_NUMBER "4"
    COMMA ","
    WHITESPACE "\n\t"
    NAME
      IDENT "\"Input\""
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int42_in"
    COMMA ","
    WHITESPACE "\n\t"
    NAME
      IDENT "\"Output\""
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int42_out"
    COMMA ","
    WHITESPACE "\n\t"
    NAME
      IDENT "\"Alignment\""
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int4"
    COMMA ","
    WHITESPACE "\n\t"
    NAME
      IDENT "\"Default\""
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      INT_NUMBER "42"
    COMMA ","
    WHITESPACE "\n\t"
    NAME
      IDENT "\"Passedbyvalue\""
    WHITESPACE "\n"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- invalid: input/output function incompatibility"
  WHITESPACE "\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bogus_type"
    WHITESPACE " "
    L_PAREN "("
    NAME
      INPUT_KW "INPUT"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "array_in"
    COMMA ","
    WHITESPACE "\n    "
    NAME
      IDENT "OUTPUT"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "array_out"
    COMMA ","
    WHITESPACE "\n    "
    NAME
      IDENT "ELEMENT"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE "\n    "
    NAME
      IDENT "INTERNALLENGTH"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      INT_NUMBER "32"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_TYPE_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "bogus_type"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- It no longer is possible to issue CREATE TYPE without making a shell first"
  WHITESPACE "\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "bogus_type"
    WHITESPACE " "
    L_PAREN "("
    NAME
      INPUT_KW "INPUT"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "array_in"
    COMMA ","
    WHITESPACE "\n    "
    NAME
      IDENT "OUTPUT"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "array_out"
    COMMA ","
    WHITESPACE "\n    "
    NAME
      IDENT "ELEMENT"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INT_KW "int"
    COMMA ","
    WHITESPACE "\n    "
    NAME
      IDENT "INTERNALLENGTH"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    LITERAL
      INT_NUMBER "32"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test stand-alone composite type"
  WHITESPACE "\n\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "default_test_row"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    L_PAREN "("
    NAME_REF
      IDENT "f1"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "text_w_default"
    COMMA ","
    WHITESPACE " "
    NAME_REF
      IDENT "f2"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "int42"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "get_default_test"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      SETOF_KW "SETOF"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "default_test_row"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'\n  SELECT * FROM default_test;\n'"
      WHITESPACE " "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        SQL_KW "SQL"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "get_default_test"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test comments"
  WHITESPACE "\n"
  COMMENT_STMT
    COMMENT_KW "COMMENT"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "bad"
    WHITESPACE " "
    IS_KW "IS"
    WHITESPACE " "
    LITERAL
      STRING "'bad comment'"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT_STMT
    COMMENT_KW "COMMENT"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "default_test_row"
    WHITESPACE " "
    IS_KW "IS"
    WHITESPACE " "
    LITERAL
      STRING "'good comment'"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT_STMT
    COMMENT_KW "COMMENT"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "default_test_row"
    WHITESPACE " "
    IS_KW "IS"
    WHITESPACE " "
    NULL_KW "NULL"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT_STMT
    COMMENT_KW "COMMENT"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    COLUMN_KW "COLUMN"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "default_test_row"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "nope"
    WHITESPACE " "
    IS_KW "IS"
    WHITESPACE " "
    LITERAL
      STRING "'bad comment'"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT_STMT
    COMMENT_KW "COMMENT"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    COLUMN_KW "COLUMN"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "default_test_row"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    WHITESPACE " "
    IS_KW "IS"
    WHITESPACE " "
    LITERAL
      STRING "'good comment'"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT_STMT
    COMMENT_KW "COMMENT"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    COLUMN_KW "COLUMN"
    WHITESPACE " "
    PATH
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "default_test_row"
      DOT "."
      PATH_SEGMENT
        NAME_REF
          IDENT "f1"
    WHITESPACE " "
    IS_KW "IS"
    WHITESPACE " "
    NULL_KW "NULL"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Check shell type create for existing types"
  WHITESPACE "\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "text_w_default"
  SEMICOLON ";"
  WHITESPACE "\t\t"
  COMMENT "-- should fail"
  WHITESPACE "\n\n"
  DROP_TYPE_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "default_test_row"
    WHITESPACE " "
    CASCADE_KW "CASCADE"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_TABLE
    DROP_KW "DROP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "default_test"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Check dependencies are established when creating a new type"
  WHITESPACE "\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "base_type"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "base_fn_in"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "cstring"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "base_type"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'boolin'"
      WHITESPACE "\n    "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "internal"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "IMMUTABLE"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "STRICT"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "base_fn_out"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "base_type"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "cstring"
    WHITESPACE " "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'boolout'"
      WHITESPACE "\n    "
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "internal"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "IMMUTABLE"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "STRICT"
  SEMICOLON ";"
  WHITESPACE "\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "base_type"
    L_PAREN "("
    NAME
      INPUT_KW "INPUT"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "base_fn_in"
    COMMA ","
    WHITESPACE " "
    NAME
      IDENT "OUTPUT"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "base_fn_out"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "base_fn_in"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "cstring"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- error"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "base_fn_out"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "base_type"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- error"
  WHITESPACE "\n"
  DROP_TYPE_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "base_type"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- error"
  WHITESPACE "\n"
  DROP_TYPE_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "base_type"
    WHITESPACE " "
    CASCADE_KW "CASCADE"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Check usage of typmod with a user-defined type"
  WHITESPACE "\n"
  COMMENT "-- (we have borrowed numeric's typmod functions)"
  WHITESPACE "\n\n"
  CREATE_TABLE
    CREATE_KW "CREATE"
    WHITESPACE " "
    TEMP_KW "TEMP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "mytab"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "foo"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "widget"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "42"
            COMMA ","
            ARG
              LITERAL
                INT_NUMBER "13"
            COMMA ","
            ARG
              LITERAL
                INT_NUMBER "7"
            R_PAREN ")"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "     "
  CREATE_TABLE
    COMMENT "-- should fail"
    WHITESPACE "\n"
    CREATE_KW "CREATE"
    WHITESPACE " "
    TEMP_KW "TEMP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "mytab"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "foo"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "widget"
          L_PAREN "("
          ARG_LIST
            ARG
              LITERAL
                INT_NUMBER "42"
            COMMA ","
            ARG
              LITERAL
                INT_NUMBER "13"
            R_PAREN ")"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "format_type"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "atttypid"
              COMMA ","
              NAME_REF
                IDENT "atttypmod"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_attribute"
    WHITESPACE "\n"
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        BIN_EXPR
          NAME_REF
            IDENT "attrelid"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          CAST_EXPR
            LITERAL
              STRING "'mytab'"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    IDENT "regclass"
        WHITESPACE " "
        AND_KW "AND"
        WHITESPACE " "
        BIN_EXPR
          NAME_REF
            IDENT "attnum"
          WHITESPACE " "
          R_ANGLE ">"
          WHITESPACE " "
          LITERAL
            INT_NUMBER "0"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- might as well exercise the widget type while we're here"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "mytab"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'(1,2,3)'"
      R_PAREN ")"
      COMMA ","
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'(-44,5.5,12)'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "mytab"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- and test format_type() a bit more, too"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "format_type"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'varchar'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "regtype"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "42"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "format_type"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'bpchar'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "regtype"
              COMMA ","
              WHITESPACE " "
              LITERAL
                NULL_KW "null"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- this behavior difference is intentional"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "format_type"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  STRING "'bpchar'"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "regtype"
              COMMA ","
              WHITESPACE " "
              PREFIX_EXPR
                MINUS "-"
                LITERAL
                  INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test non-error-throwing APIs using widget, which still throws errors"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_input_is_valid"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'(1,2,3)'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'widget'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_input_is_valid"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'(1,2)'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'widget'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- hard error expected"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_input_is_valid"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'{\"(1,2,3)\"}'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'widget[]'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_input_is_valid"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'{\"(1,2)\"}'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'widget[]'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- hard error expected"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_input_is_valid"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'(\"(1,2,3)\")'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'mytab'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_input_is_valid"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'(\"(1,2)\")'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'mytab'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- hard error expected"
  WHITESPACE "\n\n"
  COMMENT "-- Test creation of an operator over a user-defined type"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "pt_in_widget"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "point"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "widget"
      R_PAREN ")"
    WHITESPACE "\n   "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "bool"
    WHITESPACE "\n   "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    STRING "'regresslib'"
  WHITESPACE "\n   "
  ERROR
    LANGUAGE_KW "LANGUAGE"
  WHITESPACE " "
  ERROR
    IDENT "C"
  WHITESPACE " "
  ERROR
    STRICT_KW "STRICT"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_OPERATOR_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    OPERATOR_KW "OPERATOR"
    WHITESPACE " "
    CUSTOM_OP
      L_ANGLE "<"
      PERCENT "%"
    WHITESPACE " "
    L_PAREN "("
    WHITESPACE "\n   "
    NAME
      IDENT "leftarg"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "point"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "rightarg"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "widget"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      PROCEDURE_KW "procedure"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "pt_in_widget"
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "commutator"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    CUSTOM_OP
      R_ANGLE ">"
      PERCENT "%"
    WHITESPACE " "
    COMMA ","
    WHITESPACE "\n   "
    NAME
      IDENT "negator"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    CUSTOM_OP
      R_ANGLE ">"
      EQ "="
      PERCENT "%"
    WHITESPACE "\n"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CAST_EXPR
              NAME_REF
                IDENT "point"
              WHITESPACE " "
              LITERAL
                STRING "'(1,2)'"
            WHITESPACE " "
            CUSTOM_OP
              L_ANGLE "<"
              PERCENT "%"
            WHITESPACE " "
            CAST_EXPR
              NAME_REF
                IDENT "widget"
              WHITESPACE " "
              LITERAL
                STRING "'(0,0,3)'"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "t"
        COMMA ","
        WHITESPACE "\n       "
        TARGET
          BIN_EXPR
            CAST_EXPR
              NAME_REF
                IDENT "point"
              WHITESPACE " "
              LITERAL
                STRING "'(1,2)'"
            WHITESPACE " "
            CUSTOM_OP
              L_ANGLE "<"
              PERCENT "%"
            WHITESPACE " "
            CAST_EXPR
              NAME_REF
                IDENT "widget"
              WHITESPACE " "
              LITERAL
                STRING "'(0,0,1)'"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "f"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    COMMENT "-- exercise city_budget type"
    WHITESPACE "\n"
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "city"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          NAME_KW "name"
        WHITESPACE "\t\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                NAME_KW "name"
      COMMA ","
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          LOCATION_KW "location"
        WHITESPACE " \t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "box"
      COMMA ","
      WHITESPACE "\n\t"
      COLUMN
        NAME_REF
          IDENT "budget"
        WHITESPACE " \t\t"
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "city_budget"
      WHITESPACE "\n"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "city"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE "\n"
      L_PAREN "("
      LITERAL
        STRING "'Podunk'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'(1,2),(3,4)'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'100,127,1000'"
      R_PAREN ")"
      COMMA ","
      WHITESPACE "\n"
      L_PAREN "("
      LITERAL
        STRING "'Gotham'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'(1000,34),(1100,334)'"
      COMMA ","
      WHITESPACE " "
      LITERAL
        STRING "'123456,127,-1000,6789'"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "city"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test CREATE/ALTER TYPE using a type that's compatible with varchar,"
  WHITESPACE "\n"
  COMMENT "-- so we can re-use those support functions"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myvarchar"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myvarcharin"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "cstring"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "oid"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "myvarchar"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "internal"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "IMMUTABLE"
      WHITESPACE " "
      PARALLEL_FUNC_OPTION
        PARALLEL_KW "PARALLEL"
        WHITESPACE " "
        IDENT "SAFE"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "STRICT"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'varcharin'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myvarcharout"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "myvarchar"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "cstring"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "internal"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "IMMUTABLE"
      WHITESPACE " "
      PARALLEL_FUNC_OPTION
        PARALLEL_KW "PARALLEL"
        WHITESPACE " "
        IDENT "SAFE"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "STRICT"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'varcharout'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myvarcharsend"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "myvarchar"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "bytea"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "internal"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        STABLE_KW "STABLE"
      WHITESPACE " "
      PARALLEL_FUNC_OPTION
        PARALLEL_KW "PARALLEL"
        WHITESPACE " "
        IDENT "SAFE"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "STRICT"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'varcharsend'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myvarcharrecv"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "internal"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "oid"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "myvarchar"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "internal"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        STABLE_KW "STABLE"
      WHITESPACE " "
      PARALLEL_FUNC_OPTION
        PARALLEL_KW "PARALLEL"
        WHITESPACE " "
        IDENT "SAFE"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "STRICT"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          STRING "'varcharrecv'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- fail, it's still a shell:"
  WHITESPACE "\n"
  ALTER_TYPE_STMT
    ALTER_KW "ALTER"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "myvarchar"
    WHITESPACE " "
    SET_KW "SET"
    WHITESPACE " "
    L_PAREN "("
    NAME
      STORAGE_KW "storage"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "extended"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TYPE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "myvarchar"
    WHITESPACE " "
    L_PAREN "("
    WHITESPACE "\n    "
    NAME
      INPUT_KW "input"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "myvarcharin"
    COMMA ","
    WHITESPACE "\n    "
    NAME
      IDENT "output"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "myvarcharout"
    COMMA ","
    WHITESPACE "\n    "
    NAME
      IDENT "alignment"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            INTEGER_KW "integer"
    COMMA ","
    WHITESPACE "\n    "
    NAME
      STORAGE_KW "storage"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "main"
    WHITESPACE "\n"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- want to check updating of a domain over the target type, too"
  WHITESPACE "\n"
  CREATE_DOMAIN_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    DOMAIN_KW "DOMAIN"
    WHITESPACE " "
    NAME
      IDENT "myvarchardom"
    WHITESPACE " "
    AS_KW "AS"
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "myvarchar"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ALTER_TYPE_STMT
    ALTER_KW "ALTER"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "myvarchar"
    WHITESPACE " "
    SET_KW "SET"
    WHITESPACE " "
    L_PAREN "("
    NAME
      STORAGE_KW "storage"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "plain"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- not allowed"
  WHITESPACE "\n\n"
  ALTER_TYPE_STMT
    ALTER_KW "ALTER"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "myvarchar"
    WHITESPACE " "
    SET_KW "SET"
    WHITESPACE " "
    L_PAREN "("
    NAME
      STORAGE_KW "storage"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "extended"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ALTER_TYPE_STMT
    ALTER_KW "ALTER"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "myvarchar"
    WHITESPACE " "
    SET_KW "SET"
    WHITESPACE " "
    L_PAREN "("
    WHITESPACE "\n    "
    NAME
      IDENT "send"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "myvarcharsend"
    COMMA ","
    WHITESPACE "\n    "
    NAME
      IDENT "receive"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "myvarcharrecv"
    COMMA ","
    WHITESPACE "\n    "
    NAME
      IDENT "typmod_in"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "varchartypmodin"
    COMMA ","
    WHITESPACE "\n    "
    NAME
      IDENT "typmod_out"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "varchartypmodout"
    COMMA ","
    WHITESPACE "\n    "
    COMMENT "-- these are bogus, but it's safe as long as we don't use the type:"
    WHITESPACE "\n    "
    NAME
      ANALYZE_KW "analyze"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "ts_typanalyze"
    COMMA ","
    WHITESPACE "\n    "
    NAME
      IDENT "subscript"
    WHITESPACE " "
    EQ "="
    WHITESPACE " "
    PATH_TYPE
      PATH
        PATH_SEGMENT
          NAME_REF
            IDENT "raw_array_subscript_handler"
    WHITESPACE "\n"
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "typinput"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typoutput"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typreceive"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typsend"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typmodin"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typmodout"
        COMMA ","
        WHITESPACE "\n       "
        TARGET
          NAME_REF
            IDENT "typanalyze"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typsubscript"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typstorage"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_type"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "typname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'myvarchar'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "typinput"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typoutput"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typreceive"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typsend"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typmodin"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typmodout"
        COMMA ","
        WHITESPACE "\n       "
        TARGET
          NAME_REF
            IDENT "typanalyze"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typsubscript"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typstorage"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_type"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "typname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'_myvarchar'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "typinput"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typoutput"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typreceive"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typsend"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typmodin"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typmodout"
        COMMA ","
        WHITESPACE "\n       "
        TARGET
          NAME_REF
            IDENT "typanalyze"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typsubscript"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typstorage"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_type"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "typname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'myvarchardom'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "typinput"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typoutput"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typreceive"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typsend"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typmodin"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typmodout"
        COMMA ","
        WHITESPACE "\n       "
        TARGET
          NAME_REF
            IDENT "typanalyze"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typsubscript"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "typstorage"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_type"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "typname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'_myvarchardom'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- ensure dependencies are straight"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "myvarcharsend"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "myvarchar"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n"
  DROP_TYPE_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "myvarchar"
  SEMICOLON ";"
  WHITESPACE "  "
  COMMENT "-- fail"
  WHITESPACE "\n\n"
  DROP_TYPE_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    TYPE_KW "TYPE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "myvarchar"
    WHITESPACE " "
    CASCADE_KW "CASCADE"
  SEMICOLON ";"
  WHITESPACE "\n"
---
ERROR@270: expected string literal
ERROR@270: expected SEMICOLON
ERROR@271: expected command, found COLON
ERROR@272: expected command, found STRING
ERROR@288: expected command, found LANGUAGE_KW
ERROR@297: expected command, found IDENT
ERROR@299: expected command, found STRICT_KW
ERROR@306: expected command, found IMMUTABLE_KW
ERROR@377: expected string literal
ERROR@377: expected SEMICOLON
ERROR@378: expected command, found COLON
ERROR@379: expected command, found STRING
ERROR@395: expected command, found LANGUAGE_KW
ERROR@404: expected command, found IDENT
ERROR@406: expected command, found STRICT_KW
ERROR@413: expected command, found IMMUTABLE_KW
ERROR@486: expected string literal
ERROR@486: expected SEMICOLON
ERROR@487: expected command, found COLON
ERROR@488: expected command, found STRING
ERROR@504: expected command, found LANGUAGE_KW
ERROR@513: expected command, found IDENT
ERROR@515: expected command, found STRICT_KW
ERROR@522: expected command, found IMMUTABLE_KW
ERROR@596: expected string literal
ERROR@596: expected SEMICOLON
ERROR@597: expected command, found COLON
ERROR@598: expected command, found STRING
ERROR@614: expected command, found LANGUAGE_KW
ERROR@623: expected command, found IDENT
ERROR@625: expected command, found STRICT_KW
ERROR@632: expected command, found IMMUTABLE_KW
ERROR@822: expected PRECISION_KW
ERROR@5655: expected string literal
ERROR@5655: expected SEMICOLON
ERROR@5656: expected command, found COLON
ERROR@5657: expected command, found STRING
ERROR@5673: expected command, found LANGUAGE_KW
ERROR@5682: expected command, found IDENT
ERROR@5684: expected command, found STRICT_KW
