---
source: crates/squawk_parser/tests/regression_suite.rs
assertion_line: 87
input_file: crates/squawk_parser/tests/data/regression_suite/misc_functions.sql
---
SOURCE_FILE
  COMMENT "-- directory paths and dlsuffix are passed to us in environment variables"
  WHITESPACE "\n\n\n"
  COMMENT "-- Function to assist with verifying EXPLAIN which includes costs.  A series"
  WHITESPACE "\n"
  COMMENT "-- of bool flags allows control over which portions are masked out"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "explain_mask_costs"
    PARAM_LIST
      L_PAREN "("
      PARAM
        NAME
          IDENT "query"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "text"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "do_analyze"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "bool"
      COMMA ","
      WHITESPACE "\n    "
      PARAM
        NAME
          IDENT "hide_costs"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "bool"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "hide_row_est"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "bool"
      COMMA ","
      WHITESPACE " "
      PARAM
        NAME
          IDENT "hide_width"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                IDENT "bool"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      SETOF_KW "setof"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE "\n"
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "plpgsql"
      WHITESPACE " "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE "\n"
        LITERAL
          DOLLAR_QUOTED_STRING "$$\nDECLARE\n    ln text;\n    analyze_str text;\nBEGIN\n    IF do_analyze = true THEN\n        analyze_str := 'on';\n    ELSE\n        analyze_str := 'off';\n    END IF;\n\n    -- avoid jit related output by disabling it\n    SET LOCAL jit = 0;\n\n    FOR ln IN\n        EXECUTE format('explain (analyze %s, costs on, summary off, timing off, buffers off) %s',\n            analyze_str, query)\n    LOOP\n        IF hide_costs = true THEN\n            ln := regexp_replace(ln, 'cost=\\d+\\.\\d\\d\\.\\.\\d+\\.\\d\\d', 'cost=N..N');\n        END IF;\n\n        IF hide_row_est = true THEN\n            -- don't use 'g' so that we leave the actual rows intact\n            ln := regexp_replace(ln, 'rows=\\d+', 'rows=N');\n        END IF;\n\n        IF hide_width = true THEN\n            ln := regexp_replace(ln, 'width=\\d+', 'width=N');\n        END IF;\n\n        RETURN NEXT ln;\n    END LOOP;\nEND;\n$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- num_nulls()"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nonnulls"
            ARG_LIST
              L_PAREN "("
              LITERAL
                NULL_KW "NULL"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nonnulls"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'1'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nonnulls"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  NULL_KW "NULL"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nonnulls"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  NULL_KW "NULL"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  NULL_KW "NULL"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        INT_KW "int"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nonnulls"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  NULL_KW "NULL"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  NULL_KW "NULL"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "point"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "''"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                NAME_REF
                  IDENT "int8"
                WHITESPACE " "
                LITERAL
                  STRING "'9'"
              COMMA ","
              WHITESPACE " "
              BIN_EXPR
                LITERAL
                  FLOAT_NUMBER "1.0"
                WHITESPACE " "
                SLASH "/"
                WHITESPACE " "
                LITERAL
                  NULL_KW "NULL"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nonnulls"
            ARG_LIST
              L_PAREN "("
              VARIADIC_KW "VARIADIC"
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  STRING "'{1,2,NULL,3}'"
                COLON2 "::"
                ARRAY_TYPE
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          INT_KW "int"
                  L_BRACK "["
                  R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nonnulls"
            ARG_LIST
              L_PAREN "("
              VARIADIC_KW "VARIADIC"
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  STRING "'{\"1\",\"2\",\"3\",\"4\"}'"
                COLON2 "::"
                ARRAY_TYPE
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
                  L_BRACK "["
                  R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nonnulls"
            ARG_LIST
              L_PAREN "("
              VARIADIC_KW "VARIADIC"
              WHITESPACE " "
              ARRAY_EXPR
                ARRAY_KW "ARRAY"
                L_PAREN "("
                SELECT
                  SELECT_CLAUSE
                    SELECT_KW "SELECT"
                    WHITESPACE " "
                    TARGET_LIST
                      TARGET
                        CASE_EXPR
                          CASE_KW "CASE"
                          WHITESPACE " "
                          WHEN_CLAUSE
                            WHEN_KW "WHEN"
                            WHITESPACE " "
                            BIN_EXPR
                              NAME_REF
                                IDENT "i"
                              WHITESPACE " "
                              NEQB "<>"
                              WHITESPACE " "
                              LITERAL
                                INT_NUMBER "40"
                            WHITESPACE " "
                            THEN_KW "THEN"
                            WHITESPACE " "
                            NAME_REF
                              IDENT "i"
                          WHITESPACE " "
                          END_KW "END"
                  WHITESPACE " "
                  FROM_CLAUSE
                    FROM_KW "FROM"
                    WHITESPACE " "
                    CALL_EXPR
                      NAME_REF
                        IDENT "generate_series"
                      ARG_LIST
                        L_PAREN "("
                        LITERAL
                          INT_NUMBER "1"
                        COMMA ","
                        WHITESPACE " "
                        LITERAL
                          INT_NUMBER "100"
                        R_PAREN ")"
                    WHITESPACE " "
                    ALIAS
                      NAME
                        IDENT "i"
                R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nulls"
            ARG_LIST
              L_PAREN "("
              LITERAL
                NULL_KW "NULL"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nulls"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'1'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nulls"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  NULL_KW "NULL"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nulls"
            ARG_LIST
              L_PAREN "("
              CAST_EXPR
                LITERAL
                  NULL_KW "NULL"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  NULL_KW "NULL"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        INT_KW "int"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nulls"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "1"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "2"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  NULL_KW "NULL"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        TEXT_KW "text"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  NULL_KW "NULL"
                COLON2 "::"
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      NAME_REF
                        IDENT "point"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "''"
              COMMA ","
              WHITESPACE " "
              CAST_EXPR
                NAME_REF
                  IDENT "int8"
                WHITESPACE " "
                LITERAL
                  STRING "'9'"
              COMMA ","
              WHITESPACE " "
              BIN_EXPR
                LITERAL
                  FLOAT_NUMBER "1.0"
                WHITESPACE " "
                SLASH "/"
                WHITESPACE " "
                LITERAL
                  NULL_KW "NULL"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nulls"
            ARG_LIST
              L_PAREN "("
              VARIADIC_KW "VARIADIC"
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  STRING "'{1,2,NULL,3}'"
                COLON2 "::"
                ARRAY_TYPE
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          INT_KW "int"
                  L_BRACK "["
                  R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nulls"
            ARG_LIST
              L_PAREN "("
              VARIADIC_KW "VARIADIC"
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  STRING "'{\"1\",\"2\",\"3\",\"4\"}'"
                COLON2 "::"
                ARRAY_TYPE
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
                  L_BRACK "["
                  R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nulls"
            ARG_LIST
              L_PAREN "("
              VARIADIC_KW "VARIADIC"
              WHITESPACE " "
              ARRAY_EXPR
                ARRAY_KW "ARRAY"
                L_PAREN "("
                SELECT
                  SELECT_CLAUSE
                    SELECT_KW "SELECT"
                    WHITESPACE " "
                    TARGET_LIST
                      TARGET
                        CASE_EXPR
                          CASE_KW "CASE"
                          WHITESPACE " "
                          WHEN_CLAUSE
                            WHEN_KW "WHEN"
                            WHITESPACE " "
                            BIN_EXPR
                              NAME_REF
                                IDENT "i"
                              WHITESPACE " "
                              NEQB "<>"
                              WHITESPACE " "
                              LITERAL
                                INT_NUMBER "40"
                            WHITESPACE " "
                            THEN_KW "THEN"
                            WHITESPACE " "
                            NAME_REF
                              IDENT "i"
                          WHITESPACE " "
                          END_KW "END"
                  WHITESPACE " "
                  FROM_CLAUSE
                    FROM_KW "FROM"
                    WHITESPACE " "
                    CALL_EXPR
                      NAME_REF
                        IDENT "generate_series"
                      ARG_LIST
                        L_PAREN "("
                        LITERAL
                          INT_NUMBER "1"
                        COMMA ","
                        WHITESPACE " "
                        LITERAL
                          INT_NUMBER "100"
                        R_PAREN ")"
                    WHITESPACE " "
                    ALIAS
                      NAME
                        IDENT "i"
                R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- special cases"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nonnulls"
            ARG_LIST
              L_PAREN "("
              VARIADIC_KW "VARIADIC"
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  NULL_KW "NULL"
                COLON2 "::"
                ARRAY_TYPE
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
                  L_BRACK "["
                  R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nonnulls"
            ARG_LIST
              L_PAREN "("
              VARIADIC_KW "VARIADIC"
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  STRING "'{}'"
                COLON2 "::"
                ARRAY_TYPE
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          INT_KW "int"
                  L_BRACK "["
                  R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nulls"
            ARG_LIST
              L_PAREN "("
              VARIADIC_KW "VARIADIC"
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  NULL_KW "NULL"
                COLON2 "::"
                ARRAY_TYPE
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          TEXT_KW "text"
                  L_BRACK "["
                  R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nulls"
            ARG_LIST
              L_PAREN "("
              VARIADIC_KW "VARIADIC"
              WHITESPACE " "
              CAST_EXPR
                LITERAL
                  STRING "'{}'"
                COLON2 "::"
                ARRAY_TYPE
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        NAME_REF
                          INT_KW "int"
                  L_BRACK "["
                  R_BRACK "]"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- should fail, one or more arguments is required"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nonnulls"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "num_nulls"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- canonicalize_path()"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_canonicalize_path"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      R_PAREN ")"
    WHITESPACE "\n   "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              TEXT_KW "text"
    WHITESPACE "\n   "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    STRING "'regresslib'"
  WHITESPACE "\n   "
  ERROR
    LANGUAGE_KW "LANGUAGE"
  WHITESPACE " "
  ERROR
    IDENT "C"
  WHITESPACE " "
  ERROR
    STRICT_KW "STRICT"
  WHITESPACE " "
  ERROR
    IMMUTABLE_KW "IMMUTABLE"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'/'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'/./abc/def/'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'/./../abc/def'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'/./../../abc/def/'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'/abc/.././def/ghi'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'/abc/./../def/ghi//'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'/abc/def/../..'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'/abc/def/../../..'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'/abc/def/../../../../ghi/jkl'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'.'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'./'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'./abc/..'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'abc/../'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'abc/../def'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'..'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'../abc/def'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'../abc/..'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'../abc/../def'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'../abc/../../def/ghi'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'./abc/./def/.'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'./abc/././def/.'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_canonicalize_path"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'./abc/./def/.././ghi/../../../jkl/mno'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- pg_log_backend_memory_contexts()"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Memory contexts are logged and they are not returned to the function."
  WHITESPACE "\n"
  COMMENT "-- Furthermore, their contents can vary depending on the timing. However,"
  WHITESPACE "\n"
  COMMENT "-- we can at least verify that the code doesn't fail, and that the"
  WHITESPACE "\n"
  COMMENT "-- permissions are set properly."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_log_backend_memory_contexts"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "pg_backend_pid"
                ARG_LIST
                  L_PAREN "("
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_log_backend_memory_contexts"
            ARG_LIST
              L_PAREN "("
              NAME_REF
                IDENT "pid"
              R_PAREN ")"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_stat_activity"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "backend_type"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'checkpointer'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_ROLE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    ROLE_KW "ROLE"
    WHITESPACE " "
    NAME
      IDENT "regress_log_memory"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "has_function_privilege"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'regress_log_memory'"
              COMMA ","
              WHITESPACE "\n  "
              LITERAL
                STRING "'pg_log_backend_memory_contexts(integer)'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'EXECUTE'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- no"
  WHITESPACE "\n\n"
  GRANT_STMT
    GRANT_KW "GRANT"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pg_log_backend_memory_contexts"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE "\n  "
    TO_KW "TO"
    WHITESPACE " "
    IDENT "regress_log_memory"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "has_function_privilege"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'regress_log_memory'"
              COMMA ","
              WHITESPACE "\n  "
              LITERAL
                STRING "'pg_log_backend_memory_contexts(integer)'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'EXECUTE'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- yes"
  WHITESPACE "\n\n"
  SET_ROLE_STMT
    SET_KW "SET"
    WHITESPACE " "
    ROLE_KW "ROLE"
    WHITESPACE " "
    IDENT "regress_log_memory"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_log_backend_memory_contexts"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "pg_backend_pid"
                ARG_LIST
                  L_PAREN "("
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SET_ROLE_STMT
    RESET_KW "RESET"
    WHITESPACE " "
    ROLE_KW "ROLE"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  REVOKE_STMT
    REVOKE_KW "REVOKE"
    WHITESPACE " "
    EXECUTE_KW "EXECUTE"
    WHITESPACE " "
    ON_KW "ON"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "pg_log_backend_memory_contexts"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INTEGER_KW "integer"
      R_PAREN ")"
    WHITESPACE "\n  "
    FROM_KW "FROM"
    WHITESPACE " "
    IDENT "regress_log_memory"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  DROP_ROLE_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    ROLE_KW "ROLE"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_log_memory"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test some built-in SRFs"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- The outputs of these are variable, so we can't just print their results"
  WHITESPACE "\n"
  COMMENT "-- directly, but we can at least verify that the code doesn't fail."
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "setting"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "segsize"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_settings"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          NAME_KW "name"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'wal_segment_size'"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_ls_waldir"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- Test ProjectSet as well as FunctionScan"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      PAREN_EXPR
        L_PAREN "("
        SELECT
          SELECT_CLAUSE
            SELECT_KW "select"
            WHITESPACE " "
            TARGET_LIST
              TARGET
                CALL_EXPR
                  NAME_REF
                    IDENT "pg_ls_waldir"
                  ARG_LIST
                    L_PAREN "("
                    R_PAREN ")"
        R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "ss"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- Test not-run-to-completion cases."
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_ls_waldir"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
    WHITESPACE " "
    LIMIT_CLAUSE
      LIMIT_KW "limit"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "0"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      PAREN_EXPR
        L_PAREN "("
        SELECT
          SELECT_CLAUSE
            SELECT_KW "select"
            WHITESPACE " "
            TARGET_LIST
              TARGET
                STAR "*"
          WHITESPACE " "
          FROM_CLAUSE
            FROM_KW "from"
            WHITESPACE " "
            CALL_EXPR
              NAME_REF
                IDENT "pg_ls_waldir"
              ARG_LIST
                L_PAREN "("
                R_PAREN ")"
          WHITESPACE " "
          LIMIT_CLAUSE
            LIMIT_KW "limit"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "1"
        R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "ss"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            FIELD_EXPR
              PAREN_EXPR
                L_PAREN "("
                NAME_REF
                  IDENT "w"
                R_PAREN ")"
              DOT "."
              NAME_REF
                IDENT "size"
            WHITESPACE " "
            EQ "="
            WHITESPACE " "
            ERROR
              COLON ":"
          NAME
            IDENT "segsize"
  WHITESPACE " "
  ERROR
    AS_KW "as"
  WHITESPACE " "
  ERROR
    IDENT "ok"
  WHITESPACE "\n"
  ERROR
    FROM_KW "from"
  WHITESPACE " "
  PAREN_EXPR
    L_PAREN "("
    SELECT
      SELECT_CLAUSE
        SELECT_KW "select"
        WHITESPACE " "
        TARGET_LIST
          TARGET
            CALL_EXPR
              NAME_REF
                IDENT "pg_ls_waldir"
              ARG_LIST
                L_PAREN "("
                R_PAREN ")"
            WHITESPACE " "
            NAME
              IDENT "w"
    R_PAREN ")"
  WHITESPACE " "
  ERROR
    IDENT "ss"
  WHITESPACE " "
  ERROR
    WHERE_KW "where"
  WHITESPACE " "
  ERROR
    IDENT "length"
  PAREN_EXPR
    L_PAREN "("
    PAREN_EXPR
      L_PAREN "("
  ERROR
    IDENT "w"
  ERROR
    R_PAREN ")"
  ERROR
    DOT "."
  ERROR
    NAME_KW "name"
  ERROR
    R_PAREN ")"
  WHITESPACE " "
  ERROR
    EQ "="
  WHITESPACE " "
  ERROR
    INT_NUMBER "24"
  WHITESPACE " "
  ERROR
    LIMIT_KW "limit"
  WHITESPACE " "
  ERROR
    INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            GTEQ ">="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_ls_archive_statusdir"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            GTEQ ">="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_ls_summariesdir"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- pg_read_file()"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "length"
              ARG_LIST
                L_PAREN "("
                CALL_EXPR
                  NAME_REF
                    IDENT "pg_read_file"
                  ARG_LIST
                    L_PAREN "("
                    LITERAL
                      STRING "'postmaster.pid'"
                    R_PAREN ")"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "20"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "length"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "pg_read_file"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    STRING "'postmaster.pid'"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "1"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "20"
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- Test missing_ok"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_read_file"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'does not exist'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- error"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "pg_read_file"
              ARG_LIST
                L_PAREN "("
                LITERAL
                  STRING "'does not exist'"
                COMMA ","
                WHITESPACE " "
                LITERAL
                  TRUE_KW "true"
                R_PAREN ")"
            WHITESPACE " "
            IS_KW "IS"
            WHITESPACE " "
            LITERAL
              NULL_KW "NULL"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- ok"
  WHITESPACE "\n"
  COMMENT "-- Test invalid argument"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_read_file"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'does not exist'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "0"
              COMMA ","
              WHITESPACE " "
              PREFIX_EXPR
                MINUS "-"
                LITERAL
                  INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- error"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_read_file"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'does not exist'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "0"
              COMMA ","
              WHITESPACE " "
              PREFIX_EXPR
                MINUS "-"
                LITERAL
                  INT_NUMBER "1"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- error"
  WHITESPACE "\n\n"
  COMMENT "-- pg_read_binary_file()"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "length"
              ARG_LIST
                L_PAREN "("
                CALL_EXPR
                  NAME_REF
                    IDENT "pg_read_binary_file"
                  ARG_LIST
                    L_PAREN "("
                    LITERAL
                      STRING "'postmaster.pid'"
                    R_PAREN ")"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "20"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "length"
            ARG_LIST
              L_PAREN "("
              CALL_EXPR
                NAME_REF
                  IDENT "pg_read_binary_file"
                ARG_LIST
                  L_PAREN "("
                  LITERAL
                    STRING "'postmaster.pid'"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "1"
                  COMMA ","
                  WHITESPACE " "
                  LITERAL
                    INT_NUMBER "20"
                  R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- Test missing_ok"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_read_binary_file"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'does not exist'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- error"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "pg_read_binary_file"
              ARG_LIST
                L_PAREN "("
                LITERAL
                  STRING "'does not exist'"
                COMMA ","
                WHITESPACE " "
                LITERAL
                  TRUE_KW "true"
                R_PAREN ")"
            WHITESPACE " "
            IS_KW "IS"
            WHITESPACE " "
            LITERAL
              NULL_KW "NULL"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- ok"
  WHITESPACE "\n"
  COMMENT "-- Test invalid argument"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_read_binary_file"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'does not exist'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "0"
              COMMA ","
              WHITESPACE " "
              PREFIX_EXPR
                MINUS "-"
                LITERAL
                  INT_NUMBER "1"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- error"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_read_binary_file"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'does not exist'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                INT_NUMBER "0"
              COMMA ","
              WHITESPACE " "
              PREFIX_EXPR
                MINUS "-"
                LITERAL
                  INT_NUMBER "1"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- error"
  WHITESPACE "\n\n"
  COMMENT "-- pg_stat_file()"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            NAME_REF
              IDENT "size"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "20"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "isdir"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_stat_file"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'postmaster.pid'"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- pg_ls_dir()"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      PAREN_EXPR
        L_PAREN "("
        SELECT
          SELECT_CLAUSE
            SELECT_KW "select"
            WHITESPACE " "
            TARGET_LIST
              TARGET
                CALL_EXPR
                  NAME_REF
                    IDENT "pg_ls_dir"
                  ARG_LIST
                    L_PAREN "("
                    LITERAL
                      STRING "'.'"
                    R_PAREN ")"
                WHITESPACE " "
                NAME
                  IDENT "a"
        R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "a"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'base'"
    WHITESPACE " "
    LIMIT_CLAUSE
      LIMIT_KW "limit"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- Test missing_ok (second argument)"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_ls_dir"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'does not exist'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- error"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_ls_dir"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'does not exist'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE " "
  COMMENT "-- ok"
  WHITESPACE "\n"
  COMMENT "-- Test include_dot_dirs (third argument)"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            EQ "="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "1"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "dot_found"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_ls_dir"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'.'"
          COMMA ","
          WHITESPACE " "
          LITERAL
            FALSE_KW "false"
          COMMA ","
          WHITESPACE " "
          LITERAL
            TRUE_KW "true"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        AS_KW "as"
        WHITESPACE " "
        NAME
          IDENT "ls"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "ls"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'.'"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            EQ "="
            WHITESPACE " "
            LITERAL
              INT_NUMBER "1"
          WHITESPACE " "
          AS_KW "as"
          WHITESPACE " "
          NAME
            IDENT "dot_found"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_ls_dir"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'.'"
          COMMA ","
          WHITESPACE " "
          LITERAL
            FALSE_KW "false"
          COMMA ","
          WHITESPACE " "
          LITERAL
            FALSE_KW "false"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        AS_KW "as"
        WHITESPACE " "
        NAME
          IDENT "ls"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          IDENT "ls"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'.'"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- pg_timezone_names()"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE " "
      PAREN_EXPR
        L_PAREN "("
        SELECT
          SELECT_CLAUSE
            SELECT_KW "select"
            WHITESPACE " "
            TARGET_LIST
              TARGET
                FIELD_EXPR
                  PAREN_EXPR
                    L_PAREN "("
                    CALL_EXPR
                      NAME_REF
                        IDENT "pg_timezone_names"
                      ARG_LIST
                        L_PAREN "("
                        R_PAREN ")"
                    R_PAREN ")"
                  DOT "."
                  NAME_REF
                    NAME_KW "name"
        R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "ptn"
    WHITESPACE " "
    WHERE_CLAUSE
      WHERE_KW "where"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          NAME_KW "name"
        EQ "="
        LITERAL
          STRING "'UTC'"
    WHITESPACE " "
    LIMIT_CLAUSE
      LIMIT_KW "limit"
      WHITESPACE " "
      LITERAL
        INT_NUMBER "1"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- pg_tablespace_databases()"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "select"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "from"
      WHITESPACE "\n  "
      PAREN_EXPR
        L_PAREN "("
        SELECT
          SELECT_CLAUSE
            SELECT_KW "select"
            WHITESPACE " "
            TARGET_LIST
              TARGET
                CALL_EXPR
                  NAME_REF
                    IDENT "pg_tablespace_databases"
                  ARG_LIST
                    L_PAREN "("
                    NAME_REF
                      IDENT "oid"
                    R_PAREN ")"
                WHITESPACE " "
                AS_KW "as"
                WHITESPACE " "
                NAME
                  IDENT "pts"
          WHITESPACE " "
          FROM_CLAUSE
            FROM_KW "from"
            WHITESPACE " "
            NAME_REF
              IDENT "pg_tablespace"
          WHITESPACE "\n   "
          WHERE_CLAUSE
            WHERE_KW "where"
            WHITESPACE " "
            BIN_EXPR
              NAME_REF
                IDENT "spcname"
              WHITESPACE " "
              EQ "="
              WHITESPACE " "
              LITERAL
                STRING "'pg_default'"
        R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "pts"
      WHITESPACE "\n  "
      JOIN
        JOIN_KW "join"
        WHITESPACE " "
        NAME_REF
          IDENT "pg_database"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "db"
        WHITESPACE " "
        ON_KW "on"
        WHITESPACE " "
        BIN_EXPR
          FIELD_EXPR
            NAME_REF
              IDENT "pts"
            DOT "."
            NAME_REF
              IDENT "pts"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          FIELD_EXPR
            NAME_REF
              IDENT "db"
            DOT "."
            NAME_REF
              IDENT "oid"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test replication slot directory functions"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n"
  CREATE_ROLE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    ROLE_KW "ROLE"
    WHITESPACE " "
    NAME
      IDENT "regress_slot_dir_funcs"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- Not available by default."
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "has_function_privilege"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'regress_slot_dir_funcs'"
              COMMA ","
              WHITESPACE "\n  "
              LITERAL
                STRING "'pg_ls_logicalsnapdir()'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'EXECUTE'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "has_function_privilege"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'regress_slot_dir_funcs'"
              COMMA ","
              WHITESPACE "\n  "
              LITERAL
                STRING "'pg_ls_logicalmapdir()'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'EXECUTE'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "has_function_privilege"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'regress_slot_dir_funcs'"
              COMMA ","
              WHITESPACE "\n  "
              LITERAL
                STRING "'pg_ls_replslotdir(text)'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'EXECUTE'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  GRANT_STMT
    GRANT_KW "GRANT"
    WHITESPACE " "
    IDENT "pg_monitor"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    IDENT "regress_slot_dir_funcs"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- Role is now part of pg_monitor, so these are available."
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "has_function_privilege"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'regress_slot_dir_funcs'"
              COMMA ","
              WHITESPACE "\n  "
              LITERAL
                STRING "'pg_ls_logicalsnapdir()'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'EXECUTE'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "has_function_privilege"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'regress_slot_dir_funcs'"
              COMMA ","
              WHITESPACE "\n  "
              LITERAL
                STRING "'pg_ls_logicalmapdir()'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'EXECUTE'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "has_function_privilege"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'regress_slot_dir_funcs'"
              COMMA ","
              WHITESPACE "\n  "
              LITERAL
                STRING "'pg_ls_replslotdir(text)'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'EXECUTE'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_ROLE_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    ROLE_KW "ROLE"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_slot_dir_funcs"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test adding a support function to a subject function"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "my_int_eq"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "bool"
    WHITESPACE "\n  "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "internal"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "STRICT"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "IMMUTABLE"
      WHITESPACE " "
      PARALLEL_FUNC_OPTION
        PARALLEL_KW "PARALLEL"
        WHITESPACE " "
        IDENT "SAFE"
      WHITESPACE "\n  "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$int4eq$$"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- By default, planner does not think that's selective"
  WHITESPACE "\n"
  EXPLAIN_STMT
    EXPLAIN_KW "EXPLAIN"
    WHITESPACE " "
    L_PAREN "("
    IDENT "COSTS"
    WHITESPACE " "
    ERROR
      OFF_KW "OFF"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "a"
      WHITESPACE " "
      JOIN
        JOIN_KW "JOIN"
        WHITESPACE " "
        NAME_REF
          IDENT "tenk1"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "b"
        WHITESPACE " "
        ON_KW "ON"
        WHITESPACE " "
        BIN_EXPR
          FIELD_EXPR
            NAME_REF
              IDENT "a"
            DOT "."
            NAME_REF
              IDENT "unique1"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            NAME_REF
              IDENT "unique1"
    WHITESPACE "\n"
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "my_int_eq"
        ARG_LIST
          L_PAREN "("
          FIELD_EXPR
            NAME_REF
              IDENT "a"
            DOT "."
            NAME_REF
              IDENT "unique2"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "42"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- With support function that knows it's int4eq, we get a different plan"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_support_func"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          IDENT "internal"
      R_PAREN ")"
    WHITESPACE "\n    "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "internal"
    WHITESPACE "\n    "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    STRING "'regresslib'"
  ERROR
    COMMA ","
  WHITESPACE " "
  ERROR
    STRING "'test_support_func'"
  WHITESPACE "\n    "
  ERROR
    LANGUAGE_KW "LANGUAGE"
  WHITESPACE " "
  ERROR
    IDENT "C"
  WHITESPACE " "
  ERROR
    STRICT_KW "STRICT"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  ALTER_FUNCTION_STMT
    ALTER_KW "ALTER"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "my_int_eq"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    FUNC_OPTION_LIST
      SUPPORT_FUNC_OPTION
        SUPPORT_KW "SUPPORT"
        WHITESPACE " "
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "test_support_func"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXPLAIN_STMT
    EXPLAIN_KW "EXPLAIN"
    WHITESPACE " "
    L_PAREN "("
    IDENT "COSTS"
    WHITESPACE " "
    ERROR
      OFF_KW "OFF"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "a"
      WHITESPACE " "
      JOIN
        JOIN_KW "JOIN"
        WHITESPACE " "
        NAME_REF
          IDENT "tenk1"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "b"
        WHITESPACE " "
        ON_KW "ON"
        WHITESPACE " "
        BIN_EXPR
          FIELD_EXPR
            NAME_REF
              IDENT "a"
            DOT "."
            NAME_REF
              IDENT "unique1"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          FIELD_EXPR
            NAME_REF
              IDENT "b"
            DOT "."
            NAME_REF
              IDENT "unique1"
    WHITESPACE "\n"
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "my_int_eq"
        ARG_LIST
          L_PAREN "("
          FIELD_EXPR
            NAME_REF
              IDENT "a"
            DOT "."
            NAME_REF
              IDENT "unique2"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "42"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Also test non-default rowcount estimate"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "my_gen_series"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                INT_KW "int"
      R_PAREN ")"
    WHITESPACE " "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      SETOF_KW "SETOF"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              INTEGER_KW "integer"
    WHITESPACE "\n  "
    FUNC_OPTION_LIST
      LANGUAGE_FUNC_OPTION
        LANGUAGE_KW "LANGUAGE"
        WHITESPACE " "
        IDENT "internal"
      WHITESPACE " "
      STRICT_FUNC_OPTION
        STRICT_KW "STRICT"
      WHITESPACE " "
      VOLATILITY_FUNC_OPTION
        IMMUTABLE_KW "IMMUTABLE"
      WHITESPACE " "
      PARALLEL_FUNC_OPTION
        PARALLEL_KW "PARALLEL"
        WHITESPACE " "
        IDENT "SAFE"
      WHITESPACE "\n  "
      AS_FUNC_OPTION
        AS_KW "AS"
        WHITESPACE " "
        LITERAL
          DOLLAR_QUOTED_STRING "$$generate_series_int4$$"
      WHITESPACE "\n  "
      SUPPORT_FUNC_OPTION
        SUPPORT_KW "SUPPORT"
        WHITESPACE " "
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "test_support_func"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXPLAIN_STMT
    EXPLAIN_KW "EXPLAIN"
    WHITESPACE " "
    L_PAREN "("
    IDENT "COSTS"
    WHITESPACE " "
    ERROR
      OFF_KW "OFF"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "a"
      WHITESPACE " "
      JOIN
        JOIN_KW "JOIN"
        WHITESPACE " "
        CALL_EXPR
          NAME_REF
            IDENT "my_gen_series"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            LITERAL
              INT_NUMBER "1000"
            R_PAREN ")"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "g"
        WHITESPACE " "
        ON_KW "ON"
        WHITESPACE " "
        BIN_EXPR
          FIELD_EXPR
            NAME_REF
              IDENT "a"
            DOT "."
            NAME_REF
              IDENT "unique1"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          NAME_REF
            IDENT "g"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  EXPLAIN_STMT
    EXPLAIN_KW "EXPLAIN"
    WHITESPACE " "
    L_PAREN "("
    IDENT "COSTS"
    WHITESPACE " "
    ERROR
      OFF_KW "OFF"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "tenk1"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "a"
      WHITESPACE " "
      JOIN
        JOIN_KW "JOIN"
        WHITESPACE " "
        CALL_EXPR
          NAME_REF
            IDENT "my_gen_series"
          ARG_LIST
            L_PAREN "("
            LITERAL
              INT_NUMBER "1"
            COMMA ","
            LITERAL
              INT_NUMBER "10"
            R_PAREN ")"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "g"
        WHITESPACE " "
        ON_KW "ON"
        WHITESPACE " "
        BIN_EXPR
          FIELD_EXPR
            NAME_REF
              IDENT "a"
            DOT "."
            NAME_REF
              IDENT "unique1"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          NAME_REF
            IDENT "g"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test the SupportRequestRows support function for generate_series_timestamp()"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  COMMENT "-- Ensure the row estimate matches the actual rows"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "explain_mask_costs"
            ARG_LIST
              L_PAREN "("
              LITERAL
                DOLLAR_QUOTED_STRING "$$\nSELECT * FROM generate_series(TIMESTAMPTZ '2024-02-01', TIMESTAMPTZ '2024-03-01', INTERVAL '1 day') g(s);$$"
              COMMA ","
              WHITESPACE "\n"
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- As above but with generate_series_timestamp"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "explain_mask_costs"
            ARG_LIST
              L_PAREN "("
              LITERAL
                DOLLAR_QUOTED_STRING "$$\nSELECT * FROM generate_series(TIMESTAMP '2024-02-01', TIMESTAMP '2024-03-01', INTERVAL '1 day') g(s);$$"
              COMMA ","
              WHITESPACE "\n"
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- As above but with generate_series_timestamptz_at_zone()"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "explain_mask_costs"
            ARG_LIST
              L_PAREN "("
              LITERAL
                DOLLAR_QUOTED_STRING "$$\nSELECT * FROM generate_series(TIMESTAMPTZ '2024-02-01', TIMESTAMPTZ '2024-03-01', INTERVAL '1 day', 'UTC') g(s);$$"
              COMMA ","
              WHITESPACE "\n"
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Ensure the estimated and actual row counts match when the range isn't"
  WHITESPACE "\n"
  COMMENT "-- evenly divisible by the step"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "explain_mask_costs"
            ARG_LIST
              L_PAREN "("
              LITERAL
                DOLLAR_QUOTED_STRING "$$\nSELECT * FROM generate_series(TIMESTAMPTZ '2024-02-01', TIMESTAMPTZ '2024-03-01', INTERVAL '7 day') g(s);$$"
              COMMA ","
              WHITESPACE "\n"
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Ensure the estimates match when step is decreasing"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "explain_mask_costs"
            ARG_LIST
              L_PAREN "("
              LITERAL
                DOLLAR_QUOTED_STRING "$$\nSELECT * FROM generate_series(TIMESTAMPTZ '2024-03-01', TIMESTAMPTZ '2024-02-01', INTERVAL '-1 day') g(s);$$"
              COMMA ","
              WHITESPACE "\n"
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Ensure an empty range estimates 1 row"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "explain_mask_costs"
            ARG_LIST
              L_PAREN "("
              LITERAL
                DOLLAR_QUOTED_STRING "$$\nSELECT * FROM generate_series(TIMESTAMPTZ '2024-03-01', TIMESTAMPTZ '2024-02-01', INTERVAL '1 day') g(s);$$"
              COMMA ","
              WHITESPACE "\n"
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Ensure we get the default row estimate for infinity values"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "explain_mask_costs"
            ARG_LIST
              L_PAREN "("
              LITERAL
                DOLLAR_QUOTED_STRING "$$\nSELECT * FROM generate_series(TIMESTAMPTZ '-infinity', TIMESTAMPTZ 'infinity', INTERVAL '1 day') g(s);$$"
              COMMA ","
              WHITESPACE "\n"
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Ensure the row estimate behaves correctly when step size is zero."
  WHITESPACE "\n"
  COMMENT "-- We expect generate_series_timestamp() to throw the error rather than in"
  WHITESPACE "\n"
  COMMENT "-- the support function."
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "generate_series"
        ARG_LIST
          L_PAREN "("
          CAST_EXPR
            NAME_REF
              IDENT "TIMESTAMPTZ"
            WHITESPACE " "
            LITERAL
              STRING "'2024-02-01'"
          COMMA ","
          WHITESPACE " "
          CAST_EXPR
            NAME_REF
              IDENT "TIMESTAMPTZ"
            WHITESPACE " "
            LITERAL
              STRING "'2024-03-01'"
          COMMA ","
          WHITESPACE " "
          CAST_EXPR
            NAME_REF
              INTERVAL_KW "INTERVAL"
            WHITESPACE " "
            LITERAL
              STRING "'0 day'"
          R_PAREN ")"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "g"
        COLUMN_LIST
          L_PAREN "("
          COLUMN
            NAME
              IDENT "s"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "--"
  WHITESPACE "\n"
  COMMENT "-- Test the SupportRequestRows support function for generate_series_numeric()"
  WHITESPACE "\n"
  COMMENT "--"
  WHITESPACE "\n\n"
  COMMENT "-- Ensure the row estimate matches the actual rows"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "explain_mask_costs"
            ARG_LIST
              L_PAREN "("
              LITERAL
                DOLLAR_QUOTED_STRING "$$\nSELECT * FROM generate_series(1.0, 25.0) g(s);$$"
              COMMA ","
              WHITESPACE "\n"
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- As above but with non-default step"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "explain_mask_costs"
            ARG_LIST
              L_PAREN "("
              LITERAL
                DOLLAR_QUOTED_STRING "$$\nSELECT * FROM generate_series(1.0, 25.0, 2.0) g(s);$$"
              COMMA ","
              WHITESPACE "\n"
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Ensure the estimates match when step is decreasing"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "explain_mask_costs"
            ARG_LIST
              L_PAREN "("
              LITERAL
                DOLLAR_QUOTED_STRING "$$\nSELECT * FROM generate_series(25.0, 1.0, -1.0) g(s);$$"
              COMMA ","
              WHITESPACE "\n"
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Ensure an empty range estimates 1 row"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "explain_mask_costs"
            ARG_LIST
              L_PAREN "("
              LITERAL
                DOLLAR_QUOTED_STRING "$$\nSELECT * FROM generate_series(25.0, 1.0, 1.0) g(s);$$"
              COMMA ","
              WHITESPACE "\n"
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Ensure we get the default row estimate for error cases (infinity/NaN values"
  WHITESPACE "\n"
  COMMENT "-- and zero step size)"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "explain_mask_costs"
            ARG_LIST
              L_PAREN "("
              LITERAL
                DOLLAR_QUOTED_STRING "$$\nSELECT * FROM generate_series('-infinity'::NUMERIC, 'infinity'::NUMERIC, 1.0) g(s);$$"
              COMMA ","
              WHITESPACE "\n"
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "explain_mask_costs"
            ARG_LIST
              L_PAREN "("
              LITERAL
                DOLLAR_QUOTED_STRING "$$\nSELECT * FROM generate_series(1.0, 25.0, 'NaN'::NUMERIC) g(s);$$"
              COMMA ","
              WHITESPACE "\n"
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "explain_mask_costs"
            ARG_LIST
              L_PAREN "("
              LITERAL
                DOLLAR_QUOTED_STRING "$$\nSELECT * FROM generate_series(25.0, 2.0, 0.0) g(s);$$"
              COMMA ","
              WHITESPACE "\n"
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              COMMA ","
              WHITESPACE " "
              LITERAL
                FALSE_KW "false"
              COMMA ","
              WHITESPACE " "
              LITERAL
                TRUE_KW "true"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- Test functions for control data"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_control_checkpoint"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_control_init"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_control_recovery"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "count"
              ARG_LIST
                L_PAREN "("
                STAR "*"
                R_PAREN ")"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "ok"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_control_system"
        ARG_LIST
          L_PAREN "("
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- pg_split_walfile_name, pg_walfile_name & pg_walfile_name_offset"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_split_walfile_name"
        ARG_LIST
          L_PAREN "("
          LITERAL
            NULL_KW "NULL"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          STAR "*"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_split_walfile_name"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'invalid'"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            NAME_REF
              IDENT "segment_number"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "ok_segment_number"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "timeline_id"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_split_walfile_name"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'000000010000000100000000'"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            NAME_REF
              IDENT "segment_number"
            WHITESPACE " "
            R_ANGLE ">"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "0"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "ok_segment_number"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "timeline_id"
    WHITESPACE "\n  "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_split_walfile_name"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'ffffffFF00000001000000af'"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CAST_EXPR
            NAME_REF
              IDENT "setting"
            COLON2 "::"
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  NAME_REF
                    IDENT "int8"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "segment_size"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_settings"
    WHITESPACE "\n"
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        NAME_REF
          NAME_KW "name"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'wal_segment_size'"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "segment_number"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "file_offset"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_walfile_name_offset"
        ARG_LIST
          L_PAREN "("
          BIN_EXPR
            CAST_EXPR
              LITERAL
                STRING "'0/0'"
              COLON2 "::"
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      IDENT "pg_lsn"
            WHITESPACE " "
            PLUS "+"
            WHITESPACE " "
            ERROR
              COLON ":"
          NAME_REF
            IDENT "segment_size"
          R_PAREN ")"
      COMMA ","
      WHITESPACE "\n     "
      CALL_EXPR
        NAME_REF
          IDENT "pg_split_walfile_name"
        ARG_LIST
          L_PAREN "("
          NAME_REF
            IDENT "file_name"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "segment_number"
        COMMA ","
        WHITESPACE " "
        TARGET
          NAME_REF
            IDENT "file_offset"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_walfile_name_offset"
        ARG_LIST
          L_PAREN "("
          BIN_EXPR
            CAST_EXPR
              LITERAL
                STRING "'0/0'"
              COLON2 "::"
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      IDENT "pg_lsn"
            WHITESPACE " "
            PLUS "+"
            WHITESPACE " "
            ERROR
              COLON ":"
          BIN_EXPR
            NAME_REF
              IDENT "segment_size"
            WHITESPACE " "
            PLUS "+"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "1"
          R_PAREN ")"
      COMMA ","
      WHITESPACE "\n     "
      CALL_EXPR
        NAME_REF
          IDENT "pg_split_walfile_name"
        ARG_LIST
          L_PAREN "("
          NAME_REF
            IDENT "file_name"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          NAME_REF
            IDENT "segment_number"
        COMMA ","
        WHITESPACE " "
        TARGET
          BIN_EXPR
            NAME_REF
              IDENT "file_offset"
            WHITESPACE " "
            EQ "="
            WHITESPACE " "
            ERROR
              COLON ":"
          NAME
            IDENT "segment_size"
        WHITESPACE " "
        TARGET
          PREFIX_EXPR
            MINUS "-"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "1"
    WHITESPACE "\n"
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "pg_walfile_name_offset"
        ARG_LIST
          L_PAREN "("
          BIN_EXPR
            CAST_EXPR
              LITERAL
                STRING "'0/0'"
              COLON2 "::"
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    NAME_REF
                      IDENT "pg_lsn"
            WHITESPACE " "
            PLUS "+"
            WHITESPACE " "
            ERROR
              COLON ":"
          BIN_EXPR
            NAME_REF
              IDENT "segment_size"
            WHITESPACE " "
            MINUS "-"
            WHITESPACE " "
            LITERAL
              INT_NUMBER "1"
          R_PAREN ")"
      COMMA ","
      WHITESPACE "\n     "
      CALL_EXPR
        NAME_REF
          IDENT "pg_split_walfile_name"
        ARG_LIST
          L_PAREN "("
          NAME_REF
            IDENT "file_name"
          R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- pg_current_logfile"
  WHITESPACE "\n"
  CREATE_ROLE_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    ROLE_KW "ROLE"
    WHITESPACE " "
    NAME
      IDENT "regress_current_logfile"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- not available by default"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "has_function_privilege"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'regress_current_logfile'"
              COMMA ","
              WHITESPACE "\n  "
              LITERAL
                STRING "'pg_current_logfile()'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'EXECUTE'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  GRANT_STMT
    GRANT_KW "GRANT"
    WHITESPACE " "
    IDENT "pg_monitor"
    WHITESPACE " "
    TO_KW "TO"
    WHITESPACE " "
    IDENT "regress_current_logfile"
  SEMICOLON ";"
  WHITESPACE "\n"
  COMMENT "-- role has privileges of pg_monitor and can execute the function"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "has_function_privilege"
            ARG_LIST
              L_PAREN "("
              LITERAL
                STRING "'regress_current_logfile'"
              COMMA ","
              WHITESPACE "\n  "
              LITERAL
                STRING "'pg_current_logfile()'"
              COMMA ","
              WHITESPACE " "
              LITERAL
                STRING "'EXECUTE'"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_ROLE_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    ROLE_KW "ROLE"
    WHITESPACE " "
    NAME_REF
      IDENT "regress_current_logfile"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  CREATE_TABLE
    COMMENT "-- pg_column_toast_chunk_id"
    WHITESPACE "\n"
    CREATE_KW "CREATE"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_chunk_id"
    WHITESPACE " "
    TABLE_ARGS
      L_PAREN "("
      COLUMN
        NAME_REF
          IDENT "a"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "TEXT"
      COMMA ","
      WHITESPACE " "
      COLUMN
        NAME_REF
          IDENT "b"
        WHITESPACE " "
        PATH_TYPE
          PATH
            PATH_SEGMENT
              NAME_REF
                TEXT_KW "TEXT"
        WHITESPACE " "
        STORAGE_KW "STORAGE"
  WHITESPACE " "
  ERROR
    EXTERNAL_KW "EXTERNAL"
  ERROR
    R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  INSERT_STMT
    INSERT_KW "INSERT"
    WHITESPACE " "
    INTO_KW "INTO"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_chunk_id"
    WHITESPACE " "
    SELECT
      VALUES_KW "VALUES"
      WHITESPACE " "
      L_PAREN "("
      LITERAL
        STRING "'x'"
      COMMA ","
      WHITESPACE " "
      CALL_EXPR
        NAME_REF
          IDENT "repeat"
        ARG_LIST
          L_PAREN "("
          LITERAL
            STRING "'x'"
          COMMA ","
          WHITESPACE " "
          LITERAL
            INT_NUMBER "8192"
          R_PAREN ")"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          FIELD_EXPR
            NAME_REF
              IDENT "t"
            DOT "."
            NAME_REF
              IDENT "relname"
          WHITESPACE " "
          AS_KW "AS"
          WHITESPACE " "
          NAME
            IDENT "toastrel"
    WHITESPACE " "
    FROM_CLAUSE
      FROM_KW "FROM"
      WHITESPACE " "
      NAME_REF
        IDENT "pg_class"
      WHITESPACE " "
      ALIAS
        NAME
          IDENT "c"
      WHITESPACE "\n  "
      JOIN
        LEFT_KW "LEFT"
        WHITESPACE " "
        JOIN_KW "JOIN"
        WHITESPACE " "
        NAME_REF
          IDENT "pg_class"
        WHITESPACE " "
        ALIAS
          NAME
            IDENT "t"
        WHITESPACE " "
        ON_KW "ON"
        WHITESPACE " "
        BIN_EXPR
          FIELD_EXPR
            NAME_REF
              IDENT "c"
            DOT "."
            NAME_REF
              IDENT "reltoastrelid"
          WHITESPACE " "
          EQ "="
          WHITESPACE " "
          FIELD_EXPR
            NAME_REF
              IDENT "t"
            DOT "."
            NAME_REF
              IDENT "oid"
    WHITESPACE "\n  "
    WHERE_CLAUSE
      WHERE_KW "WHERE"
      WHITESPACE " "
      BIN_EXPR
        FIELD_EXPR
          NAME_REF
            IDENT "c"
          DOT "."
          NAME_REF
            IDENT "relname"
        WHITESPACE " "
        EQ "="
        WHITESPACE " "
        LITERAL
          STRING "'test_chunk_id'"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "pg_column_toast_chunk_id"
              ARG_LIST
                L_PAREN "("
                NAME_REF
                  IDENT "a"
                R_PAREN ")"
            WHITESPACE " "
            IS_KW "IS"
            WHITESPACE " "
            LITERAL
              NULL_KW "NULL"
        COMMA ","
        WHITESPACE "\n  "
        TARGET
          BIN_EXPR
            CALL_EXPR
              NAME_REF
                IDENT "pg_column_toast_chunk_id"
              ARG_LIST
                L_PAREN "("
                NAME_REF
                  IDENT "b"
                R_PAREN ")"
            WHITESPACE " "
            IN_KW "IN"
            WHITESPACE " "
            PAREN_EXPR
              L_PAREN "("
              SELECT
                SELECT_CLAUSE
                  SELECT_KW "SELECT"
                  WHITESPACE " "
                  TARGET_LIST
                    TARGET
                      NAME_REF
                        IDENT "chunk_id"
                WHITESPACE " "
                FROM_CLAUSE
                  FROM_KW "FROM"
                  WHITESPACE " "
                  FIELD_EXPR
                    NAME_REF
                      IDENT "pg_toast"
                    DOT "."
              ERROR
                COLON ":"
          NAME
            IDENT "toastrel"
  ERROR
    R_PAREN ")"
  WHITESPACE "\n  "
  ERROR
    FROM_KW "FROM"
  WHITESPACE " "
  ERROR
    IDENT "test_chunk_id"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_TABLE
    DROP_KW "DROP"
    WHITESPACE " "
    TABLE_KW "TABLE"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "test_chunk_id"
  SEMICOLON ";"
  WHITESPACE "\n"
  DROP_FUNCTION_STMT
    DROP_KW "DROP"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME_REF
          IDENT "explain_mask_costs"
    PARAM_LIST
      L_PAREN "("
      PARAM
        PATH_TYPE
          TEXT_KW "text"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "bool"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "bool"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "bool"
      COMMA ","
      WHITESPACE " "
      PARAM
        PATH_TYPE
          IDENT "bool"
      R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- test stratnum support functions"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "gist_stratnum_common"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "7"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "gist_stratnum_common"
            ARG_LIST
              L_PAREN "("
              LITERAL
                INT_NUMBER "3"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n\n"
  COMMENT "-- relpath tests"
  WHITESPACE "\n"
  CREATE_FUNCTION_STMT
    CREATE_KW "CREATE"
    WHITESPACE " "
    FUNCTION_KW "FUNCTION"
    WHITESPACE " "
    PATH
      PATH_SEGMENT
        NAME
          IDENT "test_relpath"
    PARAM_LIST
      L_PAREN "("
      R_PAREN ")"
    WHITESPACE "\n    "
    RET_TYPE
      RETURNS_KW "RETURNS"
      WHITESPACE " "
      PATH_TYPE
        PATH
          PATH_SEGMENT
            NAME_REF
              IDENT "void"
    WHITESPACE "\n    "
    FUNC_OPTION_LIST
      AS_FUNC_OPTION
        AS_KW "AS"
  WHITESPACE " "
  ERROR
    COLON ":"
  ERROR
    STRING "'regresslib'"
  WHITESPACE "\n    "
  ERROR
    LANGUAGE_KW "LANGUAGE"
  WHITESPACE " "
  ERROR
    IDENT "C"
  SEMICOLON ";"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "test_relpath"
            ARG_LIST
              L_PAREN "("
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n\n"
  COMMENT "-- pg_replication_origin.roname limit"
  WHITESPACE "\n"
  SELECT
    SELECT_CLAUSE
      SELECT_KW "SELECT"
      WHITESPACE " "
      TARGET_LIST
        TARGET
          CALL_EXPR
            NAME_REF
              IDENT "pg_replication_origin_create"
            ARG_LIST
              L_PAREN "("
              BIN_EXPR
                LITERAL
                  STRING "'regress_'"
                WHITESPACE " "
                CUSTOM_OP
                  PIPE "|"
                  PIPE "|"
                WHITESPACE " "
                CALL_EXPR
                  NAME_REF
                    IDENT "repeat"
                  ARG_LIST
                    L_PAREN "("
                    LITERAL
                      STRING "'a'"
                    COMMA ","
                    WHITESPACE " "
                    LITERAL
                      INT_NUMBER "505"
                    R_PAREN ")"
              R_PAREN ")"
  SEMICOLON ";"
  WHITESPACE "\n"
---
ERROR@2470: expected string literal
ERROR@2470: expected SEMICOLON
ERROR@2471: expected command, found COLON
ERROR@2472: expected command, found STRING
ERROR@2488: expected command, found LANGUAGE_KW
ERROR@2497: expected command, found IDENT
ERROR@2499: expected command, found STRICT_KW
ERROR@2506: expected command, found IMMUTABLE_KW
ERROR@4865: expected SEMICOLON
ERROR@5183: expected an expression, found COLON
ERROR@5191: expected SEMICOLON
ERROR@5192: expected command, found AS_KW
ERROR@5195: expected command, found IDENT
ERROR@5198: expected command, found FROM_KW
ERROR@5228: expected SEMICOLON
ERROR@5229: expected command, found IDENT
ERROR@5232: expected command, found WHERE_KW
ERROR@5238: expected command, found IDENT
ERROR@5246: expected R_PAREN
ERROR@5246: expected R_PAREN
ERROR@5246: expected SEMICOLON
ERROR@5246: expected command, found IDENT
ERROR@5247: expected command, found R_PAREN
ERROR@5248: expected command, found DOT
ERROR@5249: expected command, found NAME_KW
ERROR@5253: expected command, found R_PAREN
ERROR@5255: expected command, found EQ
ERROR@5257: expected command, found INT_NUMBER
ERROR@5260: expected command, found LIMIT_KW
ERROR@5266: expected command, found INT_NUMBER
ERROR@8139: expected R_PAREN
ERROR@8140: expected command, found OFF_KW
ERROR@8143: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@8143: expected SEMICOLON
ERROR@8143: expected command, found R_PAREN
ERROR@8382: expected string literal
ERROR@8382: expected SEMICOLON
ERROR@8383: expected command, found COLON
ERROR@8384: expected command, found STRING
ERROR@8396: expected command, found COMMA
ERROR@8398: expected command, found STRING
ERROR@8422: expected command, found LANGUAGE_KW
ERROR@8431: expected command, found IDENT
ERROR@8433: expected command, found STRICT_KW
ERROR@8519: expected R_PAREN
ERROR@8520: expected command, found OFF_KW
ERROR@8523: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@8523: expected SEMICOLON
ERROR@8523: expected command, found R_PAREN
ERROR@8848: expected R_PAREN
ERROR@8849: expected command, found OFF_KW
ERROR@8852: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@8852: expected SEMICOLON
ERROR@8852: expected command, found R_PAREN
ERROR@8938: expected R_PAREN
ERROR@8939: expected command, found OFF_KW
ERROR@8942: expected SELECT, INSERT, UPDATE, DELETE, MERGE, VALUES, EXECUTE, DECLARE, CREATE TABLE AS, or CREATE MATERIALIZED VIEW AS
ERROR@8942: expected SEMICOLON
ERROR@8942: expected command, found R_PAREN
ERROR@12868: expected SEMICOLON
ERROR@12948: expected an expression, found COLON
ERROR@12949: expected COMMA
ERROR@13082: expected an expression, found COLON
ERROR@13083: expected COMMA
ERROR@13178: expected an expression, found COLON
ERROR@13191: missing comma
ERROR@13240: expected an expression, found COLON
ERROR@13241: expected COMMA
ERROR@13802: expected R_PAREN
ERROR@13802: expected SEMICOLON
ERROR@13803: expected command, found EXTERNAL_KW
ERROR@13811: expected command, found R_PAREN
ERROR@14003: expected SEMICOLON
ERROR@14112: expected field name or number, got COLON
ERROR@14112: expected an expression, found COLON
ERROR@14113: expected R_PAREN
ERROR@14121: expected SEMICOLON
ERROR@14121: expected command, found R_PAREN
ERROR@14125: expected command, found FROM_KW
ERROR@14130: expected command, found IDENT
ERROR@14408: expected string literal
ERROR@14408: expected SEMICOLON
ERROR@14409: expected command, found COLON
ERROR@14410: expected command, found STRING
ERROR@14427: expected command, found LANGUAGE_KW
ERROR@14436: expected command, found IDENT
